{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Database Course","text":"<p>Author: Denis Rinfret</p>"},{"location":"#resources","title":"Resources","text":""},{"location":"#software","title":"Software","text":"<ol> <li>PostgreSQL<ol> <li>Download</li> <li>Documentation</li> </ol> </li> <li>Jetbrains<ol> <li>DataGrip</li> <li>IntelliJ</li> </ol> </li> <li>PlantUML<ol> <li>Class Diagram</li> <li>Online Server</li> </ol> </li> </ol>"},{"location":"#relational-databases","title":"Relational Databases","text":"<p>To better understand the basic principles of relational databases and SQL, here are some resources in English and French that will be very useful:</p> <ol> <li>Wikipedia: The article on relational databases offers a    comprehensive overview, covering history, key concepts such as tables, tuples (rows), attributes (columns), and    relational database management systems (RDBMS).</li> <li>IBM: This article explains the fundamental concepts of    relational databases, including tables, primary and foreign keys, and the advantages of relational databases compared    to other types of databases.</li> <li>Oracle: This guide provides a detailed    explanation of the relational model, logical and physical operations, as well as integrity rules to ensure data    accuracy and accessibility.</li> <li>University of Pennsylvania: A lesson that    introduces the basic concepts of relational database management systems, such as tables, primary keys, and indexed    columns.</li> <li>Lido App: This article explains the essential components of relational    databases, including tables, keys, and relationships, with concrete examples.</li> </ol>"},{"location":"#sql-structured-query-language","title":"SQL (Structured Query Language)","text":"<p>To learn SQL and practice with interactive exercises, here are some excellent online resources:</p> <ol> <li> <p>LearnSQLOnline.org: This site offers free interactive SQL tutorials, covering    basic topics like data selection, table creation, and advanced topics like window functions and subqueries. Exercises    are integrated for immediate practice.</p> </li> <li> <p>W3Schools SQL Exercises: W3Schools offers a series of SQL    exercises with answers for each chapter of their SQL tutorial. You can test your skills and see solutions if you get    stuck.</p> </li> <li> <p>SQL Exercises - w3resource: This site offers a vast collection of    SQL exercises covering different levels of difficulty and topics, such as aggregate functions, joins, and subqueries.    It\u2019s ideal for practicing and improving your SQL skills.</p> </li> <li> <p>GeeksforGeeks SQL Practice: GeeksforGeeks offers SQL exercises    for beginners, intermediates, and advanced users. The exercises cover various topics, from basic queries to window    functions and stored procedures.</p> </li> <li> <p>Khan Academy - Intro to SQL: Khan Academy    offers an interactive SQL course with practical challenges after each lesson. Topics include table creation, queries,    joins, and more.</p> </li> <li> <p>SQLZoo: SQLZoo is a popular site for learning and practicing SQL. It offers interactive    tutorials, exercises, and quizzes covering various aspects of SQL, from basics to advanced concepts.</p> </li> <li> <p>Mode Analytics SQL Tutorial: Mode Analytics offers an interactive SQL tutorial    that allows you to practice with integrated exercises. The tutorial covers basic and advanced SQL concepts.</p> </li> <li> <p>Codecademy: Codecademy offers an interactive SQL course where you    can learn and practice at the same time. While some advanced features require a subscription, the basics are    available for free.</p> </li> <li> <p>DataCamp: DataCamp offers an introduction to    SQL for data science. Although DataCamp is a paid service, it offers free sections to get started.</p> </li> </ol>"},{"location":"#books-on-oreillybanq","title":"Books on O\u2019Reilly/BANQ","text":"<ol> <li>Learning SQL</li> <li>Practical SQL</li> <li>SQL Pocket Guide</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/","title":"What is a Database?","text":"<p>A database is an organized collection of data, typically stored and electronically accessible from a computer system. Databases allow for efficient storage, management, and retrieval of information. They are essential for many applications, ranging from business management systems to web and mobile applications.</p>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#main-components-of-a-database","title":"Main Components of a Database","text":"<ol> <li>Data: The information stored in the database. It can be of different types (text, numbers, dates, etc.) and is    organized in various ways depending on the data model used.</li> <li>Database Management System (DBMS): The software that allows for creating, managing, and manipulating databases.    PostgreSQL is an example of a DBMS.</li> <li>Schema: The structure that defines the organization of data in the database, including tables, columns, data    types, constraints, etc.</li> <li>Queries: The instructions used to interact with the database, most often written in SQL (Structured Query    Language).</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#types-of-databases","title":"Types of Databases","text":"<ol> <li>Relational Databases: Use tables to organize data. Relationships between tables are defined by primary and    foreign keys. Examples: PostgreSQL, MySQL, Oracle, MS SQL Server.</li> <li>NoSQL Databases: Designed for specific needs that are not well supported by relational databases. They include    document, column, graph, and key-value pair databases. Examples: MongoDB, Cassandra, Redis.</li> <li>In-Memory Databases: Store data directly in RAM for very fast performance. Example: Redis.</li> <li>Object-Oriented Databases: Integrate object-oriented programming concepts to store data as objects. Example:    db4o.</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#advantages-of-databases","title":"Advantages of Databases","text":"<ul> <li>Organization: Data is structured in a logical and coherent manner.</li> <li>Quick Access: DBMSs allow for fast and efficient data searches and retrievals.</li> <li>Security: Databases offer mechanisms to protect data against unauthorized access.</li> <li>Data Integrity: Constraints and integrity rules ensure that data remains accurate and consistent.</li> <li>Scalability: Databases can be scaled to handle growing volumes of data.</li> </ul>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#conclusion","title":"Conclusion","text":"<p>Databases are powerful tools for organizing, managing, and accessing data. Understanding the basic concepts of databases and knowing how to use a DBMS like PostgreSQL is essential for any developer or IT professional. In upcoming courses, we will explore in more detail the various aspects of relational databases and the use of SQL to interact with them.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/","title":"Database Types","text":"<p>There are several types of databases, each designed to meet specific needs. Here\u2019s an overview of the main types of databases used today:</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#1-relational-databases","title":"1. Relational Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description","title":"Description","text":"<p>Relational databases organize data in tables that can be linked together through primary and foreign keys. They use SQL (Structured Query Language) for data management and manipulation.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples","title":"Examples","text":"<ul> <li>PostgreSQL: A powerful and extensible open-source relational (and object-relational) DBMS.</li> <li>MySQL: A popular open-source relational DBMS, often used for web applications.</li> <li>Oracle Database: A commercial relational (and object-relational) DBMS with many advanced features.</li> <li>Microsoft SQL Server: A relational DBMS developed by Microsoft, often used in Windows environments.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages","title":"Advantages","text":"<ul> <li>Clear structure: Data is organized in a logical and coherent manner.</li> <li>Data integrity: Constraints and integrity rules ensure data accuracy and consistency.</li> <li>Complex queries: SQL allows for complex queries to extract specific information.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#2-object-relational-databases","title":"2. Object-Relational Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_1","title":"Description","text":"<p>Object-relational databases combine aspects of relational databases and object-oriented databases. They allow storing data in tables while supporting object-oriented programming concepts such as custom data types, table inheritance, and methods.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_1","title":"Examples","text":"<ul> <li>PostgreSQL: An open-source object-relational DBMS that supports advanced features like custom data types and table inheritance[5].</li> <li>Oracle Database: Offers object-relational features in addition to its relational capabilities[5].</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_1","title":"Advantages","text":"<ul> <li>Flexibility: Combines the advantages of relational and object-oriented databases.</li> <li>Extensibility: Allows creating custom data types and methods[5].</li> <li>Compatibility: Maintains compatibility with SQL while offering advanced features.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#3-nosql-databases","title":"3. NoSQL Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_2","title":"Description","text":"<p>NoSQL databases are designed for specific needs that are not well supported by relational databases. They are often used for applications requiring high scalability and performance.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#types-of-nosql-databases","title":"Types of NoSQL Databases","text":"<ul> <li>Document databases: Store data as JSON or BSON documents. Example: MongoDB[5].</li> <li>Column databases: Store data in columns rather than rows. Example: Apache Cassandra.</li> <li>Graph databases: Use graph structures to represent and store data. Example: Neo4j.</li> <li>Key-value databases: Store data as key-value pairs. Example: Redis[5].</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_2","title":"Advantages","text":"<ul> <li>Scalability: Designed to handle large amounts of data and high workloads.</li> <li>Flexibility: Allow storing unstructured or semi-structured data.</li> <li>Performance: Optimized for fast read and write operations.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#4-in-memory-databases","title":"4. In-Memory Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_3","title":"Description","text":"<p>In-memory databases store data directly in random access memory (RAM), allowing for very fast access times. They are often used for applications requiring high real-time performance.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_2","title":"Examples","text":"<ul> <li>Redis: An open-source in-memory database often used for caching and session management[5].</li> <li>Memcached: A distributed in-memory caching system, used to speed up web applications by reducing database load.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_3","title":"Advantages","text":"<ul> <li>Performance: Extremely fast data access.</li> <li>Real-time: Ideal for applications requiring real-time responses.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#5-object-oriented-databases","title":"5. Object-Oriented Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_4","title":"Description","text":"<p>Object-oriented databases store data as objects, similar to object-oriented programming. They allow storing complex objects with their methods and attributes.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_3","title":"Examples","text":"<ul> <li>db4o: An open-source object-oriented database.</li> <li>ObjectDB: An object-oriented database for Java.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_4","title":"Advantages","text":"<ul> <li>Correspondence with object-oriented programming: Facilitates the transition between in-memory objects and stored objects.</li> <li>Data complexity: Allows storing complex data structures.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#conclusion","title":"Conclusion","text":"<p>Each type of database has its own advantages and disadvantages, and the choice of database type depends on the specific needs of the application. In this course, we will primarily focus on relational databases and the use of PostgreSQL, but it\u2019s important to know about other types of databases and their use cases.</p> References <p>[1] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [2] https://www.prisma.io/dataguide/intro/comparing-database-types [3] https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems [4] https://db-engines.com/en/ranking [5] https://www.integrate.io/blog/which-database/ [6] https://bytescout.com/blog/mysql-vs-postgresql-vs-oracle.html [7] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [8] https://severalnines.com/blog/basic-administration-comparison-between-oracle-mssql-mysql-postgresql/ [9] https://www.datasciencecentral.com/decoding-different-types-of-databases-a-comparison/ [10] https://www.reddit.com/r/SQL/comments/spxzfh/ms_sql_server_mysql_oracle_dba_postgresql_which/ [11] https://docs.syteca.com/view/comparison-of-database-types [12] https://db-engines.com/en/system/Microsoft+SQL+Server;Oracle;PostgreSQL [13] https://db-engines.com/en/system/MySQL;Oracle;PostgreSQL</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/","title":"History of Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1960s-the-beginning","title":"1960s: The Beginning","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#file-systems","title":"File Systems","text":"<ul> <li>Sequential Storage: The first data management systems used sequential files to store information. Data was   recorded in a specific order, making search and update operations slow and inefficient.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#hierarchical-databases","title":"Hierarchical Databases","text":"<ul> <li>IMS (Information Management System): Developed by IBM in 1966, IMS is one of the first hierarchical database   management systems (DBMS). Data is organized in a tree structure, with parent and child records[5].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#example-of-hierarchical-structure","title":"Example of Hierarchical Structure","text":"<pre><code>Company\n\u2502\n\u251c\u2500\u2500 Department A\n\u2502   \u251c\u2500\u2500 Employee 1\n\u2502   \u2514\u2500\u2500 Employee 2\n\u2502\n\u2514\u2500\u2500 Department B\n    \u251c\u2500\u2500 Employee 3\n    \u2514\u2500\u2500 Employee 4\n</code></pre>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1970s-the-era-of-relational-databases","title":"1970s: The Era of Relational Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#relational-model","title":"Relational Model","text":"<ul> <li>Edgar F. Codd: In 1970, Edgar F. Codd, a researcher at IBM, proposed the relational model in his paper \u201cA   Relational Model of Data for Large Shared Data Banks\u201d. This model organizes data in tables (relations) and uses keys   to establish relationships between tables[5][10][12].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#relational-dbmss","title":"Relational DBMSs","text":"<ul> <li>System R: IBM developed System R in the 1970s to demonstrate the feasibility of the relational model. This project   led to the creation of SQL (Structured Query Language)[5].</li> <li>Ingres: Another major research project, Ingres, was developed at the University of California, Berkeley, and also   contributed to the popularization of relational databases. This system would later evolve into Postgres and eventually   PostgreSQL[5].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1980s-commercialization-and-standardization","title":"1980s: Commercialization and Standardization","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#commercial-dbmss","title":"Commercial DBMSs","text":"<ul> <li>Oracle: Founded in 1977, Oracle Corporation launched its first commercial relational DBMS in 1979. Oracle quickly   became a leader in the database field[5].</li> <li>IBM DB2: In 1983, IBM launched DB2, a relational DBMS based on System R research[5].</li> <li>Microsoft SQL Server: Launched in 1989, SQL Server became a major player in the relational database field.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#sql-standardization","title":"SQL Standardization","text":"<ul> <li>ANSI SQL: In 1986, the American National Standards Institute (ANSI) published the first SQL standard,   standardizing the query language for relational databases.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1990s-evolution-and-diversification","title":"1990s: Evolution and Diversification","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#object-oriented-databases","title":"Object-Oriented Databases","text":"<ul> <li>Emergence: Object-oriented databases gained popularity for managing complex data and programming objects[5].</li> <li>db4o and ObjectDB: Examples of object-oriented DBMSs that appeared during this period.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#distributed-databases","title":"Distributed Databases","text":"<ul> <li>Scalability: Distributed databases were developed to allow data distribution across multiple servers, thus   improving scalability and fault tolerance.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#2000s-the-rise-of-nosql-databases","title":"2000s: The Rise of NoSQL Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#big-data","title":"Big Data","text":"<ul> <li>Data Explosion: With the rise of the internet and web applications, the volume of data exploded, requiring new   approaches to data management.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#nosql-databases","title":"NoSQL Databases","text":"<ul> <li>MongoDB: Launched in 2009, MongoDB is a document database that allows storing semi-structured data[4].</li> <li>Cassandra: Developed by Facebook, Cassandra is a distributed column database, designed to manage large amounts of   data across multiple servers.</li> <li>Redis: An in-memory database, used for applications requiring high performance[4].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#2010s-to-today-new-trends-and-technologies","title":"2010s to Today: New Trends and Technologies","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#in-memory-databases","title":"In-Memory Databases","text":"<ul> <li>Performance: In-memory databases, such as Redis and Memcached, are gaining popularity for applications requiring   ultra-fast response times[4].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#multi-model-databases","title":"Multi-Model Databases","text":"<ul> <li>Flexibility: Multi-model databases, such as ArangoDB and OrientDB, allow combining multiple data models (   relational, document, graph) in the same DBMS.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#cloud-and-database-as-a-service-dbaas","title":"Cloud and Database as a Service (DBaaS)","text":"<ul> <li>Accessibility: Cloud database services, such as Amazon RDS, Google Cloud SQL, and Azure SQL Database, allow   companies to deploy and manage databases without having to worry about the underlying infrastructure.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#conclusion","title":"Conclusion","text":"<p>The history of databases is marked by constant evolution, responding to growing needs for storage, management, and data access. From the first hierarchical systems to relational databases, through NoSQL databases and in-memory solutions, each step has brought significant innovations. Today, databases continue to evolve to meet the challenges of Big Data, the Internet of Things (IoT), and real-time applications.</p> References <p>[1] https://www.quickbase.com/articles/timeline-of-database-history [2] https://s2.smu.edu/~fmoore/timeline.pdf [3] https://www.thinkautomation.com/histories/the-history-of-databases [4] https://www.linkedin.com/pulse/timeline-databases-darren-culbreath [5] https://en.wikipedia.org/wiki/Database [6] https://fr.wikipedia.org/wiki/Mod%C3%A8le_relationnel [7] https://dbs.academy.lv/lection/dbs_LS02ENa_hist.pdf [8] https://fr.wikipedia.org/wiki/Edgar_Frank_Codd [9] https://www.dataversity.net/brief-history-database-management/ [10] https://www.historyofinformation.com/detail.php?id=94 [11] https://www.cockroachlabs.com/blog/history-of-databases-distributed-sql/ [12] https://www.techno-science.net/definition/7438.html [13] https://librecours.net/modules/bdd/relationnel/solpdf?contentName=relationnel.pdf [14] https://cours.ebsi.umontreal.ca/sci6005/h2022/co/sgbd_modele_relationnel.html [15] https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf [16] https://www.decideo.fr/glossary/Codd-Dr-Edgar-F_gw93.html [17] https://www.ibm.com/history/edgar-codd</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/","title":"Examples of Databases in Different Contexts","text":"<p>Databases are used in a variety of contexts, each with specific needs and characteristics. Here are some examples of databases in different contexts, along with the typical size of databases in these contexts.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#1-embedded-systems","title":"1. Embedded Systems","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example","title":"Example","text":"<ul> <li>IoT (Internet of Things) Devices: Databases are used to store sensor data, device configurations, and event logs.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size","title":"Typical Size","text":"<ul> <li>Order of magnitude: Kilobytes (KB) to Megabytes (MB)</li> <li>Example: An embedded database for a smart thermostat might be a few MB in size to store temperature histories and   configurations.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#2-websites","title":"2. Websites","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_1","title":"Example","text":"<ul> <li>E-commerce Sites: Databases store information about products, users, orders, reviews, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_1","title":"Typical Size","text":"<ul> <li>Order of magnitude: Gigabytes (GB) to Terabytes (TB)</li> <li>Example: A medium-sized e-commerce site may have a database of several hundred GB, while a large site like Amazon   may have databases of several TB.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#3-desktop-applications","title":"3. Desktop Applications","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_2","title":"Example","text":"<ul> <li>Business Management Software: Databases are used to manage information about customers, products, sales,   inventory, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_2","title":"Typical Size","text":"<ul> <li>Order of magnitude: Megabytes (MB) to Gigabytes (GB)</li> <li>Example: Management software for a small business may have a database ranging from a few dozen MB to a few GB.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#4-data-analysis","title":"4. Data Analysis","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_3","title":"Example","text":"<ul> <li>Data Warehousing: Databases are used to store and analyze large amounts of historical data.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_3","title":"Typical Size","text":"<ul> <li>Order of magnitude: Terabytes (TB) to Petabytes (PB)</li> <li>Example: A large company may have a data warehouse of several TB for analyzing sales, operations, and performance.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#5-mobile-applications","title":"5. Mobile Applications","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_4","title":"Example","text":"<ul> <li>Social Network Applications: Databases store information about users, messages, friends, photos, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_4","title":"Typical Size","text":"<ul> <li>Order of magnitude: Megabytes (MB) to Gigabytes (GB)</li> <li>Example: A medium-sized social network application may have a database of several dozen GB to store user   information and shared content.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#6-video-games","title":"6. Video Games","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_5","title":"Example","text":"<ul> <li>Massively Multiplayer Online Games (MMOs): Databases store information about players, characters, inventories,   scores, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_5","title":"Typical Size","text":"<ul> <li>Order of magnitude: Gigabytes (GB) to Terabytes (TB)</li> <li>Example: A large-scale MMO game may have a database of several TB to manage player information and game states.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#7-financial-systems","title":"7. Financial Systems","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_6","title":"Example","text":"<ul> <li>Banking Systems: Databases store information about accounts, transactions, customers, credit histories, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_6","title":"Typical Size","text":"<ul> <li>Order of magnitude: Terabytes (TB) to Petabytes (PB)</li> <li>Example: A large bank may have databases of several PB to manage financial transactions and customer information.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#conclusion","title":"Conclusion","text":"<p>Databases are essential in a variety of contexts, each with specific requirements in terms of size and performance. From a few kilobytes in embedded systems to several petabytes in financial and data analysis systems, databases play a crucial role in storing, managing, and analyzing information.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#units-table","title":"Units Table","text":"Unit (FR) Full Name (FR) Value Base 2 Base 10 (approx) Unit (EN) Full Name (EN) o octet 1 octet 2^0 1 B byte Ko kilooctet 1,024 octets 2^10 1.02 \u00d7 10^3 KB kilobyte Mo m\u00e9gaoctet 1,024 kilooctets 2^20 1.05 \u00d7 10^6 MB megabyte Go gigaoctet 1,024 m\u00e9gaoctets 2^30 1.07 \u00d7 10^9 GB gigabyte To t\u00e9raoctet 1,024 gigaoctets 2^40 1.10 \u00d7 10^12 TB terabyte Po p\u00e9taoctet 1,024 t\u00e9raoctets 2^50 1.13 \u00d7 10^15 PB petabyte Eo exaoctet 1,024 p\u00e9taoctets 2^60 1.15 \u00d7 10^18 EB exabyte Zo zettaoctet 1,024 exaoctets 2^70 1.18 \u00d7 10^21 ZB zettabyte Yo yottaoctet 1,024 zettaoctets 2^80 1.21 \u00d7 10^24 YB yottabyte References <p>[1] https://rivery.io/data-learning-center/database-types-guide/ [2] https://www.confluent.io/learn/database/ [3] https://blog.algomaster.io/p/15-types-of-databases [4] https://visual-flow.com/blog/the-types-of-databases-with-examples [5] https://azure.microsoft.com/en-ca/resources/cloud-computing-dictionary/what-are-databases [6] https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems [7] https://www.simplilearn.com/tutorials/dbms-tutorial/what-is-a-database [8] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [9] https://www.prisma.io/dataguide/intro/comparing-database-types [10] https://www.linkedin.com/advice/3/how-can-you-determine-optimal-database-qvxqc [11] https://www.fivetran.com/blog/what-is-a-database [12] https://dba.stackexchange.com/questions/22888/how-database-size-affects-performance-theory-vs-reality [13] https://blog.bytebytego.com/p/understanding-database-types [14] https://www.sqlskills.com/blogs/paul/physical-database-layout-vs-database-size/ [15] https://www.reddit.com/r/Database/comments/16kl7fi/at_what_size_do_you_consider_a_database_to_be_a/ [16] https://risingwave.com/blog/column-based-database-comparison-analyzing-efficiency/ [17] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [18] https://community.commvault.com/self-hosted-q-a-2/size-of-app-and-size-of-data-are-very-different-1748 [19] https://stackoverflow.com/questions/2804452/database-per-application-vs-one-big-database-for-all-applications</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/","title":"Introduction to PostgreSQL","text":""},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#history-of-postgresql","title":"History of PostgreSQL","text":"<p>PostgreSQL, often called Postgres, is an open-source relational and object-relational database management system. Its development began in 1986 at the University of California, Berkeley, under the POSTGRES project led by Professor Michael Stonebraker[1][2]. The project evolved to become PostgreSQL in 1996, with the addition of SQL support[5].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#data-model-used","title":"Data Model Used","text":"<p>PostgreSQL uses a relational and object-relational data model. This means it supports not only the features of traditional relational databases, such as tables, SQL queries, and transactions, but also advanced features like custom data types, objects, and table inheritance[6][15].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#comparison-of-relational-and-object-relational-models","title":"Comparison of Relational and Object-Relational Models","text":"Characteristic Relational Model Object-Relational Model Data Structure Tables and columns Tables, columns, custom data types, table inheritance Query Language Standard SQL SQL with extensions for objects Data Types Standard data types (INT, VARCHAR, etc.) Standard data types + custom types Object Support No Yes Table Inheritance No Yes"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#importance-and-support-from-major-companies","title":"Importance and Support from Major Companies","text":"<p>PostgreSQL is widely used by many large companies and organizations around the world, including:</p> <ul> <li>Apple</li> <li>Cisco</li> <li>Red Hat</li> <li>Debian</li> <li>Instagram</li> <li>Spotify</li> </ul> <p>These companies choose PostgreSQL for its robustness, flexibility, and adherence to SQL standards.</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#postgresqls-distinctive-features-compared-to-other-dbmss","title":"PostgreSQL\u2019s Distinctive Features Compared to Other DBMSs","text":"<ol> <li>Extensibility: PostgreSQL allows users to define their own data types, operators, and functions[15].</li> <li>ACID Transaction Support: Ensures transaction reliability with atomicity, consistency, isolation, and durability properties[15].</li> <li>SQL Standards Compliance: PostgreSQL is highly compliant with SQL standards, which facilitates application portability[15].</li> <li>Complex Query Support: PostgreSQL supports complex joins, subqueries, materialized views, and more[15].</li> <li>Advanced Indexing: Offers several index types (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) to improve query performance[15].</li> <li>Security: Includes advanced security features such as SSL authentication, data encryption, and role-based access control[15].</li> </ol>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#license","title":"License","text":"<p>PostgreSQL is distributed under the PostgreSQL License, a permissive open-source license similar to the MIT License. This allows free use, modification, and distribution, including for commercial applications[1].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#download-and-installation","title":"Download and Installation","text":""},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#download-links","title":"Download Links","text":"<ul> <li>PostgreSQL Official Website[1]</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#installation-guides","title":"Installation Guides","text":"<ul> <li>Windows Installation Guide</li> <li>macOS Installation Guide</li> <li>Linux Installation Guide</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL is a powerful and flexible DBMS, suitable for a wide range of applications. Its object-relational data model, compliance with SQL standards, and advanced features make it a preferred choice for many companies and developers. Its open-source license and broad community support also contribute to its popularity and continued adoption.</p> References <p>[1] https://www.postgresql.org/docs/current/history.html [2] https://en.wikipedia.org/wiki/PostgreSQL [3] https://www.postgresql.org/docs/7.0/intro60.htm [4] https://www.highgo.ca/2021/11/01/the-postgresql-timeline-concept/ [5] https://www.crunchydata.com/blog/when-did-postgres-become-cool [6] https://www.dbvis.com/thetable/postgresql-vs-mysql/ [7] https://aws.amazon.com/compare/the-difference-between-mysql-vs-postgresql/ [8] https://postgres-xc.sourceforge.net/docs/1_0/history.html [9] https://www.integrate.io/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case/ [10] https://www.youtube.com/watch?v=BtvFuSOAR3E [11] https://www.postgresql.org/docs/6.3/c0102.htm [12] https://leyton.com/ca/insights/articles/database-wars-postges-vs-mysql/ [13] https://www.reddit.com/r/node/comments/rv6u8u/why_do_you_choose_mysql_over_postgres/ [14] https://www.enterprisedb.com/blog/place-postgres-history [15] https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features [16] https://dataegret.com/2024/03/the-importance-of-postgresql-timelines/ [17] https://www.datacamp.com/blog/postgresql-vs-mysql [18] https://kinsta.com/blog/postgresql-vs-mysql/ [19] https://www.bytebase.com/blog/postgres-vs-mysql/ [20] https://www.ibm.com/think/topics/postgresql-vs-mysql</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/","title":"Advantages of PostgreSQL Compared to Other DBMSs","text":"<p>PostgreSQL is recognized for its numerous advanced features, robustness, and flexibility. Here are some of the distinctive advantages of PostgreSQL compared to other database management systems (DBMSs):</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#1-extensibility","title":"1. Extensibility","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description","title":"Description","text":"<p>PostgreSQL is extremely extensible. Users can add new data types, functions, operators, aggregates, indexing methods, and even procedural languages.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example","title":"Example","text":"<pre><code>CREATE FUNCTION add_integers(a INTEGER, b INTEGER) RETURNS INTEGER AS\n    $$\nBEGIN\nRETURN a + b;\nEND;\n$$\nLANGUAGE plpgsql;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#2-sql-standards-compliance","title":"2. SQL Standards Compliance","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_1","title":"Description","text":"<p>PostgreSQL is highly compliant with SQL standards, which facilitates application portability between different DBMSs.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_1","title":"Example","text":"<p>PostgreSQL supports advanced SQL features such as subqueries, complex joins, materialized views, etc.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#3-acid-transactions","title":"3. ACID Transactions","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_2","title":"Description","text":"<p>PostgreSQL ensures transaction reliability with atomicity, consistency, isolation, and durability (ACID) properties.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_2","title":"Example","text":"<pre><code>BEGIN;\nUPDATE accounts\nSET balance = balance - 100\nWHERE id = 1;\nUPDATE accounts\nSET balance = balance + 100\nWHERE id = 2;\nCOMMIT;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#4-advanced-indexing","title":"4. Advanced Indexing","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_3","title":"Description","text":"<p>PostgreSQL offers several types of indexes (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) to improve query performance.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_3","title":"Example","text":"<pre><code>CREATE INDEX idx_gin ON documents USING GIN (content);\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#5-security","title":"5. Security","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_4","title":"Description","text":"<p>PostgreSQL includes advanced security features such as SSL authentication, data encryption, and role-based access control.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_4","title":"Example","text":"<pre><code>CREATE ROLE admin WITH LOGIN PASSWORD 'securepassword';\nGRANT\nALL\nPRIVILEGES\nON\nDATABASE\nmydb TO admin;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#6-complex-query-support","title":"6. Complex Query Support","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_5","title":"Description","text":"<p>PostgreSQL supports complex joins, subqueries, materialized views, window functions, and more.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_5","title":"Example","text":"<pre><code>SELECT name, SUM(salary) OVER (PARTITION BY department) AS total_salary\nFROM employees;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#7-advanced-data-types-support","title":"7. Advanced Data Types Support","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_6","title":"Description","text":"<p>PostgreSQL supports a wide range of data types, including geometric types, JSON types, XML types, and array types.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_6","title":"Example","text":"<pre><code>CREATE TABLE documents\n(\n    id      SERIAL PRIMARY KEY,\n    content JSONB\n);\n\nINSERT INTO documents (content)\nVALUES ('{\"title\": \"PostgreSQL\", \"author\": \"John Doe\"}');\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#8-high-availability-and-replication","title":"8. High Availability and Replication","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_7","title":"Description","text":"<p>PostgreSQL offers robust solutions for high availability and replication, including streaming replication and logical replication.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_7","title":"Example","text":"<pre><code># Streaming replication configuration\nprimary_conninfo = 'host=primary_host port=5432 user=replicator password=securepassword'\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#9-permissive-open-source-license","title":"9. Permissive Open-Source License","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_8","title":"Description","text":"<p>PostgreSQL is distributed under the PostgreSQL License, a permissive open-source license similar to the MIT License, allowing free use, modification, and distribution, including for commercial applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL stands out for its flexibility, standards compliance, advanced features, and robustness. These advantages make it a preferred choice for many companies and developers worldwide, offering a reliable and high-performance solution for a wide range of applications.</p> References <p>[1] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [2] https://www.integrate.io/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case/ [3] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [4] https://www.quest.com/learn/what-is-postgresql.aspx [5] https://www.enterprisedb.com/postgres-tutorials/why-more-and-more-enterprises-are-choosing-postgresql-their-go-database [6] https://www.instaclustr.com/education/postgresql/postgresql-vs-sql-server-13-key-differences-and-how-to-choose/ [7] https://estuary.dev/blog/postgresql-vs-mongodb/ [8] https://www.bytebase.com/blog/postgres-vs-sqlserver/ [9] https://cloud.google.com/learn/postgresql-vs-sql [10] https://www.enterprisedb.com/blog/microsoft-sql-server-mssql-vs-postgresql-comparison-details-what-differences [11] https://www.bytebase.com/blog/postgres-vs-mysql/ [12] https://www.postgresql.org/docs/7.4/features.html [13] https://www.reddit.com/r/SQL/comments/y08ia1/is_there_a_difference_between_sql_and_postgresql/ [14] https://wiki.postgresql.org/wiki/PostgreSQL_vs_SQL_Standard [15] https://www.linkedin.com/pulse/understanding-difference-between-sql-postgresql-which-naeem-shahzad-fc90e [16] https://www.instaclustr.com/education/postgresql/complete-guide-to-postgresql-features-use-cases-and-tutorial/</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/","title":"Companies Using PostgreSQL","text":"<p>PostgreSQL is used by many large companies and organizations around the world for various reasons, including its robustness, flexibility, compliance with SQL standards, and its open-source model. Here are some notable examples:</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#1-apple","title":"1. Apple","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage","title":"Usage","text":"<p>Apple uses PostgreSQL for various internal services and applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons","title":"Reasons","text":"<ul> <li>Reliability and robustness: PostgreSQL is known for its stability and ability to handle large amounts of data.</li> <li>SQL standards compliance: Facilitates integration with other systems and applications.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#2-cisco","title":"2. Cisco","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_1","title":"Usage","text":"<p>Cisco uses PostgreSQL for network management solutions and telecommunications applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_1","title":"Reasons","text":"<ul> <li>Extensibility: Allows customization and extension of features according to specific needs.</li> <li>Security: Offers advanced security features, crucial for telecommunications applications.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#3-red-hat","title":"3. Red Hat","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_2","title":"Usage","text":"<p>Red Hat integrates PostgreSQL into its enterprise solutions, including Red Hat Enterprise Linux and OpenShift.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_2","title":"Reasons","text":"<ul> <li>Open-source: Aligned with Red Hat\u2019s open-source philosophy.</li> <li>Community support: Benefits from broad community support and regular contributions.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#4-debian","title":"4. Debian","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_3","title":"Usage","text":"<p>Debian uses PostgreSQL as the default DBMS for many applications and services.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_3","title":"Reasons","text":"<ul> <li>Permissive license: The PostgreSQL license allows free use and distribution without restrictions.</li> <li>Reliability: PostgreSQL is known for its reliability and performance.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#5-instagram","title":"5. Instagram","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_4","title":"Usage","text":"<p>Instagram uses PostgreSQL to store and manage user data and media.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_4","title":"Reasons","text":"<ul> <li>Scalability: Capable of handling millions of users and transactions per day.</li> <li>Performance: Offers high performance for read and write operations.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#6-spotify","title":"6. Spotify","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_5","title":"Usage","text":"<p>Spotify uses PostgreSQL to manage user data, playlists, and music recommendations.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_5","title":"Reasons","text":"<ul> <li>Flexibility: Allows storing structured and semi-structured data.</li> <li>Complex query support: Capable of handling complex SQL queries for recommendations and analytics.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#7-tripadvisor","title":"7. TripAdvisor","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_6","title":"Usage","text":"<p>TripAdvisor uses PostgreSQL to store and manage user reviews, travel information, and hotel data.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_6","title":"Reasons","text":"<ul> <li>Extensibility: Allows creating custom data types and specific functions.</li> <li>ACID transaction support: Ensures reliability and consistency of critical data.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#8-the-guardian","title":"8. The Guardian","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_7","title":"Usage","text":"<p>The Guardian uses PostgreSQL to manage content, users, and analytical data.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_7","title":"Reasons","text":"<ul> <li>Security: Offers advanced security features to protect sensitive data.</li> <li>SQL standards compliance: Facilitates integration with other content management systems.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#9-french-companies","title":"9. French Companies","text":"<p>Several major French companies also rely on PostgreSQL:</p> <ul> <li>SNCF (French National Railway Company): Uses PostgreSQL to manage railway data and optimize operations.</li> <li>Soci\u00e9t\u00e9 G\u00e9n\u00e9rale: This French bank adopted PostgreSQL for its robustness and ability to operate on various   operating systems.</li> <li>MAIF: Uses PostgreSQL to efficiently manage customer data and internal operations.</li> <li>IGN (National Institute of Geographic and Forest Information): Uses PostgreSQL to manage geospatial data.</li> <li>Air France: Uses PostgreSQL to optimize operational data management and improve passenger services.</li> <li>Carrefour: Uses PostgreSQL to manage its vast product and transaction databases.</li> <li>EDF (\u00c9lectricit\u00e9 de France): Uses PostgreSQL to manage energy data.</li> <li>ENEDIS: Uses PostgreSQL to monitor and optimize electricity distribution.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL is chosen by many large companies for its numerous advantages, including robustness, flexibility, compliance with SQL standards, and its permissive open-source license. These characteristics make it a reliable and high-performance DBMS capable of meeting the varied needs of modern businesses.</p> References <p>[1] https://2025.pgconf.dev [2] https://emplois.ca.indeed.com/q-postgresql-database-emplois.html [3] https://www.reddit.com/r/PostgreSQL/comments/1isii5f/postgresworld_2025_webinar_series/?tl=fr [4] https://www.astera.com/fr/knowledge-center/mongodb-vs-postgresql/ [5] https://fr.wikipedia.org/wiki/PostgreSQL [6] https://www.yugabyte.com/blog/postgresql-top-choice-in-2025/ [7] https://www.lemagit.fr/actualites/252509351/PostgreSQL-ne-decoit-pas-les-entreprises-francaises [8] https://fr.getapp.ca/software/122219/postgresql [9] https://lu.indeed.com/q-postgresql-emplois.html [10] https://blog.dalibo.com/2025/01/06/workshop_postgres17.html</p>"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/","title":"PostgreSQL Configuration","text":""},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#for-windowsmac","title":"For Windows/Mac","text":"<ol> <li>Go to PostgreSQL Download to download the    PostgreSQL DBMS.</li> <li>Go    to PostgreSQL Installation    and follow the instructions to install it.</li> <li>This will install the database server and some other tools to manage databases.<ul> <li>The most important for now, the <code>psql</code> command and the PgAdmin application will be installed at the same time as   the server.</li> </ul> </li> <li>Don\u2019t forget to enter a password for the postgres user.<ul> <li>If it doesn\u2019t ask for a password, it will need to be set from the command line.</li> <li>You will need to use the <code>psql</code> command to change the password for the <code>postgres</code> user.</li> <li>Otherwise, you will need to reinstall.</li> </ul> </li> </ol>"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#for-linux","title":"For Linux","text":"<ol> <li>Follow this guide to install PostgreSQL on    Ubuntu: PostgreSQL on Ubuntu.<ul> <li>The procedure is very similar for other Linux distributions.</li> </ul> </li> <li>Install PgAdmin from here, or through your distribution\u2019s package manager.</li> </ol> References <p>[1] https://www.enterprisedb.com/downloads/postgres-postgresql-downloads [2] https://www.enterprisedb.com/downloads/postgres-postgresql-downloads [3] https://www.postgresql.org/download/macosx/ [4] https://www.w3schools.com/postgresql/postgresql_install.php [5] https://www.sqlshack.com/setting-up-a-postgresql-database-on-mac/ [6] https://www.postgresql.org/download/ [7] https://www.datacamp.com/tutorial/installing-postgresql-windows-macosx [8] https://neon.tech/postgresql/postgresql-getting-started/install-postgresql [9] https://www.prisma.io/dataguide/postgresql/setting-up-a-local-postgresql-database [10] https://www.postgresql.org/docs/current/tutorial-install.html [11] https://coding-boot-camp.github.io/full-stack/postgresql/postgresql-installation-guide/ [12] https://www.enterprisedb.com/docs/supported-open-source/postgresql/installing/ [13] https://www.youtube.com/watch?v=PShGF_udSpk [14] https://www.enterprisedb.com/docs/supported-open-source/postgresql/installing/windows/</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/","title":"Presentation","text":"<p>The relational model is a conceptual framework for organizing and managing data in the form of tables, also called relations. This model was introduced by Edgar F. Codd in 1970 and has become the foundation for relational database management systems (RDBMS), such as PostgreSQL. In this model, data is represented by tuples (rows) in relations ( tables), and operations on the data are performed using a structured query language like SQL (Structured Query Language).</p>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#lexicon","title":"Lexicon","text":"<ol> <li> <p>Relation (Table): A relation is a two-dimensional table composed of rows and columns. Each table represents an    entity or a real-world concept.</p> </li> <li> <p>Attribute (Column): An attribute is a column in a table. Each attribute has a name and a data type (for example,    integer, text, date).</p> </li> <li> <p>Tuple (Row): A tuple is a row in a table. Each tuple represents a unique record of an entity.</p> </li> <li> <p>Domain: A domain is the set of possible values that an attribute can take. For example, the domain of an \u201cage\u201d    attribute might be integers from 0 to 120.</p> </li> <li> <p>Primary Key: A primary key is an attribute or set of attributes that uniquely identifies each tuple in a    relation. For example, a social security number can be a primary key for a table of people.</p> </li> <li> <p>Foreign Key: A foreign key is an attribute or set of attributes in a table that references the primary key of    another table. This creates a relationship between the two tables.</p> </li> <li> <p>Relation Schema: The relation schema is the structure or definition of a relation, including attribute names and    their data types.</p> </li> <li> <p>Referential Integrity: Referential integrity is a constraint that ensures that foreign key values correspond to    existing primary key values in the referenced tables.</p> </li> </ol>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#examples","title":"Examples","text":""},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-1-students-table","title":"Example 1: Students Table","text":"Student_ID Last_Name First_Name Age Department 1 Dupont Jean 20 Computer Science 2 Martin Sophie 22 Mathematics 3 Durand Pierre 21 Physics <ul> <li>Relation: <code>Students</code></li> <li>Attributes: <code>Student_ID</code>, <code>Last_Name</code>, <code>First_Name</code>, <code>Age</code>, <code>Department</code></li> <li>Primary Key: <code>Student_ID</code></li> </ul>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-2-courses-table","title":"Example 2: Courses Table","text":"Course_Code Course_Name Credit CS101 Introduction to CS 3 MA101 Calculus I 4 PH101 General Physics 4 <ul> <li>Relation: <code>Courses</code></li> <li>Attributes: <code>Course_Code</code>, <code>Course_Name</code>, <code>Credit</code></li> <li>Primary Key: <code>Course_Code</code></li> </ul>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-3-enrollments-table","title":"Example 3: Enrollments Table","text":"Student_ID Course_Code 1 CS101 2 MA101 3 PH101 1 MA101 <ul> <li>Relation: <code>Enrollments</code></li> <li>Attributes: <code>Student_ID</code>, <code>Course_Code</code></li> <li>Primary Key: <code>(Student_ID, Course_Code)</code></li> <li>Foreign Keys: <code>Student_ID</code> refers to <code>Students(Student_ID)</code>, <code>Course_Code</code> refers to <code>Courses(Course_Code)</code></li> </ul> <p>These examples show how data can be organized and interconnected in the relational model, facilitating the management and querying of information in an efficient and consistent manner.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20The%20relational%20model/02-ERD/","title":"Introduction to Entity-Relationship Diagrams","text":"<p>An entity-relationship (ER) diagram is a graphical tool used to model data and relationships between them in an information system. It is commonly used in database design to represent entities, their attributes, and the relationships between these entities. This type of diagram helps visualize the database structure and understand how data is interconnected.</p>"},{"location":"2.%20The%20relational%20model/02-ERD/#components-of-an-entity-relationship-diagram","title":"Components of an Entity-Relationship Diagram","text":"<ol> <li> <p>Entities: Represented by rectangles, entities are real-world objects or concepts with independent existence. For    example, in a university database, entities might be Student, Course, and Instructor.</p> </li> <li> <p>Attributes: Represented by ovals, attributes are properties or characteristics of entities. For example, a    Student may have attributes such as Student_ID, Name, and Birth_Date.</p> </li> <li> <p>Relationships: Represented by diamonds, relationships describe how entities are linked to each other. For    example, an Enrollment relationship may connect the Student and Course entities.</p> </li> <li> <p>Cardinality: Cardinality specifies the number of occurrences of one entity that can be associated with an    occurrence of another entity. Common cardinality types are:</p> <ul> <li>One to One (1:1)</li> <li>One to Many (1:N)</li> <li>Many to Many (M:N)</li> </ul> </li> </ol>"},{"location":"2.%20The%20relational%20model/02-ERD/#example-of-an-entity-relationship-diagram","title":"Example of an Entity-Relationship Diagram","text":"<p>Here is an example of an ER diagram for a university database, in PlantUML format.</p> <p>![ER University Diagram](https://www.plantuml.com/plantuml/png/XP11JWCn34NtEKKqIr0hs7PLD6NHJK7Y0ACeyLIM9WvAd0L2782Zz1npCQ96esGe2jdbsVxVt_l0odEqam1Yv0yvVtCqg8Zbfv3ftHyFGs4xYSIPdvnDty0UwPp9gvylT4CFYc4uAGn1aOPKD0c8Bx4OzYxwi9Zrpi2GIQMItVxaVV8qo25lLiaUARL5pH1zbQIYxIpFLk5Ks4fNUtndTDIuK3DCFaabT7kKbt7qosnnkTB_7PfHty12Ai2lWIUY-GBbYYLGzzZ9pKPs3zljNIVNM-FrnoAlqEhKZZ&gt;PlantUML Code</p> <pre><code>@startuml\n\nentity Student {\n    +Student_ID : int\n    +Last_Name : string\n    +First_Name : string\n    +Birth_Date : date\n}\n\nentity Course {\n    +Course_Code : string\n    +Course_Name : string\n    +Credits : int\n}\n\nentity Instructor {\n    +Instructor_ID : int\n    +Name : string\n    +Email : string\n}\n\nentity Enrollment {\n    +Student_ID : int\n    +Course_Code : string\n    +Enrollment_Date : date\n}\n\nentity Course_Offering {\n    +Offering_ID : int\n    +Course_Code : string\n    +Instructor_ID : int\n    +Semester : string\n    +Year : int\n}\n\nStudent \"1\" -- \"0..*\" Enrollment : enrolls\nCourse \"1\" -- \"0..*\" Enrollment : involves\nInstructor \"1\" -- \"0..*\" Course_Offering : teaches\nCourse \"1\" -- \"0..*\" Course_Offering : offered\n\n@enduml\n</code></pre>"},{"location":"2.%20The%20relational%20model/02-ERD/#diagram-explanation","title":"Diagram Explanation","text":"<ul> <li>Student: Entity representing a student, with attributes such as Student_ID, Last_Name, First_Name, and Birth_Date.</li> <li>Course: Entity representing a course, with attributes such as Course_Code, Course_Name, and Credits.</li> <li>Instructor: Entity representing an instructor, with attributes such as Instructor_ID, Name, and Email.</li> <li>Enrollment: Relationship between Student and Course, with attributes such as Student_ID, Course_Code, and   Enrollment_Date.</li> <li>Course_Offering: Relationship between Course and Instructor, with attributes such as Offering_ID, Course_Code,   Instructor_ID, Semester, and Year.</li> </ul>"},{"location":"2.%20The%20relational%20model/02-ERD/#conclusion","title":"Conclusion","text":"<p>Entity-relationship diagrams are valuable tools for database modeling. They allow visual representation of entities, their attributes, and the relationships between them, facilitating understanding and design of the database structure. Using tools like PlantUML to create these diagrams can help standardize and automate the modeling process.</p> References <p>[1] https://www.lucidchart.com/pages/er-diagrams [2] https://www.visual-paradigm.com/guide/data-modeling/what-is-entity-relationship-diagram/ [3] https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model [4] https://opentextbc.ca/dbdesign01/chapter/chapter-8-entity-relationship-model/ [5] https://www.secoda.co/glossary/entity-relationship-diagram [6] https://www.ibm.com/think/topics/entity-relationship-diagram [7] https://mermaid.js.org/syntax/entityRelationshipDiagram.html [8] https://www.techtarget.com/searchdatamanagement/definition/entity-relationship-diagram-ERD [9] https://www.smartdraw.com/entity-relationship-diagram/ [10] https://www.lucidchart.com/pages/ER-diagram-symbols-and-meaning [11] https://fr.wikipedia.org/wiki/Mod%C3%A8le_entit%C3%A9-association</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/01-intro/","title":"1 - Introduction to SQL","text":"<p>SQL (Structured Query Language) is a standardized programming language used to manage and manipulate relational databases. It allows for various operations such as creating, modifying, deleting, and retrieving data in a database. SQL is essential for interacting with relational database management systems (RDBMS) like PostgreSQL, MySQL, Oracle, and SQL Server[1][2][4].</p>"},{"location":"3.%20SQL/01-intro/#history-of-sql","title":"History of SQL","text":"<p>SQL was developed in the early 1970s by IBM researchers Donald D. Chamberlin and Raymond F. Boyce as part of the System R project, which aimed to demonstrate the feasibility of relational databases. The language was initially called SEQUEL (Structured English Query Language) before being renamed SQL[4][5]. In 1986, the American National Standards Institute (ANSI) published the first SQL standard, followed by the International Organization for Standardization (ISO) in 1987[3][4][5]. Since then, SQL has evolved with several revisions and extensions to meet the growing needs of modern databases.</p>"},{"location":"3.%20SQL/01-intro/#overview-of-iso-standards","title":"Overview of ISO Standards","text":"<p>ISO standards for SQL define the specifications and functionalities of the language to ensure interoperability between different database systems. Here are some of the key versions:</p> <ul> <li>SQL-86: The first SQL standard published by ANSI in 1986 and adopted by ISO in 1987[3][4].</li> <li>SQL-89: A minor revision of SQL-86, introducing some improvements and corrections.</li> <li>SQL-92: A major version that added numerous features, including subqueries, outer joins, and integrity   constraints[4].</li> <li>SQL:1999 (SQL3): Introduction of user-defined data types, stored procedures, and recursive query language.</li> <li>SQL:2003: Addition of XML functions, derived tables, and windowed data types.</li> <li>SQL:2008: Improvements to existing features and addition of new ones, such as common table expressions (CTE).</li> <li>SQL:2011: Introduction of temporal data processing features.</li> <li>SQL:2016: Addition of JSON features and new extensions for geospatial data types.</li> </ul>"},{"location":"3.%20SQL/01-intro/#principles-of-a-non-procedural-language","title":"Principles of a Non-Procedural Language","text":"<p>SQL is a non-procedural language, which means that the user specifies what they want to obtain without detailing * how* the system should obtain it[5]. Here are some key principles:</p> <ol> <li> <p>Declaration of Intentions: In SQL, you declare your intentions in terms of desired results. For example, a SELECT    query indicates which columns and rows you want to retrieve, but not how to retrieve them[3].</p> </li> <li> <p>Implementation Abstraction: Implementation details, such as sorting algorithms or data access paths, are managed    by the RDBMS. The user doesn\u2019t need to know these details[2].</p> </li> <li> <p>Automatic Optimization: RDBMSs automatically optimize queries to improve performance. The user focuses on query    logic rather than optimization[2].</p> </li> <li> <p>Ease of Use: Non-procedural language is generally easier to learn and use for end users, as it focuses on results    rather than processes[5].</p> </li> <li> <p>Portability: SQL queries are portable between different database systems, as long as they adhere to ISO    standards, which facilitates migration and interoperability[4].</p> </li> </ol>"},{"location":"3.%20SQL/01-intro/#example-of-an-sql-query","title":"Example of an SQL Query","text":"<pre><code>SELECT Name, FirstName, Age\nFROM Students\nWHERE Department = 'Computer Science';\n</code></pre> <p>This query selects the Name, FirstName, and Age columns from the Students table for students belonging to the Computer Science department, without specifying how the RDBMS should access or sort the data[3][6].</p> <p>In summary, SQL is a powerful and flexible language for interacting with relational databases, offering an abstraction that allows users to focus on desired results rather than implementation details[2][5].</p> References <p>[1] https://aws.amazon.com/what-is/sql/ [2] https://www.techtarget.com/searchdatamanagement/definition/SQL [3] https://www.w3schools.com/sql/sql_intro.asp [4] https://en.wikipedia.org/wiki/SQL [5] https://www.atscale.com/glossary/sql/ [6] https://www.secoda.co/learn/mastering-basic-sql-database-operations-create-read-update-delete [7] https://learn.microsoft.com/en-us/rest/api/sql/database-operations/list-by-database?view=rest-sql-2023-08-01 [8] https://www.spiceworks.com/tech/artificial-intelligence/articles/what-is-sql/ [9] https://learn.microsoft.com/en-us/sql/t-sql/lesson-1-creating-database-objects?view=sql-server-ver16 [10] https://courses.cs.washington.edu/courses/cse100/09wi/lectures/23-DatabaseOperations.pdf [11] https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-sql-database [12] https://www.w3schools.com/sql/ [13] https://www.w3schools.com/sql/sql_operators.asp [14] https://opentextbc.ca/dbdesign01/chapter/sql-structured-query-language/ [15] https://www.youtube.com/watch?v=7mz73uXD9DA [16] https://www.devart.com/dbforge/sql/sqlcomplete/crud-operations-in-sql.html [17] https://www.ibm.com/think/topics/structured-query-language [18] https://learn.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver16 [19] https://www.w3schools.com/sql/sql_examples.asp [20] https://www.datacamp.com/blog/all-about-sql-the-essential-language-for-database-management</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/02a-bases-contacts/","title":"2a - Contact Database","text":"<ul> <li>Think of a contact database on a phone</li> <li>2 tables:<ul> <li><code>contact(CONTACT_ID, name, phone, address, email)</code></li> <li><code>call(CALL_ID, phone, date, time, contact_id*)</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/02a-bases-contacts/#creating-the-contact-database","title":"Creating the Contact Database","text":"<p>1- Run the contact_create.sql file to create the database</p> <ul> <li>the SQL commands included in this file will be explained later</li> <li>open the file in DataGrip and run it in an existing session or create a new session</li> </ul> <p>2- To check the results, you can use the Database Explorer tab or run the following queries:</p> <pre><code>SELECT *\nFROM contacts.contact;\n\nSELECT *\nFROM contacts.call;\n</code></pre> <p>3- To avoid prefixing table names with the schema name each time, we can run the following command:</p> <pre><code>SET\nsearch_path TO contacts;\n\nSELECT *\nFROM contact;\n\nSELECT *\nFROM call;\n</code></pre>"},{"location":"3.%20SQL/02a-bases-contacts/#queries-on-a-single-table","title":"Queries on a Single Table","text":"<p>1- Find John Doe\u2019s email address</p> <pre><code>SELECT email\nFROM contact\nWHERE name = 'John Doe';\n</code></pre> <p>2- Find contacts without a phone number</p> <pre><code>SELECT *\nFROM contact\nWHERE phone IS NULL;\n</code></pre> <p>3- Find contacts with a phone number</p> <pre><code>SELECT *\nFROM contact\nWHERE phone IS NOT NULL;\n</code></pre>"},{"location":"3.%20SQL/02a-bases-contacts/#with-aggregate-functions","title":"With Aggregate Functions","text":"<p>4- Count the number of rows in the <code>call</code> table</p> <pre><code>SELECT COUNT(*)\nFROM call;\n</code></pre> <p>5- Count the number of rows in the <code>call</code> table with non-null values for <code>contact_id</code></p> <pre><code>SELECT COUNT(contact_id)\nFROM call;\n</code></pre> <p>6- Count the number of rows in the <code>call</code> table with null values for <code>contact_id</code></p> <pre><code>SELECT COUNT(*)\nFROM call\nWHERE contact_id IS NULL;\n</code></pre>"},{"location":"3.%20SQL/02b-bases-universit%C3%A9/","title":"2b - University Database","text":"<p>Run the university_create.sql file to create the University database.</p> <pre><code>set\nsearch_path to university;\n</code></pre> <p>1- Projection: choose the columns to include in the results</p> <pre><code>select name, email\nfrom student;\n</code></pre> <p>2- Suppose the university charges $200 per credit for a course. Find the price for each course.</p> <ul> <li><code>price</code> is an alias for the calculated column</li> </ul> <pre><code>select code, name, credits * 200 as price\nfrom course;\n</code></pre> <p>3- Selection: filter the rows to include in the results</p> <ul> <li>Keep only course offerings for the Winter 2020 semester</li> </ul> <pre><code>select *\nfrom offering\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>4- Sorting: order instructors by their names</p> <pre><code>select iid, name, email\nfrom instructor\norder by name;\n\nselect iid, name, email\nfrom instructor\norder by 2;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/","title":"3a - Queries with More Than One Table (Contacts)","text":"<pre><code>SET\nsearch_path TO contacts;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#cartesian-product","title":"Cartesian Product","text":"<ul> <li>Associate each row of one table with each row of the other table<ul> <li>gives too many rows</li> <li>rarely used because it generally doesn\u2019t provide useful information</li> <li>and it can become very inefficient if the tables involved are large<ul> <li>the number of rows in the results will be the multiplication of the number of rows in each table involved</li> </ul> </li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call,\n     contact;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#join-with-cartesian-product","title":"Join (with Cartesian Product)","text":"<ul> <li>Keep only the matching rows, by \u201cfollowing\u201d the foreign key from <code>call</code> to <code>contact</code><ul> <li>this is the old way of doing a join (a Cartesian product followed by a <code>WHERE</code> condition)</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call,\n     contact\nWHERE call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#joins-with-join","title":"Joins (with <code>JOIN</code>)","text":""},{"location":"3.%20SQL/03a-jointures-contacts/#inner-join","title":"Inner Join","text":"<ul> <li>A more modern way to express a join in SQL<ul> <li>there are several types of joins, the most common type is an <code>INNER JOIN</code></li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         INNER JOIN contact\n                    ON call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#natural-join","title":"Natural Join","text":"<ul> <li>Join on columns having the same names, using the = operator, and removing duplicate columns<ul> <li>note that the columns are in a different order</li> <li>it is not recommended (even discouraged) to use natural joins because the join condition is not specified and   could have consequences that are difficult to predict, especially in the long term if the database is modified   after the queries are written</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         NATURAL JOIN contact; \n</code></pre> <ul> <li>The phone call with ID 2 doesn\u2019t match any contact, so it\u2019s not listed in the results</li> <li>Every time we use = with <code>NULL</code>, it\u2019s always false, so call 3 is not in the results</li> </ul>"},{"location":"3.%20SQL/03a-jointures-contacts/#outer-joins","title":"Outer Joins","text":"<ul> <li>Use a left outer join to keep phone calls that don\u2019t match any contact<ul> <li>it\u2019s like an inner join, but rows on the left that don\u2019t match anything on the right will be kept</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         LEFT OUTER JOIN contact\n                         ON call.contact_id = contact.contact_id;\n</code></pre> <ul> <li>Use a right outer join to keep contacts that don\u2019t match any phone call</li> </ul> <pre><code>SELECT *\nFROM call\n         RIGHT OUTER JOIN contact\n                          ON call.contact_id = contact.contact_id;\n</code></pre> <ul> <li>Or a full outer join to keep rows that don\u2019t match anything on either side</li> </ul> <pre><code>SELECT *\nFROM call\n         FULL OUTER JOIN contact\n                         ON call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/","title":"3b - Queries with More Than One Table (University)","text":"<pre><code>set\nsearch_path to university;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#cartesian-product","title":"Cartesian Product","text":"<p>1- Associate each row of the first table with each row of the second</p> <pre><code>select *\nfrom offering,\n     instructor;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#join","title":"Join","text":"<p>2- Like the Cartesian product, but keep only the interesting matching rows</p> <ul> <li>here, keep only the matching instructor IDs (column <code>iid</code>)</li> </ul> <pre><code>select *\nfrom offering,\n     instructor\nwhere offering.iid = instructor.iid;\n</code></pre> <p>3- More modern way to write the same query: use an <code>inner join</code></p> <pre><code>select *\nfrom offering\n         inner join instructor on offering.iid = instructor.iid;\n\nselect *\nfrom offering as o\n         inner join instructor as i on o.iid = i.iid;\n\n\nselect semester, year, section, i.name as instructor_name, c.name as course_name\nfrom offering as o\n    inner join instructor as i\non o.iid = i.iid\n    inner join course c on c.cid = o.cid;\n</code></pre> <p>4- (Almost) the same query with a <code>natural join</code></p> <ul> <li>differences: only one <code>iid</code> column, and columns in a different order</li> <li>not recommended: the behavior of a natural join can be unpredictable</li> </ul> <pre><code>select *\nfrom offering\n         natural join instructor;\n\n-- doesn't work\nselect *\nfrom offering\n         natural join instructor\n         natural join course;\n</code></pre> <p>5- Get the IDs and names of instructors teaching in the Winter 2020 semester</p> <ul> <li>we need to specify which of the two <code>iid</code> columns we want, even though they are equal</li> </ul> <pre><code>select instructor.iid, name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>6- Use <code>distinct</code> to remove duplicates</p> <pre><code>select distinct instructor.iid, name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>7- Get the codes and names of courses offered in the Winter 2020 semester</p> <pre><code>select distinct course.code, course.name\nfrom course\n         inner join offering on course.cid = offering.cid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>8- Get the codes and names of courses offered in the Winter 2020 semester, along with the names of the instructors</p> <ul> <li>first attempt: why doesn\u2019t this work?</li> </ul> <pre><code>select code, course.name, instructor.name\nfrom offering\n         natural join instructor\n         natural join course\nwhere semester = 'W'\n          and year = 2020;\n\n--- second attempt\nselect distinct code, course.name, instructor.name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\n         inner join course on offering.cid = course.cid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>9- What about offerings without an instructor?</p> <ul> <li>The <code>iid</code> in offering can be null, but not the <code>cid</code></li> <li>if <code>iid</code> is null in offering, it won\u2019t match anything in instructor</li> <li>outer joins: keep rows that don\u2019t match</li> </ul> <pre><code>select o.oid, o.iid, i.iid\nfrom offering as o\n         inner join instructor as i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         left outer join instructor i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         right outer join instructor i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         full outer join instructor i on o.iid = i.iid;\n</code></pre> <p>10- Get the course IDs offered in 2020, along with the instructor names</p> <pre><code>select distinct cid, instructor.name as instructor_name\nfrom offering\n         left join instructor on offering.iid = instructor.iid\nwhere year = 2020;\n</code></pre> <p>11- Get the codes and names of courses offered in 2020, along with the semester and instructor names</p> <pre><code>select distinct code,\n                course.name     as course_name,\n                semester,\n                instructor.name as instructor_name\nfrom (offering left join instructor on offering.iid = instructor.iid)\n         right join course on offering.cid = course.cid\nwhere year = 2020;\n</code></pre> <p>12- Find offerings without an instructor</p> <pre><code>select *\nfrom offering\nwhere iid is null;\n</code></pre> <p>13- Find students not enrolled in any course</p> <pre><code>select s.*\nfrom student s\n         left join enrollment e on s.sid = e.sid\nwhere oid is null;\n</code></pre> <p>14- Find courses that have never been offered</p> <pre><code>select c.*\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere oid is null;\n</code></pre> <p>15- Find offerings in which no student is enrolled</p> <pre><code>select o.*\nfrom offering o\n         left join enrollment e on o.oid = e.oid\nwhere e.oid is null;\n</code></pre>"},{"location":"3.%20SQL/04a-groupes-contacts/","title":"4a - Grouping and Aggregates (Contacts)","text":"<pre><code>SET\nsearch_path TO contacts;\n</code></pre> <p>1- Count the number of rows in the <code>call</code> table</p> <pre><code>SELECT COUNT(*)\nFROM call;\n</code></pre> <p>2- Count the number of calls for each phone number in the <code>call</code> table, and rename the <code>count</code> column to something more appropriate.</p> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone;\n</code></pre> <p>3- Count the number of calls for each phone number in the <code>call</code> table, and sort the results by the largest number of calls first.</p> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone\nORDER BY 2 DESC;\n</code></pre> <p>4- Count the number of calls for each phone number in the <code>call</code> table, and keep only the phone numbers with more than one call.</p> <ul> <li>use <code>HAVING</code> with a condition</li> <li><code>HAVING</code> is similar to <code>WHERE</code>, but it is executed after the <code>GROUP BY</code>, while the <code>WHERE</code> is executed after the   <code>FROM</code>, but before the <code>GROUP BY</code></li> <li>even though <code>SELECT</code> is written first, it is actually executed after <code>HAVING</code>, but before <code>ORDER BY</code> (if present)</li> </ul> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>5- We can group not only the rows of a table, but also any result set from the <code>FROM</code> part of the query</p> <ul> <li>this query calculates the number of calls for each contact (not for each phone number in <code>call</code>, but for each   <code>contact_id</code> in <code>contact</code>)</li> <li>note that contacts without any calls are listed with a count of 0 because we\u2019re using a left outer join, so contacts   not matching anything in <code>call</code>, in other words, contacts without associated calls, will be kept in the results</li> </ul> <pre><code>SELECT contact.contact_id, COUNT(call_id) AS n_calls\nFROM contact\n         LEFT OUTER JOIN call\n                         ON contact.contact_id = call.contact_id\nGROUP BY contact.contact_id\nORDER BY n_calls DESC;\n</code></pre>"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/","title":"4b - Grouping and Aggregates (University)","text":"<pre><code>set\nsearch_path to university;\n</code></pre> <p>1- Find the number of course offerings for each year</p> <pre><code>select year, count (oid)\nfrom offering\ngroup by year;\n</code></pre> <p>2- Same result because <code>oid</code> cannot be null</p> <pre><code>select year, count (*)\nfrom offering\ngroup by year;\n</code></pre> <p>3- Similar, but different results because of null values</p> <pre><code>select year, count (iid)\nfrom offering\ngroup by year;\n</code></pre> <p>4- Find the number of course offerings for each instructor</p> <pre><code>select iid, count(*)\nfrom offering\ngroup by iid;\n   ```\n\n5- Get the number of students enrolled in each course offering\n\n```sql\nselect oid, count(sid)\nfrom enrollment\ngroup by oid;\n</code></pre> <p>6- Get the number of students enrolled in each course offering</p> <ul> <li>with course codes, names, and sections</li> </ul> <pre><code>select e.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    inner join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by e.oid, code, name, section;\n</code></pre> <p>7- What about offerings without enrollments?</p> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\norder by n_students desc;\n</code></pre> <p>8- Get the number of students enrolled in each course offering</p> <ul> <li>with course codes, names, and sections, but only for course offerings with fewer than 3 enrollments</li> </ul> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\nhaving count (sid) &lt; 3;\n</code></pre> <p>9- Same thing, but with fewer than one enrollment</p> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\nhaving count (sid) &lt; 1;\n</code></pre> <pre><code>-- better answer\nselect o.oid, code, name, section\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\nwhere e.oid is null;\n</code></pre>"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/#exercises","title":"Exercises","text":"<ol> <li>Get the number of course offerings for each instructor</li> <li>Get the number of course offerings for the instructor with ID 1, for each year</li> <li>Get the number of course offerings for each instructor for each year<ul> <li>what about instructors without any course offerings?</li> </ul> </li> <li>Get the number of course offerings for each instructor for each semester and each year<ul> <li>what about semesters without any course offerings?</li> <li>what about semesters without course offerings for certain instructors?<ul> <li>for example, many instructors teach only in fall and winter semesters, but not in summer semesters; should we   list these semesters without courses for each instructor with a count of 0?</li> </ul> </li> </ul> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/","title":"5 - Overview of Operations in SQL Queries","text":"<p>To begin understanding the basic operations of an SQL query, let\u2019s examine a simple projection using the <code>SELECT</code> and <code>FROM</code> clauses. These clauses are fundamental for extracting data from a relational database like PostgreSQL. We\u2019ll illustrate this with a store customer table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#creating-a-customer-table","title":"Creating a Customer Table","text":"<p>Let\u2019s imagine we have a table named <code>customers</code> that contains information about store customers. Here\u2019s how this table might be defined and populated with some example rows:</p> <pre><code>CREATE TABLE customers\n(\n    id                SERIAL PRIMARY KEY,\n    lastname          VARCHAR(50),\n    firstname         VARCHAR(50),\n    email             VARCHAR(100),\n    city              VARCHAR(50),\n    registration_date DATE\n);\n\nINSERT INTO customers (lastname, firstname, email, city, registration_date)\nVALUES ('Dupont', 'Jean', 'jean.dupont@example.com', 'Paris', '2023-01-15'),\n       ('Martin', 'Marie', 'marie.martin@example.com', 'Lyon', '2023-02-20'),\n       ('Durand', 'Paul', 'paul.durand@example.com', 'Marseille', '2023-03-10'),\n       ('Lefevre', 'Sophie', 'sophie.lefevre@example.com', 'Toulouse', '2023-04-05'),\n       ('Moreau', 'Pierre', 'pierre.moreau@example.com', 'Nice', '2023-05-18'),\n       ('Simon', 'Lucie', 'lucie.simon@example.com', 'Nantes', '2023-06-22'),\n       ('Laurent', 'Julie', 'julie.laurent@example.com', 'Bordeaux', '2023-07-30'),\n       ('Lemoine', 'Antoine', 'antoine.lemoine@example.com', 'Strasbourg', '2023-08-14'),\n       ('Roux', 'Claire', 'claire.roux@example.com', 'Lille', '2023-09-01'),\n       ('Petit', 'Nicolas', 'nicolas.petit@example.com', 'Rennes', '2023-10-10');\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-select-and-from","title":"Using <code>SELECT</code> and <code>FROM</code>","text":"<p>The <code>SELECT</code> clause is used to specify the columns you want to retrieve, while the <code>FROM</code> clause indicates the table from which this data comes. Here are some examples of SQL queries using these clauses:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-select-all-columns","title":"Example 1: Select All Columns","text":"<p>To retrieve all information from the <code>customers</code> table, you can use the asterisk (<code>*</code>) to indicate that you want all columns:</p> <pre><code>SELECT *\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-select-specific-columns","title":"Example 2: Select Specific Columns","text":"<p>If you only want certain columns, for example, the name and email of customers, you can specify these columns in the <code>SELECT</code> clause:</p> <pre><code>SELECT lastname, email\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-select-with-an-alias","title":"Example 3: Select with an Alias","text":"<p>You can also use aliases to rename columns in the result. This can be useful for making results more readable or to avoid name conflicts:</p> <pre><code>SELECT lastname AS CustomerName, email AS CustomerEmail\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary","title":"Summary","text":"<ul> <li><code>SELECT</code>: Specifies the columns to retrieve.</li> <li><code>FROM</code>: Indicates the table from which the data comes.</li> </ul> <p>These basic operations form the foundation of data manipulation in SQL. As you progress, you\u2019ll learn to use other clauses and functions to perform more complex operations, such as filtering with <code>WHERE</code>, sorting with <code>ORDER BY</code>, and much more.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-the-where-clause","title":"Using the <code>WHERE</code> Clause","text":"<p>The second fundamental operation in an SQL query is filtering data using the <code>WHERE</code> clause. This clause allows you to specify conditions that must be met for a row to be included in the query result. Let\u2019s look at some simple examples of filtering on our <code>customers</code> table.</p> <p>The <code>WHERE</code> clause is used to extract only records that meet a specific condition. Here are some examples illustrating its use:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-filter-by-city","title":"Example 1: Filter by City","text":"<p>Suppose we want to retrieve all customers who live in Paris. We\u2019ll use the <code>WHERE</code> clause to specify this condition:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-filter-by-last-name","title":"Example 2: Filter by Last Name","text":"<p>If we want to find all customers whose last name is \u201cDurand\u201d, we can write the following query:</p> <pre><code>SELECT *\nFROM customers\nWHERE lastname = 'Durand';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-filter-by-email","title":"Example 3: Filter by Email","text":"<p>To retrieve customers whose email address ends with \u201c@example.com\u201d, we can use the <code>LIKE</code> operator with a search pattern:</p> <pre><code>SELECT *\nFROM customers\nWHERE email LIKE '%@example.com';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-filter-by-multiple-conditions","title":"Example 4: Filter by Multiple Conditions","text":"<p>It\u2019s also possible to combine multiple conditions using the logical operators <code>AND</code> and <code>OR</code>. For example, to select customers who live in Lyon or Marseille, we\u2019ll use <code>OR</code>:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Lyon'\n   OR city = 'Marseille';\n</code></pre> <p>To select customers who live in Paris and whose last name is \u201cDupont\u201d, we\u2019ll use <code>AND</code>:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris'\n  AND lastname = 'Dupont';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-5-filter-by-numeric-conditions","title":"Example 5: Filter by Numeric Conditions","text":"<p>Although our <code>customers</code> table doesn\u2019t contain numeric data in this example, if it had a column like <code>age</code>, we could filter customers over 30 years old as follows:</p> <pre><code>SELECT *\nFROM customers\nWHERE age &gt; 30;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_1","title":"Summary","text":"<ul> <li><code>WHERE</code>: Used to filter rows based on specific conditions.</li> <li>Logical Operators: <code>AND</code>, <code>OR</code> to combine multiple conditions.</li> <li>Comparison Operators: <code>=</code>, <code>&gt;</code>, <code>=</code>, `` (not equal).</li> <li><code>LIKE</code>: Used for pattern searches in character strings.</li> </ul> <p>The <code>WHERE</code> clause is essential for extracting relevant and precise data from a database, based on the specific needs of the user or application.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-order-by","title":"Using <code>ORDER BY</code>","text":"<p>Sorting results in an SQL query is done using the <code>ORDER BY</code> clause. This clause allows you to specify the order in which rows should be returned, whether in ascending or descending order. You can sort results based on one or more columns.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-simple-sort-by-name","title":"Example 1: Simple Sort by Name","text":"<p>To sort results by customer name in ascending order (default), you can use the following query:</p> <pre><code>SELECT *\nFROM customers\nORDER BY lastname;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-sort-in-descending-order","title":"Example 2: Sort in Descending Order","text":"<p>To sort results by customer name in descending order, use the <code>DESC</code> keyword:</p> <pre><code>SELECT *\nFROM customers\nORDER BY lastname DESC;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-sort-by-multiple-columns","title":"Example 3: Sort by Multiple Columns","text":"<p>You can sort results by multiple columns. For example, to sort first by city in ascending order, then by name in descending order:</p> <pre><code>SELECT *\nFROM customers\nORDER BY city, lastname DESC;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-sort-with-a-where-clause","title":"Example 4: Sort with a <code>WHERE</code> Clause","text":"<p>You can combine <code>ORDER BY</code> with a <code>WHERE</code> clause to filter and sort results. For example, to get customers from Paris sorted by registration date:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris'\nORDER BY registration_date;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_2","title":"Summary","text":"<ul> <li><code>ORDER BY</code>: Used to specify the order of results.</li> <li>Ascending Order: By default, results are sorted in ascending order (<code>ASC</code>).</li> <li>Descending Order: Use <code>DESC</code> to sort in descending order.</li> <li>Multiple Sorting: You can sort by multiple columns by separating them with commas.</li> <li>Combination with <code>WHERE</code>: <code>ORDER BY</code> can be used after <code>WHERE</code> to sort filtered results.</li> </ul> <p>Sorting results is a powerful feature that allows you to present data in an organized and readable way, based on your specific needs.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#scalar-functions","title":"Scalar Functions","text":"<p>In SQL, functions can be used in the <code>SELECT</code> clause to perform various operations on data. These functions can be aggregate functions, which operate on a set of values to return a single one, or scalar functions, which operate on a single value and return a new value.</p> <p>Scalar functions are applied to each row individually. Here are some examples:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-using-upper-to-convert-to-uppercase","title":"Example 1: Using <code>UPPER</code> to Convert to Uppercase","text":"<p>Suppose we want to display last names in uppercase:</p> <pre><code>SELECT UPPER(lastname) AS UppercaseName, firstname\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-using-length-to-get-the-length-of-a-string","title":"Example 2: Using <code>LENGTH</code> to Get the Length of a String","text":"<p>To get the length of email addresses:</p> <pre><code>SELECT lastname, LENGTH(email) AS EmailLength\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-using-functions-on-dates","title":"Example 3: Using Functions on Dates","text":"<p>Imagine we\u2019ve added a <code>registration_date</code> column to our <code>customers</code> table and we want to extract the registration year:</p> <pre><code>ALTER TABLE customers\n    ADD COLUMN registration_date DATE;\n\nUPDATE customers\nSET registration_date = '2023-01-15'\nWHERE id = 1;\n-- (Add dates for other customers as needed)\n\nSELECT lastname, EXTRACT(YEAR FROM registration_date) AS RegistrationYear\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#aggregate-functions","title":"Aggregate Functions","text":"<p>Aggregate functions calculate a single value from a set of values. Here are some examples:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-using-count-to-count-the-number-of-customers","title":"Example 4: Using <code>COUNT</code> to Count the Number of Customers","text":"<p>To count the total number of customers in the table:</p> <pre><code>SELECT COUNT(*) AS NumberOfCustomers\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-5-using-avg-to-calculate-an-average","title":"Example 5: Using <code>AVG</code> to Calculate an Average","text":"<p>If we had an <code>age</code> column and we wanted to calculate the average age of customers:</p> <pre><code>ALTER TABLE customers\n    ADD COLUMN age INT;\n\nUPDATE customers\nSET age = 30\nWHERE id = 1;\n-- (Add ages for other customers as needed)\n\nSELECT AVG(age) AS AverageAge\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-6-using-min-and-max-to-find-extreme-values","title":"Example 6: Using <code>MIN</code> and <code>MAX</code> to Find Extreme Values","text":"<p>To find the minimum and maximum age:</p> <pre><code>SELECT MIN(age) AS MinimumAge, MAX(age) AS MaximumAge\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_3","title":"Summary","text":"<ul> <li>Scalar Functions: Operate on each row individually (e.g., <code>UPPER</code>, <code>LENGTH</code>, <code>EXTRACT</code>).</li> <li>Aggregate Functions: Operate on a set of rows to return a single value (e.g., <code>COUNT</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code>).</li> <li>Date Functions: Used to manipulate and extract information from dates (e.g., <code>EXTRACT</code>).</li> </ul> <p>These functions enhance SQL\u2019s capabilities by allowing advanced transformations and calculations on data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#inner-join-inner-join","title":"Inner Join (<code>INNER JOIN</code>)","text":"<p>An inner join (INNER JOIN) is an operation that combines rows from two tables based on a common condition, typically a foreign key. It returns only rows for which there is a match in both tables.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#creating-the-orders-table","title":"Creating the Orders Table","text":"<p>To create an <code>orders</code> table that records orders placed by customers, we\u2019ll define a foreign key linking each order to a specific customer in the <code>customers</code> table. Here\u2019s how you can create this table, insert data, and represent it in Markdown format.</p> <pre><code>CREATE TABLE orders\n(\n    id          SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers (id),\n    order_date  DATE,\n    amount      DECIMAL(10, 2)\n);\n\nINSERT INTO orders (customer_id, order_date, amount)\nVALUES (1, '2023-01-20', 150.00),\n       (1, '2023-02-15', 200.50),\n       (2, '2023-03-05', 300.75),\n       (3, '2023-03-15', 120.00),\n       (4, '2023-04-10', 450.00),\n       (4, '2023-04-15', 300.00),\n       (4, '2023-04-20', 250.00),\n       (6, '2023-06-30', 60.00),\n       (8, '2023-08-20', 250.00),\n       (9, '2023-09-10', 320.00);\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanations","title":"Explanations","text":"<ul> <li><code>customer_id</code>: This column is a foreign key that references the identifier (<code>id</code>) of the <code>customers</code> table. This   establishes a relationship between orders and customers, indicating which customer placed each order.</li> <li><code>order_date</code>: Records the date on which the order was placed.</li> <li><code>amount</code>: Indicates the total amount of the order.</li> </ul> <p>This structure allows modeling a one-to-many relationship between customers and orders, where a customer can place multiple orders.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-add-each-customers-email-to-the-order-list","title":"Example 1: Add Each Customer\u2019s Email to the Order List","text":"<p>To get a list of all orders with the associated customer\u2019s email, we use an inner join between the <code>orders</code> table and the <code>customers</code> table. The join condition is that the customer ID in the <code>orders</code> table (<code>customer_id</code>) must match the customer ID in the <code>customers</code> table (<code>id</code>).</p> <pre><code>SELECT orders.id AS OrderID, orders.order_date, orders.amount, customers.email\nFROM orders\n         INNER JOIN customers ON orders.customer_id = customers.id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation","title":"Explanation","text":"<ul> <li><code>SELECT</code>: Specifies the columns to include in the result. Here, we select the order ID, order date, amount, and   customer email.</li> <li><code>FROM orders</code>: Indicates that the main table for the join is <code>orders</code>.</li> <li><code>INNER JOIN customers ON orders.customer_id = customers.id</code>: Performs the inner join by linking orders to   customers using the foreign key <code>customer_id</code> of <code>orders</code> and the primary key <code>id</code> of <code>customers</code>.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-list-all-orders-from-jean-dupont","title":"Example 2: List All Orders from Jean Dupont","text":"<p>To list all orders placed by Jean Dupont, we also use an inner join, but with an additional condition to filter the results.</p> <pre><code>SELECT orders.id AS OrderID, orders.order_date, orders.amount\nFROM orders\n         INNER JOIN customers ON orders.customer_id = customers.id\nWHERE customers.lastname = 'Dupont'\n  AND customers.firstname = 'Jean';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation_1","title":"Explanation","text":"<ul> <li><code>WHERE customers.lastname = 'Dupont' AND customers.firstname = 'Jean'</code>: Adds a condition to filter results to   include only orders placed by Jean Dupont.</li> <li>The join links the <code>orders</code> and <code>customers</code> tables in the same way as in the first example, but the <code>WHERE</code> restricts   results to a specific customer.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_4","title":"Summary","text":"<ul> <li>Inner Join: Combines rows from two tables for which there is a match in the specified columns.</li> <li>Usage: Often used to combine data spread across multiple tables, such as associating orders with customers.</li> <li>Syntax: <code>INNER JOIN</code> followed by the matching condition (<code>ON</code>).</li> </ul> <p>Inner joins are essential for fully exploiting relationships between tables in a relational database. They allow combining and analyzing data from different sources in a coherent and efficient manner.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#left-outer-join","title":"Left Outer Join","text":"<p>A left outer join (<code>LEFT JOIN</code>) is used to return all rows from the left table (in this case, <code>customers</code>), as well as matching rows from the right table (<code>orders</code>). If no match is found in the right table, the results will contain null values for the columns of the right table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#query-find-customers-who-have-no-orders","title":"Query: Find Customers Who Have No Orders","text":"<p>To identify customers who have not placed orders, we can use a left outer join and filter the results to include only rows for which there is no match in the <code>orders</code> table.</p> <pre><code>SELECT customers.id, customers.lastname, customers.firstname, customers.email\nFROM customers\n         LEFT JOIN orders ON customers.id = orders.customer_id\nWHERE orders.id IS NULL;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation_2","title":"Explanation","text":"<ul> <li><code>LEFT JOIN</code>: Returns all rows from the <code>customers</code> table and matching rows from <code>orders</code>. If a customer has no   orders, the columns of <code>orders</code> will contain null values.</li> <li><code>WHERE orders.id IS NULL</code>: Filters the results to include only customers who have no orders, i.e., those for whom   <code>orders.id</code> is <code>NULL</code>.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#results-of-the-query","title":"Results of the Query","text":"<p>Here\u2019s the Markdown table representing the results of this query:</p> id Last Name First Name Email 5 Moreau Pierre pierre.moreau@example.com 7 Laurent Julie julie.laurent@example.com 10 Petit Nicolas nicolas.petit@example.com <p>These results show customers who have no orders recorded in the database. The left outer join is particularly useful for identifying records in one table that don\u2019t match records in another table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#comparison-of-outer-joins","title":"Comparison of Outer Joins","text":""},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#1-left-join-left-join","title":"1. Left Join (<code>LEFT JOIN</code>)","text":"<ul> <li>Returns all rows from the left table (first mentioned table).</li> <li>Includes matching rows from the right table if they exist.</li> <li>If no match is found, the columns of the right table contain <code>NULL</code>.</li> </ul> <pre><code>SELECT *\nFROM customers\n         LEFT JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#2-right-join-right-join","title":"2. Right Join (<code>RIGHT JOIN</code>)","text":"<ul> <li>Returns all rows from the right table (second mentioned table).</li> <li>Includes matching rows from the left table if they exist.</li> <li>If no match is found, the columns of the left table contain NULL.</li> </ul> <pre><code>SELECT *\nFROM customers\n         RIGHT JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#3-full-outer-join-full-join","title":"3. Full Outer Join (<code>FULL JOIN</code>)","text":"<ul> <li>Combines the results of a left join and a right join.</li> <li>Returns all rows from both tables.</li> <li>If no match is found, the columns of the non-matching table contain NULL.</li> </ul> <pre><code>SELECT *\nFROM customers\n         FULL OUTER JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#key-differences","title":"Key Differences","text":"<ol> <li> <p>LEFT JOIN: Useful for finding all records from the left table, even if they don\u2019t have a match in the right    table.</p> </li> <li> <p>RIGHT JOIN: Similar to LEFT JOIN, but focusing on the right table. Less commonly used, as you can usually get the    same result by reversing the order of the tables and using a LEFT JOIN.</p> </li> <li> <p>FULL JOIN: Combines the results of the two previous joins. Useful for seeing all data from both tables, whether    there\u2019s a match or not.</p> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-usage","title":"Example Usage","text":"<ul> <li>LEFT JOIN: Find all customers, whether they\u2019ve placed orders or not.</li> <li>RIGHT JOIN: Find all orders, even if they\u2019re associated with customers who no longer exist in the customers table.</li> <li>FULL JOIN: See all customers and all orders, identifying cases where there\u2019s no match in either table.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#important-note","title":"Important Note","text":"<p>The word <code>OUTER</code> can be added to each of these joins (<code>LEFT OUTER JOIN</code>, <code>RIGHT OUTER JOIN</code>, and <code>FULL OUTER JOIN</code>), but it\u2019s optional. Using <code>OUTER</code> doesn\u2019t change the behavior of the join; it simply makes explicit the fact that it\u2019s an outer join.</p> <p>These outer joins are essential for analyzing data that may not have perfect matches between tables, thus allowing a more complete view of the available data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-with-group-by","title":"Grouping with <code>GROUP BY</code>","text":"<p>Groupings in SQL, done with the <code>GROUP BY</code> clause, allow aggregating data based on specific criteria. Here\u2019s a detailed explanation with examples using our <code>customers</code> and <code>orders</code> tables.</p> <p>The <code>GROUP BY</code> clause is used to group rows that have the same values in specified columns. It\u2019s often used with aggregate functions like <code>COUNT()</code>, <code>SUM()</code>, <code>AVG()</code>, etc.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-number-of-orders-per-customer","title":"Example 1: Number of Orders per Customer","text":"<pre><code>SELECT customer_id, COUNT(*) AS number_of_orders\nFROM orders\nGROUP BY customer_id;\n</code></pre> <p>Which might give a result like:</p> customer_id number_of_orders 1 2 2 1 3 1 4 3 6 1 8 1 9 1 <p>The concept of grouping in SQL, particularly with the <code>GROUP BY</code> clause, is essential for understanding how data is aggregated and summarized. Here\u2019s a detailed explanation of the group formation process:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-concept","title":"Grouping Concept","text":""},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#group-definition","title":"Group Definition","text":"<ul> <li>Grouping Key: Groups are defined by the distinct values of one or more columns specified in the <code>GROUP BY</code> clause.   In our example, the grouping key is <code>customer_id</code>. This means that each unique value of <code>customer_id</code> in the <code>orders</code>   table defines a distinct group.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#group-formation","title":"Group Formation","text":"<ol> <li> <p>Identification of Unique Values: The SQL engine identifies all unique values of the <code>customer_id</code> column in the    <code>orders</code> table. Each unique value becomes the basis for a group.</p> </li> <li> <p>Row Grouping: All rows (or records) in the table that share the same value of <code>customer_id</code> are grouped together.    This means that each group contains all orders associated with a particular customer.</p> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-process","title":"Grouping Process","text":"<ul> <li>Data Extraction: The SQL engine goes through the <code>orders</code> table and extracts each row.</li> <li>Group Association: For each row, the engine checks the value of <code>customer_id</code> and associates it with the   corresponding group. If a group for this value of <code>customer_id</code> doesn\u2019t exist yet, it\u2019s created.</li> <li>Data Aggregation: Once rows are grouped, aggregate functions (like <code>COUNT</code>, <code>SUM</code>, etc.) are applied to each group   to calculate statistics or summaries.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#visual-example","title":"Visual Example","text":"<p>Imagine a simplified table with the following <code>customer_id</code> values: 1, 1, 2, 3, 4, 4, 4.</p> <ul> <li>Groups Formed:<ul> <li>Group for <code>customer_id</code> 1: [1][1]</li> <li>Group for <code>customer_id</code> 2:</li> <li>Group for <code>customer_id</code> 3:</li> <li>Group for <code>customer_id</code> 4:</li> </ul> </li> </ul> <p>Each group contains all rows where <code>customer_id</code> has the same value. Aggregate functions are then applied to these groups to get results like the total number of orders per customer.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#usefulness-of-grouping","title":"Usefulness of Grouping","text":"<p>Grouping allows transforming raw data into meaningful information by summarizing and analyzing data according to specific criteria. This is particularly useful for generating reports, statistics, and analyses that require an overview of aggregated data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-total-order-amount-by-city","title":"Example 2: Total Order Amount by City","text":"<pre><code>SELECT customers.city, SUM(orders.amount) AS total_amount\nFROM customers\n         JOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.city;\n</code></pre> <p>Possible result:</p> city total_amount Paris 350.50 Lyon 300.75 Marseille 120.00 Toulouse 1000.00 Nantes 60.00 Strasbourg 250.00 Lille 320.00"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-having","title":"Using <code>HAVING</code>","text":"<p>The <code>HAVING</code> clause is used with <code>GROUP BY</code> to filter group results. Unlike <code>WHERE</code> which filters individual rows before grouping, <code>HAVING</code> filters groups after grouping.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-customers-with-more-than-one-order","title":"Example 3: Customers with More Than One Order","text":"<pre><code>SELECT customer_id, COUNT(*) AS number_of_orders\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Possible result:</p> customer_id number_of_orders 1 2 4 3"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-cities-with-a-total-order-amount-greater-than-500","title":"Example 4: Cities with a Total Order Amount Greater Than 500","text":"<pre><code>SELECT customers.city, SUM(orders.amount) AS total_amount\nFROM customers\n         JOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.city\nHAVING SUM(orders.amount) &gt; 500;\n</code></pre> <p>Possible result:</p> <pre><code>| city      | total_amount |\n|-----------|--------------|\n| Toulouse  | 1000.00      |\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_5","title":"Summary","text":"<ul> <li><code>GROUP BY</code>: Groups rows having the same values in the specified columns.</li> <li>Used with aggregate functions (<code>COUNT()</code>, <code>SUM()</code>, <code>AVG()</code>, etc.) to calculate statistics on each group.</li> <li><code>HAVING</code>: Filters group results after grouping.</li> <li><code>WHERE</code> filters individual rows before grouping, while <code>HAVING</code> filters groups after grouping.</li> </ul> <p>Groupings are essential for data analysis, allowing to summarize and aggregate information meaningfully from large datasets.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/","title":"6 - Nested SQL Queries","text":"<ul> <li>A subquery is a query inside another query (or inside another subquery).</li> <li>We can have multiple levels of subqueries.</li> <li>Sometimes we refer to subqueries as inner queries and to the enclosing queries as outer queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#university-database","title":"University Database","text":"<pre><code>set\nsearch_path to university;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#uncorrelated-subqueries","title":"Uncorrelated Subqueries","text":"<ul> <li>Also called simple subqueries.</li> <li>Correlated subqueries will be covered later.</li> <li>Uncorrelated subqueries are independent of their outer (enclosing) queries.</li> <li>They can execute on their own.</li> <li>They don\u2019t depend on something defined in the outer queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#examples-with-2-uncorrelated-subqueries","title":"Examples: with 2 uncorrelated subqueries","text":"<p>1- Find students and instructors with an email address <code>@example.com</code></p> <pre><code>select name, email\nfrom student\nwhere email like '%@example.com'\nunion\nselect name, email\nfrom instructor\nwhere email like '%@example.com';\n</code></pre> <p>2- Check if there are students and instructors with the same email address</p> <pre><code>select email\nfrom student\nintersect\nselect email\nfrom instructor;\n</code></pre> <p>3- Find courses that have never been offered</p> <pre><code>select cid\nfrom course\nexcept\nselect cid\nfrom offering;\n\nselect c.cid\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere o.oid is null;\n</code></pre> <p>4- Find students not enrolled in any course</p> <pre><code>select sid\nfrom student\nexcept\nselect sid\nfrom enrollment;\n</code></pre> <p>5- Find course offerings in which no student is enrolled</p> <pre><code>select oid\nfrom offering\nexcept\nselect oid\nfrom enrollment;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#scalar-subqueries","title":"Scalar Subqueries","text":"<ul> <li>Scalar subqueries are the simplest type of subqueries.</li> <li>They always return exactly 1 row containing exactly 1 column.</li> <li>They are often (but not always) obtained by calculating an aggregate function.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#examples","title":"Examples","text":"<p>1- Find the number of students with an email address <code>@example.com</code></p> <pre><code>select count(sid) as n_students\nfrom student\nwhere email like '%@example.com';\n</code></pre> <p>2- Find courses that have been offered more often than the <code>DB</code> course</p> <ol> <li>Find the number of times <code>DB</code> has been offered</li> </ol> <pre><code>select count(o.cid)\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere c.code = 'DB';\n</code></pre> <ol> <li>Insert the previous result into the <code>HAVING</code> clause of a query calculating the number of times each course has been offered. It might be better to start with a fixed number (e.g., 3) instead of immediately inserting the first query into the second</li> </ol> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid, c.code\nhaving count(o.oid) &gt; 3;\n</code></pre> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid, c.code\nhaving count(o.oid) &gt; (select count(o.cid)\n                       from course c\n                                left join offering o on c.cid = o.cid\n                       where c.code = 'DB');\n</code></pre> <p>3- Find the average number of times each course has been offered. Start by finding the number of times each course has been offered, then take the average</p> <pre><code>select c.cid, c.code, count(o.oid) as n_offerings\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid;\n</code></pre> <pre><code>-- won't work\nselect c.cid, c.code, avg(count(o.oid)) as n_offerings\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid;\n</code></pre> <pre><code>select round(avg(n_offerings), 2) as avg_n_offerings\nfrom (select count(o.oid) as n_offerings\n      from course c\n               left join offering o on c.cid = o.cid\n      group by c.cid) as T;\n\nwith T as (select count(o.oid) as n_offerings\n           from course c\n                    left join offering o on c.cid = o.cid\n           group by c.cid)\nselect round(avg(n_offerings), 2) as avg_n_offerings\nfrom T;\n</code></pre> <p>4- Find courses that have been offered more often than the average (number of times each course has been offered)</p> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid\nhaving count(o.oid) &gt; (select avg(n_offerings) as avg_n_offerings\n                       from (select count(o.oid) as n_offerings\n                             from course c\n                                      left join offering o on c.cid = o.cid\n                             group by c.cid) as T);\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#with-query-format","title":"<code>with</code> Query Format","text":"<ul> <li>In order to more easily express queries with multiple levels of subqueries, we can use the <code>with ... select ...</code> query   style.</li> <li>We define (sort of) temporary tables before the main <code>select</code> query begins.</li> <li>Then we use the temporary tables in the main <code>select</code> query as if they were tables stored in the database.</li> </ul> <pre><code>with T2 as (select avg(n_offerings) as avg_n_offerings\n            from (select c.cid, c.code, count(o.oid) as n_offerings\n                  from course c\n                           left join offering o on c.cid = o.cid\n                  group by c.cid) as T1)\nselect c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid\nhaving count(o.oid) &gt; (select * from T2);\n\nwith n_offerings_per_course as (select c.cid,\n                                       c.code,\n                                       count(o.oid) as n_offerings\n                                from course c\n                                         left join offering o on c.cid = o.cid\n                                group by c.cid)\nselect cid, code\nfrom n_offerings_per_course\nwhere n_offerings &gt; (select avg(n_offerings) as avg_n_offerings\n                     from n_offerings_per_course);\n</code></pre> <ul> <li>Don\u2019t over-use the <code>with</code> syntax</li> <li>For example, don\u2019t rewrite this query</li> </ul> <pre><code>select name, email\nfrom student\nwhere email like '%@example.com'\nunion\nselect name, email\nfrom instructor\nwhere email like '%@example.com';\n</code></pre> <p>as</p> <pre><code>with students_example as (select name, email from student where email like '%@example.com'),\n     instructor_example as (select name, email from instructor where email like '%@example.com')\nselect *\nfrom students_example\nunion\nselect *\nfrom instructor_example;\n</code></pre> <ul> <li>Although this query is technically correct and equivalent to the original query, using <code>with</code> to define 2 temporary   tables is excessive here and actually reduces readability.</li> <li>Use <code>with</code> only when the subqueries are complicated or when there are multiple levels of subqueries.</li> <li>We can also use <code>with recursive</code> to write recursive queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#null-values-in-sql","title":"<code>NULL</code> Values in SQL","text":"<ul> <li>SQL uses a 3-valued logic instead of Boolean logic (a 2-valued logic).</li> <li>The 3 values are <code>true</code>, <code>false</code>, and <code>null</code> (or <code>T</code>, <code>F</code>, and <code>N</code> in the table below).</li> <li>The first 2 values have the usual meaning, while <code>null</code> can have different meanings:<ul> <li>unknown</li> <li>not applicable</li> <li>doesn\u2019t matter</li> </ul> </li> <li>Logical operators need to be updated to account for <code>null</code> values.</li> </ul> A B NOT A A OR B A AND B T T F T T T F F T F T N F T N F T T T F F F T F F F N T N F N T N T N N F N N F N N N N N"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#non-scalar-subqueries","title":"Non-Scalar Subqueries","text":"<ul> <li>If a (sub)query returns more than one row and/or more than one column, then it is not a scalar subquery.</li> <li>Attempting to use normal comparison or arithmetic operators with non-scalar subqueries will fail if there is more than   one row.</li> <li>Some DBMSs, like PostgreSQL, allow some operators to work with subqueries giving exactly 1 row but multiple columns.</li> <li>PostgreSQL is an ORDBMS, so it\u2019s more flexible with data types.</li> <li>It will see the single row with multiple columns as a single object with multiple fields.</li> <li>In general, we need to use special operators to deal with non-scalar subqueries:<ul> <li><code>IN</code>, <code>NOT IN</code>, <code>EXISTS</code>, <code>NOT EXISTS</code>, <code>ANY</code>, <code>ALL</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#in","title":"<code>IN</code>","text":"<ul> <li><code>expression IN (sub-query)</code><ul> <li>it\u2019s the same as \\(\\in\\) in mathematical notation (except that we need to handle <code>null</code> values)</li> <li>the subquery must return exactly 1 column</li> <li><code>true</code> if the expression is equal to 1 of the rows in the subquery results</li> <li><code>false</code> if the expression is not <code>null</code> and there are no <code>null</code> values in the subquery and the expression is not   equal to any row in the subquery</li> <li><code>null</code> if the expression is <code>null</code> or if the expression is not equal to any row in the subquery and there is at   least 1 <code>null</code> value in the subquery</li> </ul> </li> <li> <p>Because SQL uses 3-valued logic, evaluating <code>IN</code> is more complicated</p> </li> <li> <p>Remember that if we want to know if a column value is <code>null</code>, we cannot use the equality operator <code>=</code> as it will   always return <code>null</code></p> <ul> <li><code>null</code> means unknown in this case, so we don\u2019t know how to compare values to an unknown value</li> <li>So we need to use <code>is null</code> instead of <code>= null</code></li> </ul> </li> <li> <p>The <code>IN</code> operator compares values with <code>=</code>, so as soon as it compares with a <code>null</code>, it will evaluate to <code>null</code></p> <ul> <li>So if the expression is equal to <code>null</code>, <code>IN</code> will evaluate to <code>null</code></li> <li>If the expression is not <code>null</code>, then it will compare the expression with non-null values first in the subquery<ul> <li>if it finds a match, then the value of <code>IN</code> will be true</li> <li>if we don\u2019t find a match, then it will check if the subquery contains <code>null</code> values<ul> <li>if not, then we know with certainty that the expression is not in the subquery, so the value of <code>IN</code> will   be <code>false</code></li> <li>if there are <code>null</code> values, then we don\u2019t know with certainty if the expression is in the subquery because   we have unknown values (<code>null</code>), so the value of <code>IN</code> is <code>null</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>This example works as expected</p> </li> </ul> <pre><code>-- note that (1, 2, 3) is not really a subquery, but acts like a subquery\n-- it is used to simplify the example\nselect *\nfrom course\nwhere cid in (1, 2, 3);\n</code></pre> <pre><code>-- note that (2, 3, 4, null) is not really a subquery, but acts like a subquery\n-- it is used to simplify the example\nselect *\nfrom course\nwhere cid in (2, 3, 4, null);\n</code></pre> <ul> <li>This example is equivalent and shows how <code>IN</code> operators are evaluated internally</li> </ul> <pre><code>select *\nfrom course\nwhere cid = 2\n   or cid = 3\n   or cid = 4\n   or cid = null;\n</code></pre> <ul> <li>This works for courses with a <code>cid</code> value of 2, 3, or 4 because at least 1 of the comparisons will be true and we\u2019ll   get something like <code>T OR F OR F OR N</code>, which is true</li> <li>But for courses with a <code>cid</code> not included in the provided set, we\u2019ll get <code>null</code> because <code>F OR F OR F OR N</code> is <code>N</code></li> <li>This doesn\u2019t create a problem because rows with a <code>where</code> condition will be dropped</li> <li>But if we negate <code>IN</code> to get a <code>NOT IN</code> operator, we\u2019ll be in trouble</li> </ul> <pre><code>select *\nfrom course\nwhere cid not in (2, 3, 4, null);\n\nselect *\nfrom course\nwhere cid not in (select cid from offering);\n\nselect *\nfrom course\nexcept\nselect c.*\nfrom course c\n         inner join offering o on c.cid = o.cid;\n\nselect c.*\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere o.oid is null;\n\nselect *\nfrom instructor\nwhere iid not in (select iid from offering);\n</code></pre> <ul> <li>We get nothing</li> <li>But the course with <code>cid = 1</code> is not in the subquery, so why don\u2019t we get it?</li> <li>It\u2019s because of the <code>null</code> value<ul> <li><code>1 in (2, 3, 4, null)</code> evaluates to <code>null</code></li> <li>and <code>1 not in (2, 3, 4, null)</code> evaluates to <code>not null</code>, which is <code>null</code></li> </ul> </li> <li>So <code>NOT IN</code> queries are dangerous because of <code>null</code> values</li> <li>The following query is correct because we know with certainty that <code>cid</code> in course cannot be <code>null</code><ul> <li>So we can find courses that have never been offered this way</li> </ul> </li> </ul> <pre><code>--insert into course(name, code, credits)\n--values ('Data Structures', 'DS', 3);\n-- delete from course where code = 'DS';\nselect *\nfrom course\nwhere cid not in (select cid from offering);\n</code></pre> <ul> <li>But trying to do something similar for instructors will create problems because <code>iid</code> in offering can be <code>null</code></li> <li>We need to explicitly exclude <code>null</code> values in the subquery for the query to return the correct results</li> </ul> <pre><code>--insert into instructor(name, email, department)\n--values ('John', 'john@bbb.com', 'ECE');\n-- delete from instructor where name = 'John';\nselect *\nfrom instructor\nwhere iid not in (select iid from offering);\n</code></pre> <pre><code>select *\nfrom instructor\nwhere iid not in (select iid\n                  from offering\n                  where iid is not null);\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#recommendation-dont-use-not-in","title":"Recommendation: don\u2019t use <code>NOT IN</code>","text":""},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#recommendation-use-a-left-join-instead","title":"Recommendation: use a <code>left join</code> instead","text":"<ul> <li>Not only does the left join (or outer joins in general) force you to think about <code>null</code> values (and handle them   correctly), but in terms of performance, left joins will generally be more efficient.</li> <li>Using left joins avoids dealing with SQL\u2019s 3-valued logic.</li> </ul> <pre><code>select i.*\nfrom instructor i\n         left join offering o on i.iid = o.iid\nwhere o.iid is null;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#any-and-all","title":"<code>ANY</code> and <code>ALL</code>","text":"<ul> <li><code>ANY</code> and <code>ALL</code> are used as operator modifiers (usually comparison operators)<ul> <li><code>expression operator ANY (sub-query)</code><ul> <li><code>true</code> when there exists a row \\(r\\) in the subquery such that <code>expression operator r</code> is true</li> <li><code>false</code> when for all rows r in the subquery, <code>expression operator r</code> is false and there are no <code>null</code> values   in the subquery</li> <li><code>null</code> when for all rows r in the subquery, <code>expression operator r</code> is false and there is at least 1 <code>null</code>   value in the subquery</li> </ul> </li> <li><code>IN</code> is equivalent to <code>=ANY</code></li> <li><code>expression operator ALL (sub-query)</code><ul> <li><code>true</code> when for all rows \\(r\\) in the subquery, <code>expression operator r</code> is true</li> <li><code>false</code> when <code>expression operator r</code> is false for at least 1 row in the subquery</li> <li><code>null</code> when for all rows \\(r\\) in the subquery, <code>expression operator r</code> is not false and there is at least 1   <code>null</code> value in the subquery</li> </ul> </li> <li><code>NOT IN</code> is equivalent to <code>&lt;&gt; ALL</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/07-r%C3%A9cursives/","title":"7 - Recursive Queries","text":""},{"location":"3.%20SQL/07-r%C3%A9cursives/#postgresql-syntax","title":"PostgreSQL Syntax","text":"<ul> <li>Basic   syntax (https://www.postgresqltutorial.com/postgresql-recursive-query/):</li> </ul> <pre><code>WITH RECURSIVE cte_name AS (CTE_query_definition -- non-recursive term\n                            UNION [ ALL ] \n                            CTE_query_definition -- recursive term )\nSELECT *\nFROM cte_name;\n</code></pre> <ul> <li>CTE: common table expression</li> <li>Since recursive queries are (of course) recursive, we need a base case, called here a non-recursive term</li> <li>Then, we need one or more recursive terms</li> <li><code>with recursive</code> works, at the beginning, a bit like <code>with</code> queries (without <code>recursive</code>)</li> <li>It will first evaluate the non-recursive term to initialize the result set</li> <li>Then, it will start evaluating the recursive term multiple times, in a loop, until no new rows are added to the   results</li> <li>each time it evaluates the recursive term, it will try to add new rows to the result set</li> <li>the recursive term is correlated to the <code>cte_name</code></li> </ul>"},{"location":"3.%20SQL/07-r%C3%A9cursives/#example-on-the-blog-database","title":"Example on the Blog Database","text":"<p>![Blogpostt to find all replies to a given comment recursively</p> <ul> <li>we don\u2019t just want direct replies, but also all replies to replies</li> <li>First attempt to retrieve only direct replies:</li> </ul> <pre><code>set\nsearch_path to blog3;\nselect comment_id, contents, reply_to_id, user_id\nfrom comment\nwhere blogpost_id = 1\n  and reply_to_id is null;\n</code></pre> <ul> <li>To get replies to replies, we need to use the <code>with recursive</code> syntax described above:</li> </ul> <pre><code>with recursive replies as (select comment_id, contents, reply_to_id, user_id\n                           from comment\n                           where reply_to_id = 1\n                           union\n                           select comment.comment_id,\n                                  comment.contents,\n                                  comment.reply_to_id,\n                                  comment.user_id\n                           from comment\n                                    inner join replies\n                                               on replies.comment_id = comment.reply_to_id)\nselect *\nfrom replies;\n</code></pre> <ul> <li>If we need to include the original comment we\u2019re starting with in the result, we need a slightly different   non-recursive term</li> <li>use <code>comment_id = 1</code> instead of <code>reply_to_id = 1</code></li> <li>If we need to include comments starting from a blog post, we need a slightly different non-recursive term\u2026</li> <li>use <code>blogpost_id = 1</code> instead of <code>reply_to_id = 1</code></li> </ul> <pre><code>with recursive replies as (select comment_id, contents, reply_to_id, user_id\n                           from comment\n                           where blogpost_id = 1\n                           union\n                           select comment.comment_id,\n                                  comment.contents,\n                                  comment.reply_to_id,\n                                  comment.user_id\n                           from comment\n                                    inner join replies\n                                               on replies.comment_id = comment.reply_to_id)\nselect *\nfrom replies;\n</code></pre>"},{"location":"3.%20SQL/08-dates/","title":"8 - Using <code>date</code> and <code>timestamp</code>","text":"<p>Here is a guide on operations and functions for dates and timestamps in PostgreSQL.</p>"},{"location":"3.%20SQL/08-dates/#differences-between-date-and-timestamp","title":"Differences between <code>date</code> and <code>timestamp</code>","text":"<p>Here are the main differences between the <code>date</code> and <code>timestamp</code> types in PostgreSQL:</p> <ol> <li> <p>Stored content:</p> <ul> <li><code>date</code> stores only a date (year, month, day)</li> <li><code>timestamp</code> stores a date and time (year, month, day, hour, minute, second, and optionally fractions of a second)</li> </ul> </li> <li> <p>Storage size:</p> <ul> <li><code>date</code> occupies 4 bytes</li> <li><code>timestamp</code> occupies 8 bytes</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>date</code> has a precision of one day</li> <li><code>timestamp</code> has a precision of one microsecond</li> </ul> </li> <li> <p>Range of values:</p> <ul> <li><code>date</code>: from 4713 BC to 5874897 AD</li> <li><code>timestamp</code>: from 4713 BC to 294276 AD</li> </ul> </li> <li> <p>Temporal operations:</p> <ul> <li><code>date</code> allows basic operations on dates</li> <li><code>timestamp</code> allows more precise operations including hours, minutes, and seconds</li> </ul> </li> <li> <p>Time zone:</p> <ul> <li><code>date</code> does not include time zone information</li> <li><code>timestamp</code> may or may not include time zone information (depending on whether you use <code>timestamp with time zone</code>   or <code>timestamp without time zone</code>)</li> </ul> </li> <li> <p>Usage:</p> <ul> <li><code>date</code> is used when only the date is important (e.g., birth date)</li> <li><code>timestamp</code> is used when you need the precise date and time (e.g., transaction timestamp)</li> </ul> </li> </ol> <p>In general, <code>timestamp</code> offers more flexibility and precision, but <code>date</code> can be sufficient and more efficient in terms of storage if only the date is necessary.</p>"},{"location":"3.%20SQL/08-dates/#conversion","title":"Conversion","text":"<p>To convert a <code>timestamp</code> to a <code>date</code>, or vice-versa, you can cast from one to the other:</p> <pre><code>select (now()::date);\n-- now() gives the current timestamp\n</code></pre> now 2024-09-27 <pre><code>select (CURRENT_DATE::timestamp);\n-- CURRENT_DATE gives today's date\n</code></pre> current_date 2024-09-27 00:00:00.000000"},{"location":"3.%20SQL/08-dates/#simple-comparisons-with-dates-in-iso-format","title":"Simple comparisons with dates in ISO format","text":"<p>PostgreSQL natively supports the ISO 8601 date format (YYYY-MM-DD) for comparisons:</p> <ul> <li>Table <code>users</code></li> </ul> id name created 1 denis 2024-09-25 20:42:08.200074 3 bob 2023-08-09 12:12:00.000000 2 alice 2024-07-25 02:42:08.200074 <pre><code>select *\nfrom users\nwhere created &gt; '2024-09-15';\n</code></pre> id name created 1 denis 2024-09-25 20:42:08.200074 <pre><code>-- Select records between two dates\nselect *\nfrom users\nwhere created between '2023-01-01' and '2023-12-12';\n</code></pre> id name created 3 bob 2023-08-09 12:12:00.000000 <pre><code>-- Select records between two dates\nselect *\nfrom users\nwhere created between '2023-01-01' and '2023-08-09';\n</code></pre> id name created"},{"location":"3.%20SQL/08-dates/#common-date-functions","title":"Common date functions","text":""},{"location":"3.%20SQL/08-dates/#extract","title":"EXTRACT","text":"<p>Allows extracting a specific part of a date or timestamp.</p> <pre><code>select name, extract(year from created) as year\nfrom users;\n</code></pre> name year denis 2024 alice 2024 bob 2023 <pre><code>select name, extract(month from created) as month\nfrom users;\n</code></pre> name month denis 9 alice 7 bob 8"},{"location":"3.%20SQL/08-dates/#date_part","title":"DATE_PART","text":"<p>Similar to EXTRACT, allows obtaining a specific part of a date.</p> <pre><code>select name, date_part('year', created) as year\nfrom users;\n</code></pre> name year denis 2024 alice 2024 bob 2023"},{"location":"3.%20SQL/08-dates/#differences-between-extract-and-date_part","title":"Differences between <code>EXTRACT</code> and <code>DATE_PART</code>","text":"<p>Here are the main differences between the <code>EXTRACT()</code> and <code>DATE_PART()</code> functions in PostgreSQL:</p> <ol> <li> <p>Syntax:</p> <ul> <li><code>EXTRACT()</code> uses the syntax: <code>EXTRACT(field FROM source)</code></li> <li><code>DATE_PART()</code> uses the syntax: <code>DATE_PART('field', source)</code></li> </ul> </li> <li> <p>SQL Standard:</p> <ul> <li><code>EXTRACT()</code> conforms to the SQL standard</li> <li><code>DATE_PART()</code> is specific to PostgreSQL</li> </ul> </li> <li> <p>Return type:</p> <ul> <li><code>EXTRACT()</code> returns a numeric type since PostgreSQL 14</li> <li><code>DATE_PART()</code> always returns a double precision (float8)</li> </ul> </li> <li> <p>Performance:</p> <ul> <li>Before PostgreSQL 14, <code>EXTRACT()</code> was rewritten as <code>DATE_PART()</code> internally</li> <li>Since PostgreSQL 14, the implementations are different</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>EXTRACT()</code> can be more precise for certain calculations since PostgreSQL 14</li> <li><code>DATE_PART()</code> may lose precision in some cases due to the float type</li> </ul> </li> <li> <p>Usage:</p> <ul> <li><code>EXTRACT()</code> is generally preferred for SQL compatibility</li> <li><code>DATE_PART()</code> is still used out of habit or for compatibility with older versions</li> </ul> </li> </ol> <p>In practice, the two functions are very similar and interchangeable in most cases. The choice often depends on personal preferences or coding conventions. For better portability and precision, <code>EXTRACT()</code> is generally recommended.</p>"},{"location":"3.%20SQL/08-dates/#date_trunc","title":"DATE_TRUNC","text":"<p>Truncates a date to a specified precision.</p> <pre><code>select name, date_trunc('month', created)\nfrom users;\n</code></pre> name date_trunc denis 2024-09-01 00:00:00.000000 bob 2023-08-01 00:00:00.000000 alice 2024-07-01 00:00:00.000000"},{"location":"3.%20SQL/08-dates/#now-and-current_date","title":"<code>now</code> and <code>current_date</code>","text":"<ul> <li><code>now()</code>: Returns the current date and time with time zone.</li> <li><code>current_date</code>: Returns the current date.</li> </ul> <pre><code>select now();\n</code></pre> now 2024-09-25 21:12:05.032204 +00:00 <pre><code>select current_date;\n</code></pre> current_date 2024-09-25"},{"location":"3.%20SQL/08-dates/#differences-between-now-and-current_date","title":"Differences between <code>now()</code> and <code>current_date</code>","text":"<ol> <li> <p>Return type:</p> <ul> <li><code>now()</code> returns a timestamp with time zone (date and time with time zone)</li> <li><code>current_date</code> returns only a date (without time or time zone)</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>now()</code> includes hour, minutes, seconds, and microseconds</li> <li><code>current_date</code> returns only the date (year, month, day)</li> </ul> </li> <li> <p>Usage in transactions:</p> <ul> <li><code>now()</code> returns the same value throughout a transaction</li> <li><code>current_date</code> can change if the transaction spans midnight</li> </ul> </li> <li> <p>Performance:</p> <ul> <li><code>current_date</code> is generally faster because it only processes the date</li> </ul> </li> <li> <p>Behavior with time zones:</p> <ul> <li><code>now()</code> takes into account the session\u2019s time zone</li> <li><code>current_date</code> always returns the server\u2019s local date</li> </ul> </li> <li> <p>Flexibility:</p> <ul> <li><code>now()</code> can be easily converted to other temporal types</li> <li><code>current_date</code> is limited to operations on dates</li> </ul> </li> <li> <p>Consistency:</p> <ul> <li><code>now()</code> remains constant in a transaction, useful for data consistency</li> <li><code>current_date</code> can change, always reflecting the current date</li> </ul> </li> </ol> <p>In summary, <code>now()</code> offers more precision and flexibility, while <code>current_date</code> is simpler and faster when only the date is needed.</p>"},{"location":"3.%20SQL/08-dates/#operations-with-interval","title":"Operations with <code>interval</code>","text":"<p>Using <code>interval</code> allows performing calculations on dates:</p> <pre><code>-- Add 1 month to the current date\nselect current_date + interval '1 month';\n</code></pre> ?column? 2024-10-25 00:00:00.000000 <pre><code>-- Subtract 2 weeks from a specific date\nselect date '2023-01-15' - interval '2 weeks';\n</code></pre> <pre><code>-- users created in the last month\nselect name, users.created\nfrom users\nwhere created &gt; current_date - interval '1 month';\n</code></pre> name created denis 2024-09-25 20:42:08.200074"},{"location":"3.%20SQL/08-dates/#advanced-examples","title":"Advanced examples","text":""},{"location":"3.%20SQL/08-dates/#calculate-age","title":"Calculate age","text":"<pre><code>select name, age(created)\nfrom users;\n-- Returns the interval between the specified date and the current date\n</code></pre> name age denis 0 years 0 mons 0 days -20 hours -42 mins -8.200074 secs bob 1 years 1 mons 15 days 11 hours 48 mins 0.0 secs alice 0 years 1 mons 30 days 21 hours 17 mins 51.799926 secs"},{"location":"3.%20SQL/08-dates/#convert-a-string-to-a-date","title":"Convert a string to a date","text":"<pre><code>select to_date('2023-09-21', 'yyyy-mm-dd');\n-- Converts the string to a date\n</code></pre>"},{"location":"3.%20SQL/08-dates/#format-a-date","title":"Format a date","text":"<pre><code>select to_char(current_date, 'DD/MM/YYYY');\n-- Formats the current date in DD/MM/YYYY format\n</code></pre> to_char 25/09/2024 <p>These examples cover the most common operations on dates and timestamps in PostgreSQL. Remember that PostgreSQL offers many other functions and capabilities for manipulating dates and times according to your specific needs.</p>"},{"location":"3.%20SQL/08-dates/#date-operations","title":"Date operations","text":"<ol> <li> <p>Date subtraction:</p> <ul> <li>You can subtract two dates to get an interval.</li> <li>Example: <code>date '2023-09-21' - date '2023-01-01'</code> will return an interval representing the difference between these   two dates.</li> </ul> </li> <li> <p>Addition/Subtraction with an interval:</p> <ul> <li>You can add or subtract an interval to a date.</li> <li>Example: <code>date '2023-09-21' + interval '1 month'</code> will add one month to the specified date.</li> </ul> </li> </ol>"},{"location":"3.%20SQL/08-dates/#timestamp-operations","title":"Timestamp operations","text":"<ol> <li> <p>Timestamp subtraction:</p> <ul> <li>Subtracting two timestamps returns an interval.</li> <li>Example: <code>timestamp '2023-09-21 10:00:00' - timestamp '2023-09-20 09:00:00'</code> will give the interval between these   two moments.</li> </ul> </li> <li> <p>Addition/Subtraction with an interval:</p> <ul> <li>As with dates, you can add or subtract intervals to timestamps.</li> <li>Example: <code>timestamp '2023-09-21 10:00:00' - interval '2 hours'</code> will subtract 2 hours from the timestamp.</li> </ul> </li> </ol>"},{"location":"3.%20SQL/08-dates/#important-points-to-note","title":"Important points to note","text":"<ol> <li> <p>Precision: Operations on timestamps are more precise because they take into account hours, minutes, and seconds.</p> </li> <li> <p>Time zones: For <code>timestamp with time zone</code>, PostgreSQL automatically handles time zone adjustments during operations.</p> </li> <li> <p>Complex intervals: You can use complex intervals like <code>interval '1 year 2 months 3 days'</code> for more elaborate    calculations.</p> </li> <li> <p>AGE() function: To calculate the difference between two dates or timestamps in a more readable way, you can use the    <code>age()</code> function.</p> </li> </ol> <p>These operations are very useful for performing temporal calculations in your queries, such as finding the duration between two events or calculating future or past dates based on a reference date.</p>"},{"location":"3.%20SQL/08-dates/#converting-an-interval-to-a-number-of-hours-float","title":"Converting an interval to a number of hours (float)","text":"<p>The most common method for converting an interval to a number is to transform it into seconds, then divide it to get the desired unit. To get a number of hours as a float, you can use the EXTRACT function with the \u2018epoch\u2019 unit:</p> <pre><code>select extract(epoch from interval '4 hours 30 minutes') / 3600.0 as hours;\n</code></pre> <p>This query will return 4.5, representing 4 hours and 30 minutes in decimal format.</p>"},{"location":"3.%20SQL/08-dates/#conversion-to-numeric","title":"Conversion to numeric","text":"<p>For a conversion to numeric type, which offers arbitrary precision, you can use a similar approach:</p> <pre><code>select cast(extract(epoch from interval '4 hours 30 minutes') / 3600.0 as numeric(10, 2)) as hours;\n</code></pre> <p>This query will convert the interval to a numeric number with 2 decimal places.</p>"},{"location":"3.%20SQL/08-dates/#important-points-to-note_1","title":"Important points to note","text":"<ol> <li> <p>Precision: Converting an interval to a number can lead to a loss of precision, especially for intervals including    years or months, as these units don\u2019t have a fixed duration in seconds.</p> </li> <li> <p>Variable units: Years and months are treated specially in PostgreSQL intervals. For example, \u20181 year\u2019 is not always    equal to 365 days, which can lead to unexpected results during conversion.</p> </li> <li> <p>Choice of unit: You can adjust the divisor (3600.0 in the examples above) to get other units. For example, use    86400.0 to get days, or 60.0 for minutes.</p> </li> <li> <p><code>to_char()</code> function: For more complex formatting needs, you can use the to_char() function which allows formatting    various data types, including intervals.</p> </li> </ol> <p>In conclusion, although PostgreSQL does not provide a direct conversion of an interval to float or numeric, it is possible to perform this conversion using the EXTRACT function with the \u2018epoch\u2019 unit, followed by a division and possibly a CAST if necessary.</p>"}]}