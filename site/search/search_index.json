{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Database Course","text":"<p>Author: Denis Rinfret</p>"},{"location":"#resources","title":"Resources","text":""},{"location":"#software","title":"Software","text":"<ol> <li>PostgreSQL<ol> <li>Download</li> <li>Documentation</li> </ol> </li> <li>Jetbrains<ol> <li>DataGrip</li> <li>IntelliJ</li> </ol> </li> <li>PlantUML<ol> <li>Class Diagram</li> <li>Online Server</li> </ol> </li> </ol>"},{"location":"#relational-databases","title":"Relational Databases","text":"<p>To better understand the basic principles of relational databases and SQL, here are some resources in English and French that will be very useful:</p> <ol> <li>Wikipedia: The article on relational databases offers a    comprehensive overview, covering history, key concepts such as tables, tuples (rows), attributes (columns), and    relational database management systems (RDBMS).</li> <li>IBM: This article explains the fundamental concepts of    relational databases, including tables, primary and foreign keys, and the advantages of relational databases compared    to other types of databases.</li> <li>Oracle: This guide provides a detailed    explanation of the relational model, logical and physical operations, as well as integrity rules to ensure data    accuracy and accessibility.</li> <li>University of Pennsylvania: A lesson that    introduces the basic concepts of relational database management systems, such as tables, primary keys, and indexed    columns.</li> <li>Lido App: This article explains the essential components of relational    databases, including tables, keys, and relationships, with concrete examples.</li> </ol>"},{"location":"#sql-structured-query-language","title":"SQL (Structured Query Language)","text":"<p>To learn SQL and practice with interactive exercises, here are some excellent online resources:</p> <ol> <li> <p>LearnSQLOnline.org: This site offers free interactive SQL tutorials, covering    basic topics like data selection, table creation, and advanced topics like window functions and subqueries. Exercises    are integrated for immediate practice.</p> </li> <li> <p>W3Schools SQL Exercises: W3Schools offers a series of SQL    exercises with answers for each chapter of their SQL tutorial. You can test your skills and see solutions if you get    stuck.</p> </li> <li> <p>SQL Exercises - w3resource: This site offers a vast collection of    SQL exercises covering different levels of difficulty and topics, such as aggregate functions, joins, and subqueries.    It\u2019s ideal for practicing and improving your SQL skills.</p> </li> <li> <p>GeeksforGeeks SQL Practice: GeeksforGeeks offers SQL exercises    for beginners, intermediates, and advanced users. The exercises cover various topics, from basic queries to window    functions and stored procedures.</p> </li> <li> <p>Khan Academy - Intro to SQL: Khan Academy    offers an interactive SQL course with practical challenges after each lesson. Topics include table creation, queries,    joins, and more.</p> </li> <li> <p>SQLZoo: SQLZoo is a popular site for learning and practicing SQL. It offers interactive    tutorials, exercises, and quizzes covering various aspects of SQL, from basics to advanced concepts.</p> </li> <li> <p>Mode Analytics SQL Tutorial: Mode Analytics offers an interactive SQL tutorial    that allows you to practice with integrated exercises. The tutorial covers basic and advanced SQL concepts.</p> </li> <li> <p>Codecademy: Codecademy offers an interactive SQL course where you    can learn and practice at the same time. While some advanced features require a subscription, the basics are    available for free.</p> </li> <li> <p>DataCamp: DataCamp offers an introduction to    SQL for data science. Although DataCamp is a paid service, it offers free sections to get started.</p> </li> </ol>"},{"location":"#books-on-oreillybanq","title":"Books on O\u2019Reilly/BANQ","text":"<ol> <li>Learning SQL</li> <li>Practical SQL</li> <li>SQL Pocket Guide</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/","title":"What is a Database?","text":"<p>A database is an organized collection of data, typically stored and electronically accessible from a computer system. Databases allow for efficient storage, management, and retrieval of information. They are essential for many applications, ranging from business management systems to web and mobile applications.</p>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#main-components-of-a-database","title":"Main Components of a Database","text":"<ol> <li>Data: The information stored in the database. It can be of different types (text, numbers, dates, etc.) and is    organized in various ways depending on the data model used.</li> <li>Database Management System (DBMS): The software that allows for creating, managing, and manipulating databases.    PostgreSQL is an example of a DBMS.</li> <li>Schema: The structure that defines the organization of data in the database, including tables, columns, data    types, constraints, etc.</li> <li>Queries: The instructions used to interact with the database, most often written in SQL (Structured Query    Language).</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#types-of-databases","title":"Types of Databases","text":"<ol> <li>Relational Databases: Use tables to organize data. Relationships between tables are defined by primary and    foreign keys. Examples: PostgreSQL, MySQL, Oracle, MS SQL Server.</li> <li>NoSQL Databases: Designed for specific needs that are not well supported by relational databases. They include    document, column, graph, and key-value pair databases. Examples: MongoDB, Cassandra, Redis.</li> <li>In-Memory Databases: Store data directly in RAM for very fast performance. Example: Redis.</li> <li>Object-Oriented Databases: Integrate object-oriented programming concepts to store data as objects. Example:    db4o.</li> </ol>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#advantages-of-databases","title":"Advantages of Databases","text":"<ul> <li>Organization: Data is structured in a logical and coherent manner.</li> <li>Quick Access: DBMSs allow for fast and efficient data searches and retrievals.</li> <li>Security: Databases offer mechanisms to protect data against unauthorized access.</li> <li>Data Integrity: Constraints and integrity rules ensure that data remains accurate and consistent.</li> <li>Scalability: Databases can be scaled to handle growing volumes of data.</li> </ul>"},{"location":"1.%20Introduction/01-Introduction-aux-bd/#conclusion","title":"Conclusion","text":"<p>Databases are powerful tools for organizing, managing, and accessing data. Understanding the basic concepts of databases and knowing how to use a DBMS like PostgreSQL is essential for any developer or IT professional. In upcoming courses, we will explore in more detail the various aspects of relational databases and the use of SQL to interact with them.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/","title":"Database Types","text":"<p>There are several types of databases, each designed to meet specific needs. Here\u2019s an overview of the main types of databases used today:</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#1-relational-databases","title":"1. Relational Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description","title":"Description","text":"<p>Relational databases organize data in tables that can be linked together through primary and foreign keys. They use SQL (Structured Query Language) for data management and manipulation.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples","title":"Examples","text":"<ul> <li>PostgreSQL: A powerful and extensible open-source relational (and object-relational) DBMS.</li> <li>MySQL: A popular open-source relational DBMS, often used for web applications.</li> <li>Oracle Database: A commercial relational (and object-relational) DBMS with many advanced features.</li> <li>Microsoft SQL Server: A relational DBMS developed by Microsoft, often used in Windows environments.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages","title":"Advantages","text":"<ul> <li>Clear structure: Data is organized in a logical and coherent manner.</li> <li>Data integrity: Constraints and integrity rules ensure data accuracy and consistency.</li> <li>Complex queries: SQL allows for complex queries to extract specific information.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#2-object-relational-databases","title":"2. Object-Relational Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_1","title":"Description","text":"<p>Object-relational databases combine aspects of relational databases and object-oriented databases. They allow storing data in tables while supporting object-oriented programming concepts such as custom data types, table inheritance, and methods.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_1","title":"Examples","text":"<ul> <li>PostgreSQL: An open-source object-relational DBMS that supports advanced features like custom data types and table inheritance[5].</li> <li>Oracle Database: Offers object-relational features in addition to its relational capabilities[5].</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_1","title":"Advantages","text":"<ul> <li>Flexibility: Combines the advantages of relational and object-oriented databases.</li> <li>Extensibility: Allows creating custom data types and methods[5].</li> <li>Compatibility: Maintains compatibility with SQL while offering advanced features.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#3-nosql-databases","title":"3. NoSQL Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_2","title":"Description","text":"<p>NoSQL databases are designed for specific needs that are not well supported by relational databases. They are often used for applications requiring high scalability and performance.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#types-of-nosql-databases","title":"Types of NoSQL Databases","text":"<ul> <li>Document databases: Store data as JSON or BSON documents. Example: MongoDB[5].</li> <li>Column databases: Store data in columns rather than rows. Example: Apache Cassandra.</li> <li>Graph databases: Use graph structures to represent and store data. Example: Neo4j.</li> <li>Key-value databases: Store data as key-value pairs. Example: Redis[5].</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_2","title":"Advantages","text":"<ul> <li>Scalability: Designed to handle large amounts of data and high workloads.</li> <li>Flexibility: Allow storing unstructured or semi-structured data.</li> <li>Performance: Optimized for fast read and write operations.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#4-in-memory-databases","title":"4. In-Memory Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_3","title":"Description","text":"<p>In-memory databases store data directly in random access memory (RAM), allowing for very fast access times. They are often used for applications requiring high real-time performance.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_2","title":"Examples","text":"<ul> <li>Redis: An open-source in-memory database often used for caching and session management[5].</li> <li>Memcached: A distributed in-memory caching system, used to speed up web applications by reducing database load.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_3","title":"Advantages","text":"<ul> <li>Performance: Extremely fast data access.</li> <li>Real-time: Ideal for applications requiring real-time responses.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#5-object-oriented-databases","title":"5. Object-Oriented Databases","text":""},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#description_4","title":"Description","text":"<p>Object-oriented databases store data as objects, similar to object-oriented programming. They allow storing complex objects with their methods and attributes.</p>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#examples_3","title":"Examples","text":"<ul> <li>db4o: An open-source object-oriented database.</li> <li>ObjectDB: An object-oriented database for Java.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#advantages_4","title":"Advantages","text":"<ul> <li>Correspondence with object-oriented programming: Facilitates the transition between in-memory objects and stored objects.</li> <li>Data complexity: Allows storing complex data structures.</li> </ul>"},{"location":"1.%20Introduction/02-Types-de-bases-de-donnees/#conclusion","title":"Conclusion","text":"<p>Each type of database has its own advantages and disadvantages, and the choice of database type depends on the specific needs of the application. In this course, we will primarily focus on relational databases and the use of PostgreSQL, but it\u2019s important to know about other types of databases and their use cases.</p> References <p>[1] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [2] https://www.prisma.io/dataguide/intro/comparing-database-types [3] https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems [4] https://db-engines.com/en/ranking [5] https://www.integrate.io/blog/which-database/ [6] https://bytescout.com/blog/mysql-vs-postgresql-vs-oracle.html [7] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [8] https://severalnines.com/blog/basic-administration-comparison-between-oracle-mssql-mysql-postgresql/ [9] https://www.datasciencecentral.com/decoding-different-types-of-databases-a-comparison/ [10] https://www.reddit.com/r/SQL/comments/spxzfh/ms_sql_server_mysql_oracle_dba_postgresql_which/ [11] https://docs.syteca.com/view/comparison-of-database-types [12] https://db-engines.com/en/system/Microsoft+SQL+Server;Oracle;PostgreSQL [13] https://db-engines.com/en/system/MySQL;Oracle;PostgreSQL</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/","title":"History of Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1960s-the-beginning","title":"1960s: The Beginning","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#file-systems","title":"File Systems","text":"<ul> <li>Sequential Storage: The first data management systems used sequential files to store information. Data was   recorded in a specific order, making search and update operations slow and inefficient.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#hierarchical-databases","title":"Hierarchical Databases","text":"<ul> <li>IMS (Information Management System): Developed by IBM in 1966, IMS is one of the first hierarchical database   management systems (DBMS). Data is organized in a tree structure, with parent and child records[5].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#example-of-hierarchical-structure","title":"Example of Hierarchical Structure","text":"<pre><code>Company\n\u2502\n\u251c\u2500\u2500 Department A\n\u2502   \u251c\u2500\u2500 Employee 1\n\u2502   \u2514\u2500\u2500 Employee 2\n\u2502\n\u2514\u2500\u2500 Department B\n    \u251c\u2500\u2500 Employee 3\n    \u2514\u2500\u2500 Employee 4\n</code></pre>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1970s-the-era-of-relational-databases","title":"1970s: The Era of Relational Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#relational-model","title":"Relational Model","text":"<ul> <li>Edgar F. Codd: In 1970, Edgar F. Codd, a researcher at IBM, proposed the relational model in his paper \u201cA   Relational Model of Data for Large Shared Data Banks\u201d. This model organizes data in tables (relations) and uses keys   to establish relationships between tables[5][10][12].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#relational-dbmss","title":"Relational DBMSs","text":"<ul> <li>System R: IBM developed System R in the 1970s to demonstrate the feasibility of the relational model. This project   led to the creation of SQL (Structured Query Language)[5].</li> <li>Ingres: Another major research project, Ingres, was developed at the University of California, Berkeley, and also   contributed to the popularization of relational databases. This system would later evolve into Postgres and eventually   PostgreSQL[5].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1980s-commercialization-and-standardization","title":"1980s: Commercialization and Standardization","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#commercial-dbmss","title":"Commercial DBMSs","text":"<ul> <li>Oracle: Founded in 1977, Oracle Corporation launched its first commercial relational DBMS in 1979. Oracle quickly   became a leader in the database field[5].</li> <li>IBM DB2: In 1983, IBM launched DB2, a relational DBMS based on System R research[5].</li> <li>Microsoft SQL Server: Launched in 1989, SQL Server became a major player in the relational database field.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#sql-standardization","title":"SQL Standardization","text":"<ul> <li>ANSI SQL: In 1986, the American National Standards Institute (ANSI) published the first SQL standard,   standardizing the query language for relational databases.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#1990s-evolution-and-diversification","title":"1990s: Evolution and Diversification","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#object-oriented-databases","title":"Object-Oriented Databases","text":"<ul> <li>Emergence: Object-oriented databases gained popularity for managing complex data and programming objects[5].</li> <li>db4o and ObjectDB: Examples of object-oriented DBMSs that appeared during this period.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#distributed-databases","title":"Distributed Databases","text":"<ul> <li>Scalability: Distributed databases were developed to allow data distribution across multiple servers, thus   improving scalability and fault tolerance.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#2000s-the-rise-of-nosql-databases","title":"2000s: The Rise of NoSQL Databases","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#big-data","title":"Big Data","text":"<ul> <li>Data Explosion: With the rise of the internet and web applications, the volume of data exploded, requiring new   approaches to data management.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#nosql-databases","title":"NoSQL Databases","text":"<ul> <li>MongoDB: Launched in 2009, MongoDB is a document database that allows storing semi-structured data[4].</li> <li>Cassandra: Developed by Facebook, Cassandra is a distributed column database, designed to manage large amounts of   data across multiple servers.</li> <li>Redis: An in-memory database, used for applications requiring high performance[4].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#2010s-to-today-new-trends-and-technologies","title":"2010s to Today: New Trends and Technologies","text":""},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#in-memory-databases","title":"In-Memory Databases","text":"<ul> <li>Performance: In-memory databases, such as Redis and Memcached, are gaining popularity for applications requiring   ultra-fast response times[4].</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#multi-model-databases","title":"Multi-Model Databases","text":"<ul> <li>Flexibility: Multi-model databases, such as ArangoDB and OrientDB, allow combining multiple data models (   relational, document, graph) in the same DBMS.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#cloud-and-database-as-a-service-dbaas","title":"Cloud and Database as a Service (DBaaS)","text":"<ul> <li>Accessibility: Cloud database services, such as Amazon RDS, Google Cloud SQL, and Azure SQL Database, allow   companies to deploy and manage databases without having to worry about the underlying infrastructure.</li> </ul>"},{"location":"1.%20Introduction/03-Historique-des-bases-de-donnees/#conclusion","title":"Conclusion","text":"<p>The history of databases is marked by constant evolution, responding to growing needs for storage, management, and data access. From the first hierarchical systems to relational databases, through NoSQL databases and in-memory solutions, each step has brought significant innovations. Today, databases continue to evolve to meet the challenges of Big Data, the Internet of Things (IoT), and real-time applications.</p> References <p>[1] https://www.quickbase.com/articles/timeline-of-database-history [2] https://s2.smu.edu/~fmoore/timeline.pdf [3] https://www.thinkautomation.com/histories/the-history-of-databases [4] https://www.linkedin.com/pulse/timeline-databases-darren-culbreath [5] https://en.wikipedia.org/wiki/Database [6] https://fr.wikipedia.org/wiki/Mod%C3%A8le_relationnel [7] https://dbs.academy.lv/lection/dbs_LS02ENa_hist.pdf [8] https://fr.wikipedia.org/wiki/Edgar_Frank_Codd [9] https://www.dataversity.net/brief-history-database-management/ [10] https://www.historyofinformation.com/detail.php?id=94 [11] https://www.cockroachlabs.com/blog/history-of-databases-distributed-sql/ [12] https://www.techno-science.net/definition/7438.html [13] https://librecours.net/modules/bdd/relationnel/solpdf?contentName=relationnel.pdf [14] https://cours.ebsi.umontreal.ca/sci6005/h2022/co/sgbd_modele_relationnel.html [15] https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf [16] https://www.decideo.fr/glossary/Codd-Dr-Edgar-F_gw93.html [17] https://www.ibm.com/history/edgar-codd</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/","title":"Examples of Databases in Different Contexts","text":"<p>Databases are used in a variety of contexts, each with specific needs and characteristics. Here are some examples of databases in different contexts, along with the typical size of databases in these contexts.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#1-embedded-systems","title":"1. Embedded Systems","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example","title":"Example","text":"<ul> <li>IoT (Internet of Things) Devices: Databases are used to store sensor data, device configurations, and event logs.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size","title":"Typical Size","text":"<ul> <li>Order of magnitude: Kilobytes (KB) to Megabytes (MB)</li> <li>Example: An embedded database for a smart thermostat might be a few MB in size to store temperature histories and   configurations.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#2-websites","title":"2. Websites","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_1","title":"Example","text":"<ul> <li>E-commerce Sites: Databases store information about products, users, orders, reviews, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_1","title":"Typical Size","text":"<ul> <li>Order of magnitude: Gigabytes (GB) to Terabytes (TB)</li> <li>Example: A medium-sized e-commerce site may have a database of several hundred GB, while a large site like Amazon   may have databases of several TB.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#3-desktop-applications","title":"3. Desktop Applications","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_2","title":"Example","text":"<ul> <li>Business Management Software: Databases are used to manage information about customers, products, sales,   inventory, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_2","title":"Typical Size","text":"<ul> <li>Order of magnitude: Megabytes (MB) to Gigabytes (GB)</li> <li>Example: Management software for a small business may have a database ranging from a few dozen MB to a few GB.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#4-data-analysis","title":"4. Data Analysis","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_3","title":"Example","text":"<ul> <li>Data Warehousing: Databases are used to store and analyze large amounts of historical data.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_3","title":"Typical Size","text":"<ul> <li>Order of magnitude: Terabytes (TB) to Petabytes (PB)</li> <li>Example: A large company may have a data warehouse of several TB for analyzing sales, operations, and performance.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#5-mobile-applications","title":"5. Mobile Applications","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_4","title":"Example","text":"<ul> <li>Social Network Applications: Databases store information about users, messages, friends, photos, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_4","title":"Typical Size","text":"<ul> <li>Order of magnitude: Megabytes (MB) to Gigabytes (GB)</li> <li>Example: A medium-sized social network application may have a database of several dozen GB to store user   information and shared content.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#6-video-games","title":"6. Video Games","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_5","title":"Example","text":"<ul> <li>Massively Multiplayer Online Games (MMOs): Databases store information about players, characters, inventories,   scores, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_5","title":"Typical Size","text":"<ul> <li>Order of magnitude: Gigabytes (GB) to Terabytes (TB)</li> <li>Example: A large-scale MMO game may have a database of several TB to manage player information and game states.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#7-financial-systems","title":"7. Financial Systems","text":""},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#example_6","title":"Example","text":"<ul> <li>Banking Systems: Databases store information about accounts, transactions, customers, credit histories, etc.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#typical-size_6","title":"Typical Size","text":"<ul> <li>Order of magnitude: Terabytes (TB) to Petabytes (PB)</li> <li>Example: A large bank may have databases of several PB to manage financial transactions and customer information.</li> </ul>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#conclusion","title":"Conclusion","text":"<p>Databases are essential in a variety of contexts, each with specific requirements in terms of size and performance. From a few kilobytes in embedded systems to several petabytes in financial and data analysis systems, databases play a crucial role in storing, managing, and analyzing information.</p>"},{"location":"1.%20Introduction/04-Exemples-de-Bases-de-Donnees/#units-table","title":"Units Table","text":"Unit (FR) Full Name (FR) Value Base 2 Base 10 (approx) Unit (EN) Full Name (EN) o octet 1 octet 2^0 1 B byte Ko kilooctet 1,024 octets 2^10 1.02 \u00d7 10^3 KB kilobyte Mo m\u00e9gaoctet 1,024 kilooctets 2^20 1.05 \u00d7 10^6 MB megabyte Go gigaoctet 1,024 m\u00e9gaoctets 2^30 1.07 \u00d7 10^9 GB gigabyte To t\u00e9raoctet 1,024 gigaoctets 2^40 1.10 \u00d7 10^12 TB terabyte Po p\u00e9taoctet 1,024 t\u00e9raoctets 2^50 1.13 \u00d7 10^15 PB petabyte Eo exaoctet 1,024 p\u00e9taoctets 2^60 1.15 \u00d7 10^18 EB exabyte Zo zettaoctet 1,024 exaoctets 2^70 1.18 \u00d7 10^21 ZB zettabyte Yo yottaoctet 1,024 zettaoctets 2^80 1.21 \u00d7 10^24 YB yottabyte References <p>[1] https://rivery.io/data-learning-center/database-types-guide/ [2] https://www.confluent.io/learn/database/ [3] https://blog.algomaster.io/p/15-types-of-databases [4] https://visual-flow.com/blog/the-types-of-databases-with-examples [5] https://azure.microsoft.com/en-ca/resources/cloud-computing-dictionary/what-are-databases [6] https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems [7] https://www.simplilearn.com/tutorials/dbms-tutorial/what-is-a-database [8] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [9] https://www.prisma.io/dataguide/intro/comparing-database-types [10] https://www.linkedin.com/advice/3/how-can-you-determine-optimal-database-qvxqc [11] https://www.fivetran.com/blog/what-is-a-database [12] https://dba.stackexchange.com/questions/22888/how-database-size-affects-performance-theory-vs-reality [13] https://blog.bytebytego.com/p/understanding-database-types [14] https://www.sqlskills.com/blogs/paul/physical-database-layout-vs-database-size/ [15] https://www.reddit.com/r/Database/comments/16kl7fi/at_what_size_do_you_consider_a_database_to_be_a/ [16] https://risingwave.com/blog/column-based-database-comparison-analyzing-efficiency/ [17] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [18] https://community.commvault.com/self-hosted-q-a-2/size-of-app-and-size-of-data-are-very-different-1748 [19] https://stackoverflow.com/questions/2804452/database-per-application-vs-one-big-database-for-all-applications</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/","title":"Introduction to PostgreSQL","text":""},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#history-of-postgresql","title":"History of PostgreSQL","text":"<p>PostgreSQL, often called Postgres, is an open-source relational and object-relational database management system. Its development began in 1986 at the University of California, Berkeley, under the POSTGRES project led by Professor Michael Stonebraker[1][2]. The project evolved to become PostgreSQL in 1996, with the addition of SQL support[5].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#data-model-used","title":"Data Model Used","text":"<p>PostgreSQL uses a relational and object-relational data model. This means it supports not only the features of traditional relational databases, such as tables, SQL queries, and transactions, but also advanced features like custom data types, objects, and table inheritance[6][15].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#comparison-of-relational-and-object-relational-models","title":"Comparison of Relational and Object-Relational Models","text":"Characteristic Relational Model Object-Relational Model Data Structure Tables and columns Tables, columns, custom data types, table inheritance Query Language Standard SQL SQL with extensions for objects Data Types Standard data types (INT, VARCHAR, etc.) Standard data types + custom types Object Support No Yes Table Inheritance No Yes"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#importance-and-support-from-major-companies","title":"Importance and Support from Major Companies","text":"<p>PostgreSQL is widely used by many large companies and organizations around the world, including:</p> <ul> <li>Apple</li> <li>Cisco</li> <li>Red Hat</li> <li>Debian</li> <li>Instagram</li> <li>Spotify</li> </ul> <p>These companies choose PostgreSQL for its robustness, flexibility, and adherence to SQL standards.</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#postgresqls-distinctive-features-compared-to-other-dbmss","title":"PostgreSQL\u2019s Distinctive Features Compared to Other DBMSs","text":"<ol> <li>Extensibility: PostgreSQL allows users to define their own data types, operators, and functions[15].</li> <li>ACID Transaction Support: Ensures transaction reliability with atomicity, consistency, isolation, and durability properties[15].</li> <li>SQL Standards Compliance: PostgreSQL is highly compliant with SQL standards, which facilitates application portability[15].</li> <li>Complex Query Support: PostgreSQL supports complex joins, subqueries, materialized views, and more[15].</li> <li>Advanced Indexing: Offers several index types (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) to improve query performance[15].</li> <li>Security: Includes advanced security features such as SSL authentication, data encryption, and role-based access control[15].</li> </ol>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#license","title":"License","text":"<p>PostgreSQL is distributed under the PostgreSQL License, a permissive open-source license similar to the MIT License. This allows free use, modification, and distribution, including for commercial applications[1].</p>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#download-and-installation","title":"Download and Installation","text":""},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#download-links","title":"Download Links","text":"<ul> <li>PostgreSQL Official Website[1]</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#installation-guides","title":"Installation Guides","text":"<ul> <li>Windows Installation Guide</li> <li>macOS Installation Guide</li> <li>Linux Installation Guide</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/01-Intro-a-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL is a powerful and flexible DBMS, suitable for a wide range of applications. Its object-relational data model, compliance with SQL standards, and advanced features make it a preferred choice for many companies and developers. Its open-source license and broad community support also contribute to its popularity and continued adoption.</p> References <p>[1] https://www.postgresql.org/docs/current/history.html [2] https://en.wikipedia.org/wiki/PostgreSQL [3] https://www.postgresql.org/docs/7.0/intro60.htm [4] https://www.highgo.ca/2021/11/01/the-postgresql-timeline-concept/ [5] https://www.crunchydata.com/blog/when-did-postgres-become-cool [6] https://www.dbvis.com/thetable/postgresql-vs-mysql/ [7] https://aws.amazon.com/compare/the-difference-between-mysql-vs-postgresql/ [8] https://postgres-xc.sourceforge.net/docs/1_0/history.html [9] https://www.integrate.io/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case/ [10] https://www.youtube.com/watch?v=BtvFuSOAR3E [11] https://www.postgresql.org/docs/6.3/c0102.htm [12] https://leyton.com/ca/insights/articles/database-wars-postges-vs-mysql/ [13] https://www.reddit.com/r/node/comments/rv6u8u/why_do_you_choose_mysql_over_postgres/ [14] https://www.enterprisedb.com/blog/place-postgres-history [15] https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features [16] https://dataegret.com/2024/03/the-importance-of-postgresql-timelines/ [17] https://www.datacamp.com/blog/postgresql-vs-mysql [18] https://kinsta.com/blog/postgresql-vs-mysql/ [19] https://www.bytebase.com/blog/postgres-vs-mysql/ [20] https://www.ibm.com/think/topics/postgresql-vs-mysql</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/","title":"Advantages of PostgreSQL Compared to Other DBMSs","text":"<p>PostgreSQL is recognized for its numerous advanced features, robustness, and flexibility. Here are some of the distinctive advantages of PostgreSQL compared to other database management systems (DBMSs):</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#1-extensibility","title":"1. Extensibility","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description","title":"Description","text":"<p>PostgreSQL is extremely extensible. Users can add new data types, functions, operators, aggregates, indexing methods, and even procedural languages.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example","title":"Example","text":"<pre><code>CREATE FUNCTION add_integers(a INTEGER, b INTEGER) RETURNS INTEGER AS\n    $$\nBEGIN\nRETURN a + b;\nEND;\n$$\nLANGUAGE plpgsql;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#2-sql-standards-compliance","title":"2. SQL Standards Compliance","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_1","title":"Description","text":"<p>PostgreSQL is highly compliant with SQL standards, which facilitates application portability between different DBMSs.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_1","title":"Example","text":"<p>PostgreSQL supports advanced SQL features such as subqueries, complex joins, materialized views, etc.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#3-acid-transactions","title":"3. ACID Transactions","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_2","title":"Description","text":"<p>PostgreSQL ensures transaction reliability with atomicity, consistency, isolation, and durability (ACID) properties.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_2","title":"Example","text":"<pre><code>BEGIN;\nUPDATE accounts\nSET balance = balance - 100\nWHERE id = 1;\nUPDATE accounts\nSET balance = balance + 100\nWHERE id = 2;\nCOMMIT;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#4-advanced-indexing","title":"4. Advanced Indexing","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_3","title":"Description","text":"<p>PostgreSQL offers several types of indexes (B-tree, Hash, GiST, SP-GiST, GIN, BRIN) to improve query performance.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_3","title":"Example","text":"<pre><code>CREATE INDEX idx_gin ON documents USING GIN (content);\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#5-security","title":"5. Security","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_4","title":"Description","text":"<p>PostgreSQL includes advanced security features such as SSL authentication, data encryption, and role-based access control.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_4","title":"Example","text":"<pre><code>CREATE ROLE admin WITH LOGIN PASSWORD 'securepassword';\nGRANT\nALL\nPRIVILEGES\nON\nDATABASE\nmydb TO admin;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#6-complex-query-support","title":"6. Complex Query Support","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_5","title":"Description","text":"<p>PostgreSQL supports complex joins, subqueries, materialized views, window functions, and more.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_5","title":"Example","text":"<pre><code>SELECT name, SUM(salary) OVER (PARTITION BY department) AS total_salary\nFROM employees;\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#7-advanced-data-types-support","title":"7. Advanced Data Types Support","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_6","title":"Description","text":"<p>PostgreSQL supports a wide range of data types, including geometric types, JSON types, XML types, and array types.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_6","title":"Example","text":"<pre><code>CREATE TABLE documents\n(\n    id      SERIAL PRIMARY KEY,\n    content JSONB\n);\n\nINSERT INTO documents (content)\nVALUES ('{\"title\": \"PostgreSQL\", \"author\": \"John Doe\"}');\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#8-high-availability-and-replication","title":"8. High Availability and Replication","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_7","title":"Description","text":"<p>PostgreSQL offers robust solutions for high availability and replication, including streaming replication and logical replication.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#example_7","title":"Example","text":"<pre><code># Streaming replication configuration\nprimary_conninfo = 'host=primary_host port=5432 user=replicator password=securepassword'\n</code></pre>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#9-permissive-open-source-license","title":"9. Permissive Open-Source License","text":""},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#description_8","title":"Description","text":"<p>PostgreSQL is distributed under the PostgreSQL License, a permissive open-source license similar to the MIT License, allowing free use, modification, and distribution, including for commercial applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/02-Avantages-de-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL stands out for its flexibility, standards compliance, advanced features, and robustness. These advantages make it a preferred choice for many companies and developers worldwide, offering a reliable and high-performance solution for a wide range of applications.</p> References <p>[1] https://www.altexsoft.com/blog/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/ [2] https://www.integrate.io/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case/ [3] https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems [4] https://www.quest.com/learn/what-is-postgresql.aspx [5] https://www.enterprisedb.com/postgres-tutorials/why-more-and-more-enterprises-are-choosing-postgresql-their-go-database [6] https://www.instaclustr.com/education/postgresql/postgresql-vs-sql-server-13-key-differences-and-how-to-choose/ [7] https://estuary.dev/blog/postgresql-vs-mongodb/ [8] https://www.bytebase.com/blog/postgres-vs-sqlserver/ [9] https://cloud.google.com/learn/postgresql-vs-sql [10] https://www.enterprisedb.com/blog/microsoft-sql-server-mssql-vs-postgresql-comparison-details-what-differences [11] https://www.bytebase.com/blog/postgres-vs-mysql/ [12] https://www.postgresql.org/docs/7.4/features.html [13] https://www.reddit.com/r/SQL/comments/y08ia1/is_there_a_difference_between_sql_and_postgresql/ [14] https://wiki.postgresql.org/wiki/PostgreSQL_vs_SQL_Standard [15] https://www.linkedin.com/pulse/understanding-difference-between-sql-postgresql-which-naeem-shahzad-fc90e [16] https://www.instaclustr.com/education/postgresql/complete-guide-to-postgresql-features-use-cases-and-tutorial/</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/","title":"Companies Using PostgreSQL","text":"<p>PostgreSQL is used by many large companies and organizations around the world for various reasons, including its robustness, flexibility, compliance with SQL standards, and its open-source model. Here are some notable examples:</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#1-apple","title":"1. Apple","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage","title":"Usage","text":"<p>Apple uses PostgreSQL for various internal services and applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons","title":"Reasons","text":"<ul> <li>Reliability and robustness: PostgreSQL is known for its stability and ability to handle large amounts of data.</li> <li>SQL standards compliance: Facilitates integration with other systems and applications.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#2-cisco","title":"2. Cisco","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_1","title":"Usage","text":"<p>Cisco uses PostgreSQL for network management solutions and telecommunications applications.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_1","title":"Reasons","text":"<ul> <li>Extensibility: Allows customization and extension of features according to specific needs.</li> <li>Security: Offers advanced security features, crucial for telecommunications applications.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#3-red-hat","title":"3. Red Hat","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_2","title":"Usage","text":"<p>Red Hat integrates PostgreSQL into its enterprise solutions, including Red Hat Enterprise Linux and OpenShift.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_2","title":"Reasons","text":"<ul> <li>Open-source: Aligned with Red Hat\u2019s open-source philosophy.</li> <li>Community support: Benefits from broad community support and regular contributions.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#4-debian","title":"4. Debian","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_3","title":"Usage","text":"<p>Debian uses PostgreSQL as the default DBMS for many applications and services.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_3","title":"Reasons","text":"<ul> <li>Permissive license: The PostgreSQL license allows free use and distribution without restrictions.</li> <li>Reliability: PostgreSQL is known for its reliability and performance.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#5-instagram","title":"5. Instagram","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_4","title":"Usage","text":"<p>Instagram uses PostgreSQL to store and manage user data and media.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_4","title":"Reasons","text":"<ul> <li>Scalability: Capable of handling millions of users and transactions per day.</li> <li>Performance: Offers high performance for read and write operations.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#6-spotify","title":"6. Spotify","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_5","title":"Usage","text":"<p>Spotify uses PostgreSQL to manage user data, playlists, and music recommendations.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_5","title":"Reasons","text":"<ul> <li>Flexibility: Allows storing structured and semi-structured data.</li> <li>Complex query support: Capable of handling complex SQL queries for recommendations and analytics.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#7-tripadvisor","title":"7. TripAdvisor","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_6","title":"Usage","text":"<p>TripAdvisor uses PostgreSQL to store and manage user reviews, travel information, and hotel data.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_6","title":"Reasons","text":"<ul> <li>Extensibility: Allows creating custom data types and specific functions.</li> <li>ACID transaction support: Ensures reliability and consistency of critical data.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#8-the-guardian","title":"8. The Guardian","text":""},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#usage_7","title":"Usage","text":"<p>The Guardian uses PostgreSQL to manage content, users, and analytical data.</p>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#reasons_7","title":"Reasons","text":"<ul> <li>Security: Offers advanced security features to protect sensitive data.</li> <li>SQL standards compliance: Facilitates integration with other content management systems.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#9-french-companies","title":"9. French Companies","text":"<p>Several major French companies also rely on PostgreSQL:</p> <ul> <li>SNCF (French National Railway Company): Uses PostgreSQL to manage railway data and optimize operations.</li> <li>Soci\u00e9t\u00e9 G\u00e9n\u00e9rale: This French bank adopted PostgreSQL for its robustness and ability to operate on various   operating systems.</li> <li>MAIF: Uses PostgreSQL to efficiently manage customer data and internal operations.</li> <li>IGN (National Institute of Geographic and Forest Information): Uses PostgreSQL to manage geospatial data.</li> <li>Air France: Uses PostgreSQL to optimize operational data management and improve passenger services.</li> <li>Carrefour: Uses PostgreSQL to manage its vast product and transaction databases.</li> <li>EDF (\u00c9lectricit\u00e9 de France): Uses PostgreSQL to manage energy data.</li> <li>ENEDIS: Uses PostgreSQL to monitor and optimize electricity distribution.</li> </ul>"},{"location":"1.%20Introduction/PostgreSQL/03-Entreprises-utilisant-PostgreSQL/#conclusion","title":"Conclusion","text":"<p>PostgreSQL is chosen by many large companies for its numerous advantages, including robustness, flexibility, compliance with SQL standards, and its permissive open-source license. These characteristics make it a reliable and high-performance DBMS capable of meeting the varied needs of modern businesses.</p> References <p>[1] https://2025.pgconf.dev [2] https://emplois.ca.indeed.com/q-postgresql-database-emplois.html [3] https://www.reddit.com/r/PostgreSQL/comments/1isii5f/postgresworld_2025_webinar_series/?tl=fr [4] https://www.astera.com/fr/knowledge-center/mongodb-vs-postgresql/ [5] https://fr.wikipedia.org/wiki/PostgreSQL [6] https://www.yugabyte.com/blog/postgresql-top-choice-in-2025/ [7] https://www.lemagit.fr/actualites/252509351/PostgreSQL-ne-decoit-pas-les-entreprises-francaises [8] https://fr.getapp.ca/software/122219/postgresql [9] https://lu.indeed.com/q-postgresql-emplois.html [10] https://blog.dalibo.com/2025/01/06/workshop_postgres17.html</p>"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/","title":"PostgreSQL Configuration","text":""},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#for-windowsmac","title":"For Windows/Mac","text":"<ol> <li>Go to PostgreSQL Download to download the    PostgreSQL DBMS.</li> <li>Go    to PostgreSQL Installation    and follow the instructions to install it.</li> <li>This will install the database server and some other tools to manage databases.<ul> <li>The most important for now, the <code>psql</code> command and the PgAdmin application will be installed at the same time as   the server.</li> </ul> </li> <li>Don\u2019t forget to enter a password for the postgres user.<ul> <li>If it doesn\u2019t ask for a password, it will need to be set from the command line.</li> <li>You will need to use the <code>psql</code> command to change the password for the <code>postgres</code> user.</li> <li>Otherwise, you will need to reinstall.</li> </ul> </li> </ol>"},{"location":"1.%20Introduction/PostgreSQL/04-Configuration/#for-linux","title":"For Linux","text":"<ol> <li>Follow this guide to install PostgreSQL on    Ubuntu: PostgreSQL on Ubuntu.<ul> <li>The procedure is very similar for other Linux distributions.</li> </ul> </li> <li>Install PgAdmin from here, or through your distribution\u2019s package manager.</li> </ol> References <p>[1] https://www.enterprisedb.com/downloads/postgres-postgresql-downloads [2] https://www.enterprisedb.com/downloads/postgres-postgresql-downloads [3] https://www.postgresql.org/download/macosx/ [4] https://www.w3schools.com/postgresql/postgresql_install.php [5] https://www.sqlshack.com/setting-up-a-postgresql-database-on-mac/ [6] https://www.postgresql.org/download/ [7] https://www.datacamp.com/tutorial/installing-postgresql-windows-macosx [8] https://neon.tech/postgresql/postgresql-getting-started/install-postgresql [9] https://www.prisma.io/dataguide/postgresql/setting-up-a-local-postgresql-database [10] https://www.postgresql.org/docs/current/tutorial-install.html [11] https://coding-boot-camp.github.io/full-stack/postgresql/postgresql-installation-guide/ [12] https://www.enterprisedb.com/docs/supported-open-source/postgresql/installing/ [13] https://www.youtube.com/watch?v=PShGF_udSpk [14] https://www.enterprisedb.com/docs/supported-open-source/postgresql/installing/windows/</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/","title":"Presentation","text":"<p>The relational model is a conceptual framework for organizing and managing data in the form of tables, also called relations. This model was introduced by Edgar F. Codd in 1970 and has become the foundation for relational database management systems (RDBMS), such as PostgreSQL. In this model, data is represented by tuples (rows) in relations ( tables), and operations on the data are performed using a structured query language like SQL (Structured Query Language).</p>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#lexicon","title":"Lexicon","text":"<ol> <li> <p>Relation (Table): A relation is a two-dimensional table composed of rows and columns. Each table represents an    entity or a real-world concept.</p> </li> <li> <p>Attribute (Column): An attribute is a column in a table. Each attribute has a name and a data type (for example,    integer, text, date).</p> </li> <li> <p>Tuple (Row): A tuple is a row in a table. Each tuple represents a unique record of an entity.</p> </li> <li> <p>Domain: A domain is the set of possible values that an attribute can take. For example, the domain of an \u201cage\u201d    attribute might be integers from 0 to 120.</p> </li> <li> <p>Primary Key: A primary key is an attribute or set of attributes that uniquely identifies each tuple in a    relation. For example, a social security number can be a primary key for a table of people.</p> </li> <li> <p>Foreign Key: A foreign key is an attribute or set of attributes in a table that references the primary key of    another table. This creates a relationship between the two tables.</p> </li> <li> <p>Relation Schema: The relation schema is the structure or definition of a relation, including attribute names and    their data types.</p> </li> <li> <p>Referential Integrity: Referential integrity is a constraint that ensures that foreign key values correspond to    existing primary key values in the referenced tables.</p> </li> </ol>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#examples","title":"Examples","text":""},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-1-students-table","title":"Example 1: Students Table","text":"Student_ID Last_Name First_Name Age Department 1 Dupont Jean 20 Computer Science 2 Martin Sophie 22 Mathematics 3 Durand Pierre 21 Physics <ul> <li>Relation: <code>Students</code></li> <li>Attributes: <code>Student_ID</code>, <code>Last_Name</code>, <code>First_Name</code>, <code>Age</code>, <code>Department</code></li> <li>Primary Key: <code>Student_ID</code></li> </ul>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-2-courses-table","title":"Example 2: Courses Table","text":"Course_Code Course_Name Credit CS101 Introduction to CS 3 MA101 Calculus I 4 PH101 General Physics 4 <ul> <li>Relation: <code>Courses</code></li> <li>Attributes: <code>Course_Code</code>, <code>Course_Name</code>, <code>Credit</code></li> <li>Primary Key: <code>Course_Code</code></li> </ul>"},{"location":"2.%20The%20relational%20model/01-Pr%C3%A9sentation/#example-3-enrollments-table","title":"Example 3: Enrollments Table","text":"Student_ID Course_Code 1 CS101 2 MA101 3 PH101 1 MA101 <ul> <li>Relation: <code>Enrollments</code></li> <li>Attributes: <code>Student_ID</code>, <code>Course_Code</code></li> <li>Primary Key: <code>(Student_ID, Course_Code)</code></li> <li>Foreign Keys: <code>Student_ID</code> refers to <code>Students(Student_ID)</code>, <code>Course_Code</code> refers to <code>Courses(Course_Code)</code></li> </ul> <p>These examples show how data can be organized and interconnected in the relational model, facilitating the management and querying of information in an efficient and consistent manner.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20The%20relational%20model/02-ERD/","title":"Introduction to Entity-Relationship Diagrams","text":"<p>An entity-relationship (ER) diagram is a graphical tool used to model data and relationships between them in an information system. It is commonly used in database design to represent entities, their attributes, and the relationships between these entities. This type of diagram helps visualize the database structure and understand how data is interconnected.</p>"},{"location":"2.%20The%20relational%20model/02-ERD/#components-of-an-entity-relationship-diagram","title":"Components of an Entity-Relationship Diagram","text":"<ol> <li> <p>Entities: Represented by rectangles, entities are real-world objects or concepts with independent existence. For    example, in a university database, entities might be Student, Course, and Instructor.</p> </li> <li> <p>Attributes: Represented by ovals, attributes are properties or characteristics of entities. For example, a    Student may have attributes such as Student_ID, Name, and Birth_Date.</p> </li> <li> <p>Relationships: Represented by diamonds, relationships describe how entities are linked to each other. For    example, an Enrollment relationship may connect the Student and Course entities.</p> </li> <li> <p>Cardinality: Cardinality specifies the number of occurrences of one entity that can be associated with an    occurrence of another entity. Common cardinality types are:</p> <ul> <li>One to One (1:1)</li> <li>One to Many (1:N)</li> <li>Many to Many (M:N)</li> </ul> </li> </ol>"},{"location":"2.%20The%20relational%20model/02-ERD/#example-of-an-entity-relationship-diagram","title":"Example of an Entity-Relationship Diagram","text":"<p>Here is an example of an ER diagram for a university database, in PlantUML format.</p> <p>![ER University Diagram](https://www.plantuml.com/plantuml/png/XP11JWCn34NtEKKqIr0hs7PLD6NHJK7Y0ACeyLIM9WvAd0L2782Zz1npCQ96esGe2jdbsVxVt_l0odEqam1Yv0yvVtCqg8Zbfv3ftHyFGs4xYSIPdvnDty0UwPp9gvylT4CFYc4uAGn1aOPKD0c8Bx4OzYxwi9Zrpi2GIQMItVxaVV8qo25lLiaUARL5pH1zbQIYxIpFLk5Ks4fNUtndTDIuK3DCFaabT7kKbt7qosnnkTB_7PfHty12Ai2lWIUY-GBbYYLGzzZ9pKPs3zljNIVNM-FrnoAlqEhKZZ&gt;PlantUML Code</p> <pre><code>@startuml\n\nentity Student {\n    +Student_ID : int\n    +Last_Name : string\n    +First_Name : string\n    +Birth_Date : date\n}\n\nentity Course {\n    +Course_Code : string\n    +Course_Name : string\n    +Credits : int\n}\n\nentity Instructor {\n    +Instructor_ID : int\n    +Name : string\n    +Email : string\n}\n\nentity Enrollment {\n    +Student_ID : int\n    +Course_Code : string\n    +Enrollment_Date : date\n}\n\nentity Course_Offering {\n    +Offering_ID : int\n    +Course_Code : string\n    +Instructor_ID : int\n    +Semester : string\n    +Year : int\n}\n\nStudent \"1\" -- \"0..*\" Enrollment : enrolls\nCourse \"1\" -- \"0..*\" Enrollment : involves\nInstructor \"1\" -- \"0..*\" Course_Offering : teaches\nCourse \"1\" -- \"0..*\" Course_Offering : offered\n\n@enduml\n</code></pre>"},{"location":"2.%20The%20relational%20model/02-ERD/#diagram-explanation","title":"Diagram Explanation","text":"<ul> <li>Student: Entity representing a student, with attributes such as Student_ID, Last_Name, First_Name, and Birth_Date.</li> <li>Course: Entity representing a course, with attributes such as Course_Code, Course_Name, and Credits.</li> <li>Instructor: Entity representing an instructor, with attributes such as Instructor_ID, Name, and Email.</li> <li>Enrollment: Relationship between Student and Course, with attributes such as Student_ID, Course_Code, and   Enrollment_Date.</li> <li>Course_Offering: Relationship between Course and Instructor, with attributes such as Offering_ID, Course_Code,   Instructor_ID, Semester, and Year.</li> </ul>"},{"location":"2.%20The%20relational%20model/02-ERD/#conclusion","title":"Conclusion","text":"<p>Entity-relationship diagrams are valuable tools for database modeling. They allow visual representation of entities, their attributes, and the relationships between them, facilitating understanding and design of the database structure. Using tools like PlantUML to create these diagrams can help standardize and automate the modeling process.</p> References <p>[1] https://www.lucidchart.com/pages/er-diagrams [2] https://www.visual-paradigm.com/guide/data-modeling/what-is-entity-relationship-diagram/ [3] https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model [4] https://opentextbc.ca/dbdesign01/chapter/chapter-8-entity-relationship-model/ [5] https://www.secoda.co/glossary/entity-relationship-diagram [6] https://www.ibm.com/think/topics/entity-relationship-diagram [7] https://mermaid.js.org/syntax/entityRelationshipDiagram.html [8] https://www.techtarget.com/searchdatamanagement/definition/entity-relationship-diagram-ERD [9] https://www.smartdraw.com/entity-relationship-diagram/ [10] https://www.lucidchart.com/pages/ER-diagram-symbols-and-meaning [11] https://fr.wikipedia.org/wiki/Mod%C3%A8le_entit%C3%A9-association</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/01-intro/","title":"1 - Introduction to SQL","text":"<p>SQL (Structured Query Language) is a standardized programming language used to manage and manipulate relational databases. It allows for various operations such as creating, modifying, deleting, and retrieving data in a database. SQL is essential for interacting with relational database management systems (RDBMS) like PostgreSQL, MySQL, Oracle, and SQL Server[1][2][4].</p>"},{"location":"3.%20SQL/01-intro/#history-of-sql","title":"History of SQL","text":"<p>SQL was developed in the early 1970s by IBM researchers Donald D. Chamberlin and Raymond F. Boyce as part of the System R project, which aimed to demonstrate the feasibility of relational databases. The language was initially called SEQUEL (Structured English Query Language) before being renamed SQL[4][5]. In 1986, the American National Standards Institute (ANSI) published the first SQL standard, followed by the International Organization for Standardization (ISO) in 1987[3][4][5]. Since then, SQL has evolved with several revisions and extensions to meet the growing needs of modern databases.</p>"},{"location":"3.%20SQL/01-intro/#overview-of-iso-standards","title":"Overview of ISO Standards","text":"<p>ISO standards for SQL define the specifications and functionalities of the language to ensure interoperability between different database systems. Here are some of the key versions:</p> <ul> <li>SQL-86: The first SQL standard published by ANSI in 1986 and adopted by ISO in 1987[3][4].</li> <li>SQL-89: A minor revision of SQL-86, introducing some improvements and corrections.</li> <li>SQL-92: A major version that added numerous features, including subqueries, outer joins, and integrity   constraints[4].</li> <li>SQL:1999 (SQL3): Introduction of user-defined data types, stored procedures, and recursive query language.</li> <li>SQL:2003: Addition of XML functions, derived tables, and windowed data types.</li> <li>SQL:2008: Improvements to existing features and addition of new ones, such as common table expressions (CTE).</li> <li>SQL:2011: Introduction of temporal data processing features.</li> <li>SQL:2016: Addition of JSON features and new extensions for geospatial data types.</li> </ul>"},{"location":"3.%20SQL/01-intro/#principles-of-a-non-procedural-language","title":"Principles of a Non-Procedural Language","text":"<p>SQL is a non-procedural language, which means that the user specifies what they want to obtain without detailing * how* the system should obtain it[5]. Here are some key principles:</p> <ol> <li> <p>Declaration of Intentions: In SQL, you declare your intentions in terms of desired results. For example, a SELECT    query indicates which columns and rows you want to retrieve, but not how to retrieve them[3].</p> </li> <li> <p>Implementation Abstraction: Implementation details, such as sorting algorithms or data access paths, are managed    by the RDBMS. The user doesn\u2019t need to know these details[2].</p> </li> <li> <p>Automatic Optimization: RDBMSs automatically optimize queries to improve performance. The user focuses on query    logic rather than optimization[2].</p> </li> <li> <p>Ease of Use: Non-procedural language is generally easier to learn and use for end users, as it focuses on results    rather than processes[5].</p> </li> <li> <p>Portability: SQL queries are portable between different database systems, as long as they adhere to ISO    standards, which facilitates migration and interoperability[4].</p> </li> </ol>"},{"location":"3.%20SQL/01-intro/#example-of-an-sql-query","title":"Example of an SQL Query","text":"<pre><code>SELECT Name, FirstName, Age\nFROM Students\nWHERE Department = 'Computer Science';\n</code></pre> <p>This query selects the Name, FirstName, and Age columns from the Students table for students belonging to the Computer Science department, without specifying how the RDBMS should access or sort the data[3][6].</p> <p>In summary, SQL is a powerful and flexible language for interacting with relational databases, offering an abstraction that allows users to focus on desired results rather than implementation details[2][5].</p> References <p>[1] https://aws.amazon.com/what-is/sql/ [2] https://www.techtarget.com/searchdatamanagement/definition/SQL [3] https://www.w3schools.com/sql/sql_intro.asp [4] https://en.wikipedia.org/wiki/SQL [5] https://www.atscale.com/glossary/sql/ [6] https://www.secoda.co/learn/mastering-basic-sql-database-operations-create-read-update-delete [7] https://learn.microsoft.com/en-us/rest/api/sql/database-operations/list-by-database?view=rest-sql-2023-08-01 [8] https://www.spiceworks.com/tech/artificial-intelligence/articles/what-is-sql/ [9] https://learn.microsoft.com/en-us/sql/t-sql/lesson-1-creating-database-objects?view=sql-server-ver16 [10] https://courses.cs.washington.edu/courses/cse100/09wi/lectures/23-DatabaseOperations.pdf [11] https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-sql-database [12] https://www.w3schools.com/sql/ [13] https://www.w3schools.com/sql/sql_operators.asp [14] https://opentextbc.ca/dbdesign01/chapter/sql-structured-query-language/ [15] https://www.youtube.com/watch?v=7mz73uXD9DA [16] https://www.devart.com/dbforge/sql/sqlcomplete/crud-operations-in-sql.html [17] https://www.ibm.com/think/topics/structured-query-language [18] https://learn.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver16 [19] https://www.w3schools.com/sql/sql_examples.asp [20] https://www.datacamp.com/blog/all-about-sql-the-essential-language-for-database-management</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/02a-bases-contacts/","title":"2a - Contact Database","text":"<ul> <li>Think of a contact database on a phone</li> <li>2 tables:<ul> <li><code>contact(CONTACT_ID, name, phone, address, email)</code></li> <li><code>call(CALL_ID, phone, date, time, contact_id*)</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/02a-bases-contacts/#creating-the-contact-database","title":"Creating the Contact Database","text":"<p>1- Run the contact_create.sql file to create the database</p> <ul> <li>the SQL commands included in this file will be explained later</li> <li>open the file in DataGrip and run it in an existing session or create a new session</li> </ul> <p>2- To check the results, you can use the Database Explorer tab or run the following queries:</p> <pre><code>SELECT *\nFROM contacts.contact;\n\nSELECT *\nFROM contacts.call;\n</code></pre> <p>3- To avoid prefixing table names with the schema name each time, we can run the following command:</p> <pre><code>SET\nsearch_path TO contacts;\n\nSELECT *\nFROM contact;\n\nSELECT *\nFROM call;\n</code></pre>"},{"location":"3.%20SQL/02a-bases-contacts/#queries-on-a-single-table","title":"Queries on a Single Table","text":"<p>1- Find John Doe\u2019s email address</p> <pre><code>SELECT email\nFROM contact\nWHERE name = 'John Doe';\n</code></pre> <p>2- Find contacts without a phone number</p> <pre><code>SELECT *\nFROM contact\nWHERE phone IS NULL;\n</code></pre> <p>3- Find contacts with a phone number</p> <pre><code>SELECT *\nFROM contact\nWHERE phone IS NOT NULL;\n</code></pre>"},{"location":"3.%20SQL/02a-bases-contacts/#with-aggregate-functions","title":"With Aggregate Functions","text":"<p>4- Count the number of rows in the <code>call</code> table</p> <pre><code>SELECT COUNT(*)\nFROM call;\n</code></pre> <p>5- Count the number of rows in the <code>call</code> table with non-null values for <code>contact_id</code></p> <pre><code>SELECT COUNT(contact_id)\nFROM call;\n</code></pre> <p>6- Count the number of rows in the <code>call</code> table with null values for <code>contact_id</code></p> <pre><code>SELECT COUNT(*)\nFROM call\nWHERE contact_id IS NULL;\n</code></pre>"},{"location":"3.%20SQL/02b-bases-universit%C3%A9/","title":"2b - University Database","text":"<p>Run the university_create.sql file to create the University database.</p> <pre><code>set\nsearch_path to university;\n</code></pre> <p>1- Projection: choose the columns to include in the results</p> <pre><code>select name, email\nfrom student;\n</code></pre> <p>2- Suppose the university charges $200 per credit for a course. Find the price for each course.</p> <ul> <li><code>price</code> is an alias for the calculated column</li> </ul> <pre><code>select code, name, credits * 200 as price\nfrom course;\n</code></pre> <p>3- Selection: filter the rows to include in the results</p> <ul> <li>Keep only course offerings for the Winter 2020 semester</li> </ul> <pre><code>select *\nfrom offering\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>4- Sorting: order instructors by their names</p> <pre><code>select iid, name, email\nfrom instructor\norder by name;\n\nselect iid, name, email\nfrom instructor\norder by 2;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/","title":"3a - Queries with More Than One Table (Contacts)","text":"<pre><code>SET\nsearch_path TO contacts;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#cartesian-product","title":"Cartesian Product","text":"<ul> <li>Associate each row of one table with each row of the other table<ul> <li>gives too many rows</li> <li>rarely used because it generally doesn\u2019t provide useful information</li> <li>and it can become very inefficient if the tables involved are large<ul> <li>the number of rows in the results will be the multiplication of the number of rows in each table involved</li> </ul> </li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call,\n     contact;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#join-with-cartesian-product","title":"Join (with Cartesian Product)","text":"<ul> <li>Keep only the matching rows, by \u201cfollowing\u201d the foreign key from <code>call</code> to <code>contact</code><ul> <li>this is the old way of doing a join (a Cartesian product followed by a <code>WHERE</code> condition)</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call,\n     contact\nWHERE call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#joins-with-join","title":"Joins (with <code>JOIN</code>)","text":""},{"location":"3.%20SQL/03a-jointures-contacts/#inner-join","title":"Inner Join","text":"<ul> <li>A more modern way to express a join in SQL<ul> <li>there are several types of joins, the most common type is an <code>INNER JOIN</code></li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         INNER JOIN contact\n                    ON call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03a-jointures-contacts/#natural-join","title":"Natural Join","text":"<ul> <li>Join on columns having the same names, using the = operator, and removing duplicate columns<ul> <li>note that the columns are in a different order</li> <li>it is not recommended (even discouraged) to use natural joins because the join condition is not specified and   could have consequences that are difficult to predict, especially in the long term if the database is modified   after the queries are written</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         NATURAL JOIN contact; \n</code></pre> <ul> <li>The phone call with ID 2 doesn\u2019t match any contact, so it\u2019s not listed in the results</li> <li>Every time we use = with <code>NULL</code>, it\u2019s always false, so call 3 is not in the results</li> </ul>"},{"location":"3.%20SQL/03a-jointures-contacts/#outer-joins","title":"Outer Joins","text":"<ul> <li>Use a left outer join to keep phone calls that don\u2019t match any contact<ul> <li>it\u2019s like an inner join, but rows on the left that don\u2019t match anything on the right will be kept</li> </ul> </li> </ul> <pre><code>SELECT *\nFROM call\n         LEFT OUTER JOIN contact\n                         ON call.contact_id = contact.contact_id;\n</code></pre> <ul> <li>Use a right outer join to keep contacts that don\u2019t match any phone call</li> </ul> <pre><code>SELECT *\nFROM call\n         RIGHT OUTER JOIN contact\n                          ON call.contact_id = contact.contact_id;\n</code></pre> <ul> <li>Or a full outer join to keep rows that don\u2019t match anything on either side</li> </ul> <pre><code>SELECT *\nFROM call\n         FULL OUTER JOIN contact\n                         ON call.contact_id = contact.contact_id;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/","title":"3b - Queries with More Than One Table (University)","text":"<pre><code>set\nsearch_path to university;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#cartesian-product","title":"Cartesian Product","text":"<p>1- Associate each row of the first table with each row of the second</p> <pre><code>select *\nfrom offering,\n     instructor;\n</code></pre>"},{"location":"3.%20SQL/03b-jointures-universit%C3%A9/#join","title":"Join","text":"<p>2- Like the Cartesian product, but keep only the interesting matching rows</p> <ul> <li>here, keep only the matching instructor IDs (column <code>iid</code>)</li> </ul> <pre><code>select *\nfrom offering,\n     instructor\nwhere offering.iid = instructor.iid;\n</code></pre> <p>3- More modern way to write the same query: use an <code>inner join</code></p> <pre><code>select *\nfrom offering\n         inner join instructor on offering.iid = instructor.iid;\n\nselect *\nfrom offering as o\n         inner join instructor as i on o.iid = i.iid;\n\n\nselect semester, year, section, i.name as instructor_name, c.name as course_name\nfrom offering as o\n    inner join instructor as i\non o.iid = i.iid\n    inner join course c on c.cid = o.cid;\n</code></pre> <p>4- (Almost) the same query with a <code>natural join</code></p> <ul> <li>differences: only one <code>iid</code> column, and columns in a different order</li> <li>not recommended: the behavior of a natural join can be unpredictable</li> </ul> <pre><code>select *\nfrom offering\n         natural join instructor;\n\n-- doesn't work\nselect *\nfrom offering\n         natural join instructor\n         natural join course;\n</code></pre> <p>5- Get the IDs and names of instructors teaching in the Winter 2020 semester</p> <ul> <li>we need to specify which of the two <code>iid</code> columns we want, even though they are equal</li> </ul> <pre><code>select instructor.iid, name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>6- Use <code>distinct</code> to remove duplicates</p> <pre><code>select distinct instructor.iid, name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>7- Get the codes and names of courses offered in the Winter 2020 semester</p> <pre><code>select distinct course.code, course.name\nfrom course\n         inner join offering on course.cid = offering.cid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>8- Get the codes and names of courses offered in the Winter 2020 semester, along with the names of the instructors</p> <ul> <li>first attempt: why doesn\u2019t this work?</li> </ul> <pre><code>select code, course.name, instructor.name\nfrom offering\n         natural join instructor\n         natural join course\nwhere semester = 'W'\n          and year = 2020;\n\n--- second attempt\nselect distinct code, course.name, instructor.name\nfrom offering\n         inner join instructor on offering.iid = instructor.iid\n         inner join course on offering.cid = course.cid\nwhere semester = 'W'\n          and year = 2020;\n</code></pre> <p>9- What about offerings without an instructor?</p> <ul> <li>The <code>iid</code> in offering can be null, but not the <code>cid</code></li> <li>if <code>iid</code> is null in offering, it won\u2019t match anything in instructor</li> <li>outer joins: keep rows that don\u2019t match</li> </ul> <pre><code>select o.oid, o.iid, i.iid\nfrom offering as o\n         inner join instructor as i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         left outer join instructor i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         right outer join instructor i on o.iid = i.iid;\n\nselect o.oid, o.iid, i.iid\nfrom offering o\n         full outer join instructor i on o.iid = i.iid;\n</code></pre> <p>10- Get the course IDs offered in 2020, along with the instructor names</p> <pre><code>select distinct cid, instructor.name as instructor_name\nfrom offering\n         left join instructor on offering.iid = instructor.iid\nwhere year = 2020;\n</code></pre> <p>11- Get the codes and names of courses offered in 2020, along with the semester and instructor names</p> <pre><code>select distinct code,\n                course.name     as course_name,\n                semester,\n                instructor.name as instructor_name\nfrom (offering left join instructor on offering.iid = instructor.iid)\n         right join course on offering.cid = course.cid\nwhere year = 2020;\n</code></pre> <p>12- Find offerings without an instructor</p> <pre><code>select *\nfrom offering\nwhere iid is null;\n</code></pre> <p>13- Find students not enrolled in any course</p> <pre><code>select s.*\nfrom student s\n         left join enrollment e on s.sid = e.sid\nwhere oid is null;\n</code></pre> <p>14- Find courses that have never been offered</p> <pre><code>select c.*\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere oid is null;\n</code></pre> <p>15- Find offerings in which no student is enrolled</p> <pre><code>select o.*\nfrom offering o\n         left join enrollment e on o.oid = e.oid\nwhere e.oid is null;\n</code></pre>"},{"location":"3.%20SQL/04a-groupes-contacts/","title":"4a - Grouping and Aggregates (Contacts)","text":"<pre><code>SET\nsearch_path TO contacts;\n</code></pre> <p>1- Count the number of rows in the <code>call</code> table</p> <pre><code>SELECT COUNT(*)\nFROM call;\n</code></pre> <p>2- Count the number of calls for each phone number in the <code>call</code> table, and rename the <code>count</code> column to something more appropriate.</p> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone;\n</code></pre> <p>3- Count the number of calls for each phone number in the <code>call</code> table, and sort the results by the largest number of calls first.</p> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone\nORDER BY 2 DESC;\n</code></pre> <p>4- Count the number of calls for each phone number in the <code>call</code> table, and keep only the phone numbers with more than one call.</p> <ul> <li>use <code>HAVING</code> with a condition</li> <li><code>HAVING</code> is similar to <code>WHERE</code>, but it is executed after the <code>GROUP BY</code>, while the <code>WHERE</code> is executed after the   <code>FROM</code>, but before the <code>GROUP BY</code></li> <li>even though <code>SELECT</code> is written first, it is actually executed after <code>HAVING</code>, but before <code>ORDER BY</code> (if present)</li> </ul> <pre><code>SELECT phone, COUNT(*) AS n_calls\nFROM call\nGROUP BY phone\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>5- We can group not only the rows of a table, but also any result set from the <code>FROM</code> part of the query</p> <ul> <li>this query calculates the number of calls for each contact (not for each phone number in <code>call</code>, but for each   <code>contact_id</code> in <code>contact</code>)</li> <li>note that contacts without any calls are listed with a count of 0 because we\u2019re using a left outer join, so contacts   not matching anything in <code>call</code>, in other words, contacts without associated calls, will be kept in the results</li> </ul> <pre><code>SELECT contact.contact_id, COUNT(call_id) AS n_calls\nFROM contact\n         LEFT OUTER JOIN call\n                         ON contact.contact_id = call.contact_id\nGROUP BY contact.contact_id\nORDER BY n_calls DESC;\n</code></pre>"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/","title":"4b - Grouping and Aggregates (University)","text":"<pre><code>set\nsearch_path to university;\n</code></pre> <p>1- Find the number of course offerings for each year</p> <pre><code>select year, count (oid)\nfrom offering\ngroup by year;\n</code></pre> <p>2- Same result because <code>oid</code> cannot be null</p> <pre><code>select year, count (*)\nfrom offering\ngroup by year;\n</code></pre> <p>3- Similar, but different results because of null values</p> <pre><code>select year, count (iid)\nfrom offering\ngroup by year;\n</code></pre> <p>4- Find the number of course offerings for each instructor</p> <pre><code>select iid, count(*)\nfrom offering\ngroup by iid;\n   ```\n\n5- Get the number of students enrolled in each course offering\n\n```sql\nselect oid, count(sid)\nfrom enrollment\ngroup by oid;\n</code></pre> <p>6- Get the number of students enrolled in each course offering</p> <ul> <li>with course codes, names, and sections</li> </ul> <pre><code>select e.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    inner join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by e.oid, code, name, section;\n</code></pre> <p>7- What about offerings without enrollments?</p> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\norder by n_students desc;\n</code></pre> <p>8- Get the number of students enrolled in each course offering</p> <ul> <li>with course codes, names, and sections, but only for course offerings with fewer than 3 enrollments</li> </ul> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\nhaving count (sid) &lt; 3;\n</code></pre> <p>9- Same thing, but with fewer than one enrollment</p> <pre><code>select o.oid, code, name, section, count (sid) as n_students\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\ngroup by o.oid, code, name, section\nhaving count (sid) &lt; 1;\n</code></pre> <pre><code>-- better answer\nselect o.oid, code, name, section\nfrom enrollment e\n    right join offering o\non e.oid = o.oid\n    inner join course c on o.cid = c.cid\nwhere e.oid is null;\n</code></pre>"},{"location":"3.%20SQL/04b-groupes-universit%C3%A9/#exercises","title":"Exercises","text":"<ol> <li>Get the number of course offerings for each instructor</li> <li>Get the number of course offerings for the instructor with ID 1, for each year</li> <li>Get the number of course offerings for each instructor for each year<ul> <li>what about instructors without any course offerings?</li> </ul> </li> <li>Get the number of course offerings for each instructor for each semester and each year<ul> <li>what about semesters without any course offerings?</li> <li>what about semesters without course offerings for certain instructors?<ul> <li>for example, many instructors teach only in fall and winter semesters, but not in summer semesters; should we   list these semesters without courses for each instructor with a count of 0?</li> </ul> </li> </ul> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/","title":"5 - Overview of Operations in SQL Queries","text":"<p>To begin understanding the basic operations of an SQL query, let\u2019s examine a simple projection using the <code>SELECT</code> and <code>FROM</code> clauses. These clauses are fundamental for extracting data from a relational database like PostgreSQL. We\u2019ll illustrate this with a store customer table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#creating-a-customer-table","title":"Creating a Customer Table","text":"<p>Let\u2019s imagine we have a table named <code>customers</code> that contains information about store customers. Here\u2019s how this table might be defined and populated with some example rows:</p> <pre><code>CREATE TABLE customers\n(\n    id                SERIAL PRIMARY KEY,\n    lastname          VARCHAR(50),\n    firstname         VARCHAR(50),\n    email             VARCHAR(100),\n    city              VARCHAR(50),\n    registration_date DATE\n);\n\nINSERT INTO customers (lastname, firstname, email, city, registration_date)\nVALUES ('Dupont', 'Jean', 'jean.dupont@example.com', 'Paris', '2023-01-15'),\n       ('Martin', 'Marie', 'marie.martin@example.com', 'Lyon', '2023-02-20'),\n       ('Durand', 'Paul', 'paul.durand@example.com', 'Marseille', '2023-03-10'),\n       ('Lefevre', 'Sophie', 'sophie.lefevre@example.com', 'Toulouse', '2023-04-05'),\n       ('Moreau', 'Pierre', 'pierre.moreau@example.com', 'Nice', '2023-05-18'),\n       ('Simon', 'Lucie', 'lucie.simon@example.com', 'Nantes', '2023-06-22'),\n       ('Laurent', 'Julie', 'julie.laurent@example.com', 'Bordeaux', '2023-07-30'),\n       ('Lemoine', 'Antoine', 'antoine.lemoine@example.com', 'Strasbourg', '2023-08-14'),\n       ('Roux', 'Claire', 'claire.roux@example.com', 'Lille', '2023-09-01'),\n       ('Petit', 'Nicolas', 'nicolas.petit@example.com', 'Rennes', '2023-10-10');\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-select-and-from","title":"Using <code>SELECT</code> and <code>FROM</code>","text":"<p>The <code>SELECT</code> clause is used to specify the columns you want to retrieve, while the <code>FROM</code> clause indicates the table from which this data comes. Here are some examples of SQL queries using these clauses:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-select-all-columns","title":"Example 1: Select All Columns","text":"<p>To retrieve all information from the <code>customers</code> table, you can use the asterisk (<code>*</code>) to indicate that you want all columns:</p> <pre><code>SELECT *\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-select-specific-columns","title":"Example 2: Select Specific Columns","text":"<p>If you only want certain columns, for example, the name and email of customers, you can specify these columns in the <code>SELECT</code> clause:</p> <pre><code>SELECT lastname, email\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-select-with-an-alias","title":"Example 3: Select with an Alias","text":"<p>You can also use aliases to rename columns in the result. This can be useful for making results more readable or to avoid name conflicts:</p> <pre><code>SELECT lastname AS CustomerName, email AS CustomerEmail\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary","title":"Summary","text":"<ul> <li><code>SELECT</code>: Specifies the columns to retrieve.</li> <li><code>FROM</code>: Indicates the table from which the data comes.</li> </ul> <p>These basic operations form the foundation of data manipulation in SQL. As you progress, you\u2019ll learn to use other clauses and functions to perform more complex operations, such as filtering with <code>WHERE</code>, sorting with <code>ORDER BY</code>, and much more.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-the-where-clause","title":"Using the <code>WHERE</code> Clause","text":"<p>The second fundamental operation in an SQL query is filtering data using the <code>WHERE</code> clause. This clause allows you to specify conditions that must be met for a row to be included in the query result. Let\u2019s look at some simple examples of filtering on our <code>customers</code> table.</p> <p>The <code>WHERE</code> clause is used to extract only records that meet a specific condition. Here are some examples illustrating its use:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-filter-by-city","title":"Example 1: Filter by City","text":"<p>Suppose we want to retrieve all customers who live in Paris. We\u2019ll use the <code>WHERE</code> clause to specify this condition:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-filter-by-last-name","title":"Example 2: Filter by Last Name","text":"<p>If we want to find all customers whose last name is \u201cDurand\u201d, we can write the following query:</p> <pre><code>SELECT *\nFROM customers\nWHERE lastname = 'Durand';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-filter-by-email","title":"Example 3: Filter by Email","text":"<p>To retrieve customers whose email address ends with \u201c@example.com\u201d, we can use the <code>LIKE</code> operator with a search pattern:</p> <pre><code>SELECT *\nFROM customers\nWHERE email LIKE '%@example.com';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-filter-by-multiple-conditions","title":"Example 4: Filter by Multiple Conditions","text":"<p>It\u2019s also possible to combine multiple conditions using the logical operators <code>AND</code> and <code>OR</code>. For example, to select customers who live in Lyon or Marseille, we\u2019ll use <code>OR</code>:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Lyon'\n   OR city = 'Marseille';\n</code></pre> <p>To select customers who live in Paris and whose last name is \u201cDupont\u201d, we\u2019ll use <code>AND</code>:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris'\n  AND lastname = 'Dupont';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-5-filter-by-numeric-conditions","title":"Example 5: Filter by Numeric Conditions","text":"<p>Although our <code>customers</code> table doesn\u2019t contain numeric data in this example, if it had a column like <code>age</code>, we could filter customers over 30 years old as follows:</p> <pre><code>SELECT *\nFROM customers\nWHERE age &gt; 30;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_1","title":"Summary","text":"<ul> <li><code>WHERE</code>: Used to filter rows based on specific conditions.</li> <li>Logical Operators: <code>AND</code>, <code>OR</code> to combine multiple conditions.</li> <li>Comparison Operators: <code>=</code>, <code>&gt;</code>, <code>=</code>, `` (not equal).</li> <li><code>LIKE</code>: Used for pattern searches in character strings.</li> </ul> <p>The <code>WHERE</code> clause is essential for extracting relevant and precise data from a database, based on the specific needs of the user or application.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-order-by","title":"Using <code>ORDER BY</code>","text":"<p>Sorting results in an SQL query is done using the <code>ORDER BY</code> clause. This clause allows you to specify the order in which rows should be returned, whether in ascending or descending order. You can sort results based on one or more columns.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-simple-sort-by-name","title":"Example 1: Simple Sort by Name","text":"<p>To sort results by customer name in ascending order (default), you can use the following query:</p> <pre><code>SELECT *\nFROM customers\nORDER BY lastname;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-sort-in-descending-order","title":"Example 2: Sort in Descending Order","text":"<p>To sort results by customer name in descending order, use the <code>DESC</code> keyword:</p> <pre><code>SELECT *\nFROM customers\nORDER BY lastname DESC;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-sort-by-multiple-columns","title":"Example 3: Sort by Multiple Columns","text":"<p>You can sort results by multiple columns. For example, to sort first by city in ascending order, then by name in descending order:</p> <pre><code>SELECT *\nFROM customers\nORDER BY city, lastname DESC;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-sort-with-a-where-clause","title":"Example 4: Sort with a <code>WHERE</code> Clause","text":"<p>You can combine <code>ORDER BY</code> with a <code>WHERE</code> clause to filter and sort results. For example, to get customers from Paris sorted by registration date:</p> <pre><code>SELECT *\nFROM customers\nWHERE city = 'Paris'\nORDER BY registration_date;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_2","title":"Summary","text":"<ul> <li><code>ORDER BY</code>: Used to specify the order of results.</li> <li>Ascending Order: By default, results are sorted in ascending order (<code>ASC</code>).</li> <li>Descending Order: Use <code>DESC</code> to sort in descending order.</li> <li>Multiple Sorting: You can sort by multiple columns by separating them with commas.</li> <li>Combination with <code>WHERE</code>: <code>ORDER BY</code> can be used after <code>WHERE</code> to sort filtered results.</li> </ul> <p>Sorting results is a powerful feature that allows you to present data in an organized and readable way, based on your specific needs.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#scalar-functions","title":"Scalar Functions","text":"<p>In SQL, functions can be used in the <code>SELECT</code> clause to perform various operations on data. These functions can be aggregate functions, which operate on a set of values to return a single one, or scalar functions, which operate on a single value and return a new value.</p> <p>Scalar functions are applied to each row individually. Here are some examples:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-using-upper-to-convert-to-uppercase","title":"Example 1: Using <code>UPPER</code> to Convert to Uppercase","text":"<p>Suppose we want to display last names in uppercase:</p> <pre><code>SELECT UPPER(lastname) AS UppercaseName, firstname\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-using-length-to-get-the-length-of-a-string","title":"Example 2: Using <code>LENGTH</code> to Get the Length of a String","text":"<p>To get the length of email addresses:</p> <pre><code>SELECT lastname, LENGTH(email) AS EmailLength\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-using-functions-on-dates","title":"Example 3: Using Functions on Dates","text":"<p>Imagine we\u2019ve added a <code>registration_date</code> column to our <code>customers</code> table and we want to extract the registration year:</p> <pre><code>ALTER TABLE customers\n    ADD COLUMN registration_date DATE;\n\nUPDATE customers\nSET registration_date = '2023-01-15'\nWHERE id = 1;\n-- (Add dates for other customers as needed)\n\nSELECT lastname, EXTRACT(YEAR FROM registration_date) AS RegistrationYear\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#aggregate-functions","title":"Aggregate Functions","text":"<p>Aggregate functions calculate a single value from a set of values. Here are some examples:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-using-count-to-count-the-number-of-customers","title":"Example 4: Using <code>COUNT</code> to Count the Number of Customers","text":"<p>To count the total number of customers in the table:</p> <pre><code>SELECT COUNT(*) AS NumberOfCustomers\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-5-using-avg-to-calculate-an-average","title":"Example 5: Using <code>AVG</code> to Calculate an Average","text":"<p>If we had an <code>age</code> column and we wanted to calculate the average age of customers:</p> <pre><code>ALTER TABLE customers\n    ADD COLUMN age INT;\n\nUPDATE customers\nSET age = 30\nWHERE id = 1;\n-- (Add ages for other customers as needed)\n\nSELECT AVG(age) AS AverageAge\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-6-using-min-and-max-to-find-extreme-values","title":"Example 6: Using <code>MIN</code> and <code>MAX</code> to Find Extreme Values","text":"<p>To find the minimum and maximum age:</p> <pre><code>SELECT MIN(age) AS MinimumAge, MAX(age) AS MaximumAge\nFROM customers;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_3","title":"Summary","text":"<ul> <li>Scalar Functions: Operate on each row individually (e.g., <code>UPPER</code>, <code>LENGTH</code>, <code>EXTRACT</code>).</li> <li>Aggregate Functions: Operate on a set of rows to return a single value (e.g., <code>COUNT</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code>).</li> <li>Date Functions: Used to manipulate and extract information from dates (e.g., <code>EXTRACT</code>).</li> </ul> <p>These functions enhance SQL\u2019s capabilities by allowing advanced transformations and calculations on data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#inner-join-inner-join","title":"Inner Join (<code>INNER JOIN</code>)","text":"<p>An inner join (INNER JOIN) is an operation that combines rows from two tables based on a common condition, typically a foreign key. It returns only rows for which there is a match in both tables.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#creating-the-orders-table","title":"Creating the Orders Table","text":"<p>To create an <code>orders</code> table that records orders placed by customers, we\u2019ll define a foreign key linking each order to a specific customer in the <code>customers</code> table. Here\u2019s how you can create this table, insert data, and represent it in Markdown format.</p> <pre><code>CREATE TABLE orders\n(\n    id          SERIAL PRIMARY KEY,\n    customer_id INT REFERENCES customers (id),\n    order_date  DATE,\n    amount      DECIMAL(10, 2)\n);\n\nINSERT INTO orders (customer_id, order_date, amount)\nVALUES (1, '2023-01-20', 150.00),\n       (1, '2023-02-15', 200.50),\n       (2, '2023-03-05', 300.75),\n       (3, '2023-03-15', 120.00),\n       (4, '2023-04-10', 450.00),\n       (4, '2023-04-15', 300.00),\n       (4, '2023-04-20', 250.00),\n       (6, '2023-06-30', 60.00),\n       (8, '2023-08-20', 250.00),\n       (9, '2023-09-10', 320.00);\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanations","title":"Explanations","text":"<ul> <li><code>customer_id</code>: This column is a foreign key that references the identifier (<code>id</code>) of the <code>customers</code> table. This   establishes a relationship between orders and customers, indicating which customer placed each order.</li> <li><code>order_date</code>: Records the date on which the order was placed.</li> <li><code>amount</code>: Indicates the total amount of the order.</li> </ul> <p>This structure allows modeling a one-to-many relationship between customers and orders, where a customer can place multiple orders.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-add-each-customers-email-to-the-order-list","title":"Example 1: Add Each Customer\u2019s Email to the Order List","text":"<p>To get a list of all orders with the associated customer\u2019s email, we use an inner join between the <code>orders</code> table and the <code>customers</code> table. The join condition is that the customer ID in the <code>orders</code> table (<code>customer_id</code>) must match the customer ID in the <code>customers</code> table (<code>id</code>).</p> <pre><code>SELECT orders.id AS OrderID, orders.order_date, orders.amount, customers.email\nFROM orders\n         INNER JOIN customers ON orders.customer_id = customers.id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation","title":"Explanation","text":"<ul> <li><code>SELECT</code>: Specifies the columns to include in the result. Here, we select the order ID, order date, amount, and   customer email.</li> <li><code>FROM orders</code>: Indicates that the main table for the join is <code>orders</code>.</li> <li><code>INNER JOIN customers ON orders.customer_id = customers.id</code>: Performs the inner join by linking orders to   customers using the foreign key <code>customer_id</code> of <code>orders</code> and the primary key <code>id</code> of <code>customers</code>.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-list-all-orders-from-jean-dupont","title":"Example 2: List All Orders from Jean Dupont","text":"<p>To list all orders placed by Jean Dupont, we also use an inner join, but with an additional condition to filter the results.</p> <pre><code>SELECT orders.id AS OrderID, orders.order_date, orders.amount\nFROM orders\n         INNER JOIN customers ON orders.customer_id = customers.id\nWHERE customers.lastname = 'Dupont'\n  AND customers.firstname = 'Jean';\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation_1","title":"Explanation","text":"<ul> <li><code>WHERE customers.lastname = 'Dupont' AND customers.firstname = 'Jean'</code>: Adds a condition to filter results to   include only orders placed by Jean Dupont.</li> <li>The join links the <code>orders</code> and <code>customers</code> tables in the same way as in the first example, but the <code>WHERE</code> restricts   results to a specific customer.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_4","title":"Summary","text":"<ul> <li>Inner Join: Combines rows from two tables for which there is a match in the specified columns.</li> <li>Usage: Often used to combine data spread across multiple tables, such as associating orders with customers.</li> <li>Syntax: <code>INNER JOIN</code> followed by the matching condition (<code>ON</code>).</li> </ul> <p>Inner joins are essential for fully exploiting relationships between tables in a relational database. They allow combining and analyzing data from different sources in a coherent and efficient manner.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#left-outer-join","title":"Left Outer Join","text":"<p>A left outer join (<code>LEFT JOIN</code>) is used to return all rows from the left table (in this case, <code>customers</code>), as well as matching rows from the right table (<code>orders</code>). If no match is found in the right table, the results will contain null values for the columns of the right table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#query-find-customers-who-have-no-orders","title":"Query: Find Customers Who Have No Orders","text":"<p>To identify customers who have not placed orders, we can use a left outer join and filter the results to include only rows for which there is no match in the <code>orders</code> table.</p> <pre><code>SELECT customers.id, customers.lastname, customers.firstname, customers.email\nFROM customers\n         LEFT JOIN orders ON customers.id = orders.customer_id\nWHERE orders.id IS NULL;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#explanation_2","title":"Explanation","text":"<ul> <li><code>LEFT JOIN</code>: Returns all rows from the <code>customers</code> table and matching rows from <code>orders</code>. If a customer has no   orders, the columns of <code>orders</code> will contain null values.</li> <li><code>WHERE orders.id IS NULL</code>: Filters the results to include only customers who have no orders, i.e., those for whom   <code>orders.id</code> is <code>NULL</code>.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#results-of-the-query","title":"Results of the Query","text":"<p>Here\u2019s the Markdown table representing the results of this query:</p> id Last Name First Name Email 5 Moreau Pierre pierre.moreau@example.com 7 Laurent Julie julie.laurent@example.com 10 Petit Nicolas nicolas.petit@example.com <p>These results show customers who have no orders recorded in the database. The left outer join is particularly useful for identifying records in one table that don\u2019t match records in another table.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#comparison-of-outer-joins","title":"Comparison of Outer Joins","text":""},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#1-left-join-left-join","title":"1. Left Join (<code>LEFT JOIN</code>)","text":"<ul> <li>Returns all rows from the left table (first mentioned table).</li> <li>Includes matching rows from the right table if they exist.</li> <li>If no match is found, the columns of the right table contain <code>NULL</code>.</li> </ul> <pre><code>SELECT *\nFROM customers\n         LEFT JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#2-right-join-right-join","title":"2. Right Join (<code>RIGHT JOIN</code>)","text":"<ul> <li>Returns all rows from the right table (second mentioned table).</li> <li>Includes matching rows from the left table if they exist.</li> <li>If no match is found, the columns of the left table contain NULL.</li> </ul> <pre><code>SELECT *\nFROM customers\n         RIGHT JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#3-full-outer-join-full-join","title":"3. Full Outer Join (<code>FULL JOIN</code>)","text":"<ul> <li>Combines the results of a left join and a right join.</li> <li>Returns all rows from both tables.</li> <li>If no match is found, the columns of the non-matching table contain NULL.</li> </ul> <pre><code>SELECT *\nFROM customers\n         FULL OUTER JOIN orders ON customers.id = orders.customer_id;\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#key-differences","title":"Key Differences","text":"<ol> <li> <p>LEFT JOIN: Useful for finding all records from the left table, even if they don\u2019t have a match in the right    table.</p> </li> <li> <p>RIGHT JOIN: Similar to LEFT JOIN, but focusing on the right table. Less commonly used, as you can usually get the    same result by reversing the order of the tables and using a LEFT JOIN.</p> </li> <li> <p>FULL JOIN: Combines the results of the two previous joins. Useful for seeing all data from both tables, whether    there\u2019s a match or not.</p> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-usage","title":"Example Usage","text":"<ul> <li>LEFT JOIN: Find all customers, whether they\u2019ve placed orders or not.</li> <li>RIGHT JOIN: Find all orders, even if they\u2019re associated with customers who no longer exist in the customers table.</li> <li>FULL JOIN: See all customers and all orders, identifying cases where there\u2019s no match in either table.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#important-note","title":"Important Note","text":"<p>The word <code>OUTER</code> can be added to each of these joins (<code>LEFT OUTER JOIN</code>, <code>RIGHT OUTER JOIN</code>, and <code>FULL OUTER JOIN</code>), but it\u2019s optional. Using <code>OUTER</code> doesn\u2019t change the behavior of the join; it simply makes explicit the fact that it\u2019s an outer join.</p> <p>These outer joins are essential for analyzing data that may not have perfect matches between tables, thus allowing a more complete view of the available data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-with-group-by","title":"Grouping with <code>GROUP BY</code>","text":"<p>Groupings in SQL, done with the <code>GROUP BY</code> clause, allow aggregating data based on specific criteria. Here\u2019s a detailed explanation with examples using our <code>customers</code> and <code>orders</code> tables.</p> <p>The <code>GROUP BY</code> clause is used to group rows that have the same values in specified columns. It\u2019s often used with aggregate functions like <code>COUNT()</code>, <code>SUM()</code>, <code>AVG()</code>, etc.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-1-number-of-orders-per-customer","title":"Example 1: Number of Orders per Customer","text":"<pre><code>SELECT customer_id, COUNT(*) AS number_of_orders\nFROM orders\nGROUP BY customer_id;\n</code></pre> <p>Which might give a result like:</p> customer_id number_of_orders 1 2 2 1 3 1 4 3 6 1 8 1 9 1 <p>The concept of grouping in SQL, particularly with the <code>GROUP BY</code> clause, is essential for understanding how data is aggregated and summarized. Here\u2019s a detailed explanation of the group formation process:</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-concept","title":"Grouping Concept","text":""},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#group-definition","title":"Group Definition","text":"<ul> <li>Grouping Key: Groups are defined by the distinct values of one or more columns specified in the <code>GROUP BY</code> clause.   In our example, the grouping key is <code>customer_id</code>. This means that each unique value of <code>customer_id</code> in the <code>orders</code>   table defines a distinct group.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#group-formation","title":"Group Formation","text":"<ol> <li> <p>Identification of Unique Values: The SQL engine identifies all unique values of the <code>customer_id</code> column in the    <code>orders</code> table. Each unique value becomes the basis for a group.</p> </li> <li> <p>Row Grouping: All rows (or records) in the table that share the same value of <code>customer_id</code> are grouped together.    This means that each group contains all orders associated with a particular customer.</p> </li> </ol>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#grouping-process","title":"Grouping Process","text":"<ul> <li>Data Extraction: The SQL engine goes through the <code>orders</code> table and extracts each row.</li> <li>Group Association: For each row, the engine checks the value of <code>customer_id</code> and associates it with the   corresponding group. If a group for this value of <code>customer_id</code> doesn\u2019t exist yet, it\u2019s created.</li> <li>Data Aggregation: Once rows are grouped, aggregate functions (like <code>COUNT</code>, <code>SUM</code>, etc.) are applied to each group   to calculate statistics or summaries.</li> </ul>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#visual-example","title":"Visual Example","text":"<p>Imagine a simplified table with the following <code>customer_id</code> values: 1, 1, 2, 3, 4, 4, 4.</p> <ul> <li>Groups Formed:<ul> <li>Group for <code>customer_id</code> 1: [1][1]</li> <li>Group for <code>customer_id</code> 2:</li> <li>Group for <code>customer_id</code> 3:</li> <li>Group for <code>customer_id</code> 4:</li> </ul> </li> </ul> <p>Each group contains all rows where <code>customer_id</code> has the same value. Aggregate functions are then applied to these groups to get results like the total number of orders per customer.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#usefulness-of-grouping","title":"Usefulness of Grouping","text":"<p>Grouping allows transforming raw data into meaningful information by summarizing and analyzing data according to specific criteria. This is particularly useful for generating reports, statistics, and analyses that require an overview of aggregated data.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-2-total-order-amount-by-city","title":"Example 2: Total Order Amount by City","text":"<pre><code>SELECT customers.city, SUM(orders.amount) AS total_amount\nFROM customers\n         JOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.city;\n</code></pre> <p>Possible result:</p> city total_amount Paris 350.50 Lyon 300.75 Marseille 120.00 Toulouse 1000.00 Nantes 60.00 Strasbourg 250.00 Lille 320.00"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#using-having","title":"Using <code>HAVING</code>","text":"<p>The <code>HAVING</code> clause is used with <code>GROUP BY</code> to filter group results. Unlike <code>WHERE</code> which filters individual rows before grouping, <code>HAVING</code> filters groups after grouping.</p>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-3-customers-with-more-than-one-order","title":"Example 3: Customers with More Than One Order","text":"<pre><code>SELECT customer_id, COUNT(*) AS number_of_orders\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Possible result:</p> customer_id number_of_orders 1 2 4 3"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#example-4-cities-with-a-total-order-amount-greater-than-500","title":"Example 4: Cities with a Total Order Amount Greater Than 500","text":"<pre><code>SELECT customers.city, SUM(orders.amount) AS total_amount\nFROM customers\n         JOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.city\nHAVING SUM(orders.amount) &gt; 500;\n</code></pre> <p>Possible result:</p> <pre><code>| city      | total_amount |\n|-----------|--------------|\n| Toulouse  | 1000.00      |\n</code></pre>"},{"location":"3.%20SQL/05-survol-op%C3%A9rations-SQL/#summary_5","title":"Summary","text":"<ul> <li><code>GROUP BY</code>: Groups rows having the same values in the specified columns.</li> <li>Used with aggregate functions (<code>COUNT()</code>, <code>SUM()</code>, <code>AVG()</code>, etc.) to calculate statistics on each group.</li> <li><code>HAVING</code>: Filters group results after grouping.</li> <li><code>WHERE</code> filters individual rows before grouping, while <code>HAVING</code> filters groups after grouping.</li> </ul> <p>Groupings are essential for data analysis, allowing to summarize and aggregate information meaningfully from large datasets.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/","title":"6 - Nested SQL Queries","text":"<ul> <li>A subquery is a query inside another query (or inside another subquery).</li> <li>We can have multiple levels of subqueries.</li> <li>Sometimes we refer to subqueries as inner queries and to the enclosing queries as outer queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#university-database","title":"University Database","text":"<pre><code>set\nsearch_path to university;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#uncorrelated-subqueries","title":"Uncorrelated Subqueries","text":"<ul> <li>Also called simple subqueries.</li> <li>Correlated subqueries will be covered later.</li> <li>Uncorrelated subqueries are independent of their outer (enclosing) queries.</li> <li>They can execute on their own.</li> <li>They don\u2019t depend on something defined in the outer queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#examples-with-2-uncorrelated-subqueries","title":"Examples: with 2 uncorrelated subqueries","text":"<p>1- Find students and instructors with an email address <code>@example.com</code></p> <pre><code>select name, email\nfrom student\nwhere email like '%@example.com'\nunion\nselect name, email\nfrom instructor\nwhere email like '%@example.com';\n</code></pre> <p>2- Check if there are students and instructors with the same email address</p> <pre><code>select email\nfrom student\nintersect\nselect email\nfrom instructor;\n</code></pre> <p>3- Find courses that have never been offered</p> <pre><code>select cid\nfrom course\nexcept\nselect cid\nfrom offering;\n\nselect c.cid\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere o.oid is null;\n</code></pre> <p>4- Find students not enrolled in any course</p> <pre><code>select sid\nfrom student\nexcept\nselect sid\nfrom enrollment;\n</code></pre> <p>5- Find course offerings in which no student is enrolled</p> <pre><code>select oid\nfrom offering\nexcept\nselect oid\nfrom enrollment;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#scalar-subqueries","title":"Scalar Subqueries","text":"<ul> <li>Scalar subqueries are the simplest type of subqueries.</li> <li>They always return exactly 1 row containing exactly 1 column.</li> <li>They are often (but not always) obtained by calculating an aggregate function.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#examples","title":"Examples","text":"<p>1- Find the number of students with an email address <code>@example.com</code></p> <pre><code>select count(sid) as n_students\nfrom student\nwhere email like '%@example.com';\n</code></pre> <p>2- Find courses that have been offered more often than the <code>DB</code> course</p> <ol> <li>Find the number of times <code>DB</code> has been offered</li> </ol> <pre><code>select count(o.cid)\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere c.code = 'DB';\n</code></pre> <ol> <li>Insert the previous result into the <code>HAVING</code> clause of a query calculating the number of times each course has been offered. It might be better to start with a fixed number (e.g., 3) instead of immediately inserting the first query into the second</li> </ol> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid, c.code\nhaving count(o.oid) &gt; 3;\n</code></pre> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid, c.code\nhaving count(o.oid) &gt; (select count(o.cid)\n                       from course c\n                                left join offering o on c.cid = o.cid\n                       where c.code = 'DB');\n</code></pre> <p>3- Find the average number of times each course has been offered. Start by finding the number of times each course has been offered, then take the average</p> <pre><code>select c.cid, c.code, count(o.oid) as n_offerings\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid;\n</code></pre> <pre><code>-- won't work\nselect c.cid, c.code, avg(count(o.oid)) as n_offerings\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid;\n</code></pre> <pre><code>select round(avg(n_offerings), 2) as avg_n_offerings\nfrom (select count(o.oid) as n_offerings\n      from course c\n               left join offering o on c.cid = o.cid\n      group by c.cid) as T;\n\nwith T as (select count(o.oid) as n_offerings\n           from course c\n                    left join offering o on c.cid = o.cid\n           group by c.cid)\nselect round(avg(n_offerings), 2) as avg_n_offerings\nfrom T;\n</code></pre> <p>4- Find courses that have been offered more often than the average (number of times each course has been offered)</p> <pre><code>select c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid\nhaving count(o.oid) &gt; (select avg(n_offerings) as avg_n_offerings\n                       from (select count(o.oid) as n_offerings\n                             from course c\n                                      left join offering o on c.cid = o.cid\n                             group by c.cid) as T);\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#with-query-format","title":"<code>with</code> Query Format","text":"<ul> <li>In order to more easily express queries with multiple levels of subqueries, we can use the <code>with ... select ...</code> query   style.</li> <li>We define (sort of) temporary tables before the main <code>select</code> query begins.</li> <li>Then we use the temporary tables in the main <code>select</code> query as if they were tables stored in the database.</li> </ul> <pre><code>with T2 as (select avg(n_offerings) as avg_n_offerings\n            from (select c.cid, c.code, count(o.oid) as n_offerings\n                  from course c\n                           left join offering o on c.cid = o.cid\n                  group by c.cid) as T1)\nselect c.cid, c.code\nfrom course c\n         left join offering o on c.cid = o.cid\ngroup by c.cid\nhaving count(o.oid) &gt; (select * from T2);\n\nwith n_offerings_per_course as (select c.cid,\n                                       c.code,\n                                       count(o.oid) as n_offerings\n                                from course c\n                                         left join offering o on c.cid = o.cid\n                                group by c.cid)\nselect cid, code\nfrom n_offerings_per_course\nwhere n_offerings &gt; (select avg(n_offerings) as avg_n_offerings\n                     from n_offerings_per_course);\n</code></pre> <ul> <li>Don\u2019t over-use the <code>with</code> syntax</li> <li>For example, don\u2019t rewrite this query</li> </ul> <pre><code>select name, email\nfrom student\nwhere email like '%@example.com'\nunion\nselect name, email\nfrom instructor\nwhere email like '%@example.com';\n</code></pre> <p>as</p> <pre><code>with students_example as (select name, email from student where email like '%@example.com'),\n     instructor_example as (select name, email from instructor where email like '%@example.com')\nselect *\nfrom students_example\nunion\nselect *\nfrom instructor_example;\n</code></pre> <ul> <li>Although this query is technically correct and equivalent to the original query, using <code>with</code> to define 2 temporary   tables is excessive here and actually reduces readability.</li> <li>Use <code>with</code> only when the subqueries are complicated or when there are multiple levels of subqueries.</li> <li>We can also use <code>with recursive</code> to write recursive queries.</li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#null-values-in-sql","title":"<code>NULL</code> Values in SQL","text":"<ul> <li>SQL uses a 3-valued logic instead of Boolean logic (a 2-valued logic).</li> <li>The 3 values are <code>true</code>, <code>false</code>, and <code>null</code> (or <code>T</code>, <code>F</code>, and <code>N</code> in the table below).</li> <li>The first 2 values have the usual meaning, while <code>null</code> can have different meanings:<ul> <li>unknown</li> <li>not applicable</li> <li>doesn\u2019t matter</li> </ul> </li> <li>Logical operators need to be updated to account for <code>null</code> values.</li> </ul> A B NOT A A OR B A AND B T T F T T T F F T F T N F T N F T T T F F F T F F F N T N F N T N T N N F N N F N N N N N"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#non-scalar-subqueries","title":"Non-Scalar Subqueries","text":"<ul> <li>If a (sub)query returns more than one row and/or more than one column, then it is not a scalar subquery.</li> <li>Attempting to use normal comparison or arithmetic operators with non-scalar subqueries will fail if there is more than   one row.</li> <li>Some DBMSs, like PostgreSQL, allow some operators to work with subqueries giving exactly 1 row but multiple columns.</li> <li>PostgreSQL is an ORDBMS, so it\u2019s more flexible with data types.</li> <li>It will see the single row with multiple columns as a single object with multiple fields.</li> <li>In general, we need to use special operators to deal with non-scalar subqueries:<ul> <li><code>IN</code>, <code>NOT IN</code>, <code>EXISTS</code>, <code>NOT EXISTS</code>, <code>ANY</code>, <code>ALL</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#in","title":"<code>IN</code>","text":"<ul> <li><code>expression IN (sub-query)</code><ul> <li>it\u2019s the same as \\(\\in\\) in mathematical notation (except that we need to handle <code>null</code> values)</li> <li>the subquery must return exactly 1 column</li> <li><code>true</code> if the expression is equal to 1 of the rows in the subquery results</li> <li><code>false</code> if the expression is not <code>null</code> and there are no <code>null</code> values in the subquery and the expression is not   equal to any row in the subquery</li> <li><code>null</code> if the expression is <code>null</code> or if the expression is not equal to any row in the subquery and there is at   least 1 <code>null</code> value in the subquery</li> </ul> </li> <li> <p>Because SQL uses 3-valued logic, evaluating <code>IN</code> is more complicated</p> </li> <li> <p>Remember that if we want to know if a column value is <code>null</code>, we cannot use the equality operator <code>=</code> as it will   always return <code>null</code></p> <ul> <li><code>null</code> means unknown in this case, so we don\u2019t know how to compare values to an unknown value</li> <li>So we need to use <code>is null</code> instead of <code>= null</code></li> </ul> </li> <li> <p>The <code>IN</code> operator compares values with <code>=</code>, so as soon as it compares with a <code>null</code>, it will evaluate to <code>null</code></p> <ul> <li>So if the expression is equal to <code>null</code>, <code>IN</code> will evaluate to <code>null</code></li> <li>If the expression is not <code>null</code>, then it will compare the expression with non-null values first in the subquery<ul> <li>if it finds a match, then the value of <code>IN</code> will be true</li> <li>if we don\u2019t find a match, then it will check if the subquery contains <code>null</code> values<ul> <li>if not, then we know with certainty that the expression is not in the subquery, so the value of <code>IN</code> will   be <code>false</code></li> <li>if there are <code>null</code> values, then we don\u2019t know with certainty if the expression is in the subquery because   we have unknown values (<code>null</code>), so the value of <code>IN</code> is <code>null</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>This example works as expected</p> </li> </ul> <pre><code>-- note that (1, 2, 3) is not really a subquery, but acts like a subquery\n-- it is used to simplify the example\nselect *\nfrom course\nwhere cid in (1, 2, 3);\n</code></pre> <pre><code>-- note that (2, 3, 4, null) is not really a subquery, but acts like a subquery\n-- it is used to simplify the example\nselect *\nfrom course\nwhere cid in (2, 3, 4, null);\n</code></pre> <ul> <li>This example is equivalent and shows how <code>IN</code> operators are evaluated internally</li> </ul> <pre><code>select *\nfrom course\nwhere cid = 2\n   or cid = 3\n   or cid = 4\n   or cid = null;\n</code></pre> <ul> <li>This works for courses with a <code>cid</code> value of 2, 3, or 4 because at least 1 of the comparisons will be true and we\u2019ll   get something like <code>T OR F OR F OR N</code>, which is true</li> <li>But for courses with a <code>cid</code> not included in the provided set, we\u2019ll get <code>null</code> because <code>F OR F OR F OR N</code> is <code>N</code></li> <li>This doesn\u2019t create a problem because rows with a <code>where</code> condition will be dropped</li> <li>But if we negate <code>IN</code> to get a <code>NOT IN</code> operator, we\u2019ll be in trouble</li> </ul> <pre><code>select *\nfrom course\nwhere cid not in (2, 3, 4, null);\n\nselect *\nfrom course\nwhere cid not in (select cid from offering);\n\nselect *\nfrom course\nexcept\nselect c.*\nfrom course c\n         inner join offering o on c.cid = o.cid;\n\nselect c.*\nfrom course c\n         left join offering o on c.cid = o.cid\nwhere o.oid is null;\n\nselect *\nfrom instructor\nwhere iid not in (select iid from offering);\n</code></pre> <ul> <li>We get nothing</li> <li>But the course with <code>cid = 1</code> is not in the subquery, so why don\u2019t we get it?</li> <li>It\u2019s because of the <code>null</code> value<ul> <li><code>1 in (2, 3, 4, null)</code> evaluates to <code>null</code></li> <li>and <code>1 not in (2, 3, 4, null)</code> evaluates to <code>not null</code>, which is <code>null</code></li> </ul> </li> <li>So <code>NOT IN</code> queries are dangerous because of <code>null</code> values</li> <li>The following query is correct because we know with certainty that <code>cid</code> in course cannot be <code>null</code><ul> <li>So we can find courses that have never been offered this way</li> </ul> </li> </ul> <pre><code>--insert into course(name, code, credits)\n--values ('Data Structures', 'DS', 3);\n-- delete from course where code = 'DS';\nselect *\nfrom course\nwhere cid not in (select cid from offering);\n</code></pre> <ul> <li>But trying to do something similar for instructors will create problems because <code>iid</code> in offering can be <code>null</code></li> <li>We need to explicitly exclude <code>null</code> values in the subquery for the query to return the correct results</li> </ul> <pre><code>--insert into instructor(name, email, department)\n--values ('John', 'john@bbb.com', 'ECE');\n-- delete from instructor where name = 'John';\nselect *\nfrom instructor\nwhere iid not in (select iid from offering);\n</code></pre> <pre><code>select *\nfrom instructor\nwhere iid not in (select iid\n                  from offering\n                  where iid is not null);\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#recommendation-dont-use-not-in","title":"Recommendation: don\u2019t use <code>NOT IN</code>","text":""},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#recommendation-use-a-left-join-instead","title":"Recommendation: use a <code>left join</code> instead","text":"<ul> <li>Not only does the left join (or outer joins in general) force you to think about <code>null</code> values (and handle them   correctly), but in terms of performance, left joins will generally be more efficient.</li> <li>Using left joins avoids dealing with SQL\u2019s 3-valued logic.</li> </ul> <pre><code>select i.*\nfrom instructor i\n         left join offering o on i.iid = o.iid\nwhere o.iid is null;\n</code></pre>"},{"location":"3.%20SQL/06-imbriqu%C3%A9es/#any-and-all","title":"<code>ANY</code> and <code>ALL</code>","text":"<ul> <li><code>ANY</code> and <code>ALL</code> are used as operator modifiers (usually comparison operators)<ul> <li><code>expression operator ANY (sub-query)</code><ul> <li><code>true</code> when there exists a row \\(r\\) in the subquery such that <code>expression operator r</code> is true</li> <li><code>false</code> when for all rows r in the subquery, <code>expression operator r</code> is false and there are no <code>null</code> values   in the subquery</li> <li><code>null</code> when for all rows r in the subquery, <code>expression operator r</code> is false and there is at least 1 <code>null</code>   value in the subquery</li> </ul> </li> <li><code>IN</code> is equivalent to <code>=ANY</code></li> <li><code>expression operator ALL (sub-query)</code><ul> <li><code>true</code> when for all rows \\(r\\) in the subquery, <code>expression operator r</code> is true</li> <li><code>false</code> when <code>expression operator r</code> is false for at least 1 row in the subquery</li> <li><code>null</code> when for all rows \\(r\\) in the subquery, <code>expression operator r</code> is not false and there is at least 1   <code>null</code> value in the subquery</li> </ul> </li> <li><code>NOT IN</code> is equivalent to <code>&lt;&gt; ALL</code></li> </ul> </li> </ul>"},{"location":"3.%20SQL/07-r%C3%A9cursives/","title":"7 - Recursive Queries","text":""},{"location":"3.%20SQL/07-r%C3%A9cursives/#postgresql-syntax","title":"PostgreSQL Syntax","text":"<ul> <li>Basic   syntax (https://www.postgresqltutorial.com/postgresql-recursive-query/):</li> </ul> <pre><code>WITH RECURSIVE cte_name AS (CTE_query_definition -- non-recursive term\n                            UNION [ ALL ] \n                            CTE_query_definition -- recursive term )\nSELECT *\nFROM cte_name;\n</code></pre> <ul> <li>CTE: common table expression</li> <li>Since recursive queries are (of course) recursive, we need a base case, called here a non-recursive term</li> <li>Then, we need one or more recursive terms</li> <li><code>with recursive</code> works, at the beginning, a bit like <code>with</code> queries (without <code>recursive</code>)</li> <li>It will first evaluate the non-recursive term to initialize the result set</li> <li>Then, it will start evaluating the recursive term multiple times, in a loop, until no new rows are added to the   results</li> <li>each time it evaluates the recursive term, it will try to add new rows to the result set</li> <li>the recursive term is correlated to the <code>cte_name</code></li> </ul>"},{"location":"3.%20SQL/07-r%C3%A9cursives/#example-on-the-blog-database","title":"Example on the Blog Database","text":"<p>![Blogpostt to find all replies to a given comment recursively</p> <ul> <li>we don\u2019t just want direct replies, but also all replies to replies</li> <li>First attempt to retrieve only direct replies:</li> </ul> <pre><code>set\nsearch_path to blog3;\nselect comment_id, contents, reply_to_id, user_id\nfrom comment\nwhere blogpost_id = 1\n  and reply_to_id is null;\n</code></pre> <ul> <li>To get replies to replies, we need to use the <code>with recursive</code> syntax described above:</li> </ul> <pre><code>with recursive replies as (select comment_id, contents, reply_to_id, user_id\n                           from comment\n                           where reply_to_id = 1\n                           union\n                           select comment.comment_id,\n                                  comment.contents,\n                                  comment.reply_to_id,\n                                  comment.user_id\n                           from comment\n                                    inner join replies\n                                               on replies.comment_id = comment.reply_to_id)\nselect *\nfrom replies;\n</code></pre> <ul> <li>If we need to include the original comment we\u2019re starting with in the result, we need a slightly different   non-recursive term</li> <li>use <code>comment_id = 1</code> instead of <code>reply_to_id = 1</code></li> <li>If we need to include comments starting from a blog post, we need a slightly different non-recursive term\u2026</li> <li>use <code>blogpost_id = 1</code> instead of <code>reply_to_id = 1</code></li> </ul> <pre><code>with recursive replies as (select comment_id, contents, reply_to_id, user_id\n                           from comment\n                           where blogpost_id = 1\n                           union\n                           select comment.comment_id,\n                                  comment.contents,\n                                  comment.reply_to_id,\n                                  comment.user_id\n                           from comment\n                                    inner join replies\n                                               on replies.comment_id = comment.reply_to_id)\nselect *\nfrom replies;\n</code></pre>"},{"location":"3.%20SQL/08-dates/","title":"8 - Using <code>date</code> and <code>timestamp</code>","text":"<p>Here is a guide on operations and functions for dates and timestamps in PostgreSQL.</p>"},{"location":"3.%20SQL/08-dates/#differences-between-date-and-timestamp","title":"Differences between <code>date</code> and <code>timestamp</code>","text":"<p>Here are the main differences between the <code>date</code> and <code>timestamp</code> types in PostgreSQL:</p> <ol> <li> <p>Stored content:</p> <ul> <li><code>date</code> stores only a date (year, month, day)</li> <li><code>timestamp</code> stores a date and time (year, month, day, hour, minute, second, and optionally fractions of a second)</li> </ul> </li> <li> <p>Storage size:</p> <ul> <li><code>date</code> occupies 4 bytes</li> <li><code>timestamp</code> occupies 8 bytes</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>date</code> has a precision of one day</li> <li><code>timestamp</code> has a precision of one microsecond</li> </ul> </li> <li> <p>Range of values:</p> <ul> <li><code>date</code>: from 4713 BC to 5874897 AD</li> <li><code>timestamp</code>: from 4713 BC to 294276 AD</li> </ul> </li> <li> <p>Temporal operations:</p> <ul> <li><code>date</code> allows basic operations on dates</li> <li><code>timestamp</code> allows more precise operations including hours, minutes, and seconds</li> </ul> </li> <li> <p>Time zone:</p> <ul> <li><code>date</code> does not include time zone information</li> <li><code>timestamp</code> may or may not include time zone information (depending on whether you use <code>timestamp with time zone</code>   or <code>timestamp without time zone</code>)</li> </ul> </li> <li> <p>Usage:</p> <ul> <li><code>date</code> is used when only the date is important (e.g., birth date)</li> <li><code>timestamp</code> is used when you need the precise date and time (e.g., transaction timestamp)</li> </ul> </li> </ol> <p>In general, <code>timestamp</code> offers more flexibility and precision, but <code>date</code> can be sufficient and more efficient in terms of storage if only the date is necessary.</p>"},{"location":"3.%20SQL/08-dates/#conversion","title":"Conversion","text":"<p>To convert a <code>timestamp</code> to a <code>date</code>, or vice-versa, you can cast from one to the other:</p> <pre><code>select (now()::date);\n-- now() gives the current timestamp\n</code></pre> now 2024-09-27 <pre><code>select (CURRENT_DATE::timestamp);\n-- CURRENT_DATE gives today's date\n</code></pre> current_date 2024-09-27 00:00:00.000000"},{"location":"3.%20SQL/08-dates/#simple-comparisons-with-dates-in-iso-format","title":"Simple comparisons with dates in ISO format","text":"<p>PostgreSQL natively supports the ISO 8601 date format (YYYY-MM-DD) for comparisons:</p> <ul> <li>Table <code>users</code></li> </ul> id name created 1 denis 2024-09-25 20:42:08.200074 3 bob 2023-08-09 12:12:00.000000 2 alice 2024-07-25 02:42:08.200074 <pre><code>select *\nfrom users\nwhere created &gt; '2024-09-15';\n</code></pre> id name created 1 denis 2024-09-25 20:42:08.200074 <pre><code>-- Select records between two dates\nselect *\nfrom users\nwhere created between '2023-01-01' and '2023-12-12';\n</code></pre> id name created 3 bob 2023-08-09 12:12:00.000000 <pre><code>-- Select records between two dates\nselect *\nfrom users\nwhere created between '2023-01-01' and '2023-08-09';\n</code></pre> id name created"},{"location":"3.%20SQL/08-dates/#common-date-functions","title":"Common date functions","text":""},{"location":"3.%20SQL/08-dates/#extract","title":"EXTRACT","text":"<p>Allows extracting a specific part of a date or timestamp.</p> <pre><code>select name, extract(year from created) as year\nfrom users;\n</code></pre> name year denis 2024 alice 2024 bob 2023 <pre><code>select name, extract(month from created) as month\nfrom users;\n</code></pre> name month denis 9 alice 7 bob 8"},{"location":"3.%20SQL/08-dates/#date_part","title":"DATE_PART","text":"<p>Similar to EXTRACT, allows obtaining a specific part of a date.</p> <pre><code>select name, date_part('year', created) as year\nfrom users;\n</code></pre> name year denis 2024 alice 2024 bob 2023"},{"location":"3.%20SQL/08-dates/#differences-between-extract-and-date_part","title":"Differences between <code>EXTRACT</code> and <code>DATE_PART</code>","text":"<p>Here are the main differences between the <code>EXTRACT()</code> and <code>DATE_PART()</code> functions in PostgreSQL:</p> <ol> <li> <p>Syntax:</p> <ul> <li><code>EXTRACT()</code> uses the syntax: <code>EXTRACT(field FROM source)</code></li> <li><code>DATE_PART()</code> uses the syntax: <code>DATE_PART('field', source)</code></li> </ul> </li> <li> <p>SQL Standard:</p> <ul> <li><code>EXTRACT()</code> conforms to the SQL standard</li> <li><code>DATE_PART()</code> is specific to PostgreSQL</li> </ul> </li> <li> <p>Return type:</p> <ul> <li><code>EXTRACT()</code> returns a numeric type since PostgreSQL 14</li> <li><code>DATE_PART()</code> always returns a double precision (float8)</li> </ul> </li> <li> <p>Performance:</p> <ul> <li>Before PostgreSQL 14, <code>EXTRACT()</code> was rewritten as <code>DATE_PART()</code> internally</li> <li>Since PostgreSQL 14, the implementations are different</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>EXTRACT()</code> can be more precise for certain calculations since PostgreSQL 14</li> <li><code>DATE_PART()</code> may lose precision in some cases due to the float type</li> </ul> </li> <li> <p>Usage:</p> <ul> <li><code>EXTRACT()</code> is generally preferred for SQL compatibility</li> <li><code>DATE_PART()</code> is still used out of habit or for compatibility with older versions</li> </ul> </li> </ol> <p>In practice, the two functions are very similar and interchangeable in most cases. The choice often depends on personal preferences or coding conventions. For better portability and precision, <code>EXTRACT()</code> is generally recommended.</p>"},{"location":"3.%20SQL/08-dates/#date_trunc","title":"DATE_TRUNC","text":"<p>Truncates a date to a specified precision.</p> <pre><code>select name, date_trunc('month', created)\nfrom users;\n</code></pre> name date_trunc denis 2024-09-01 00:00:00.000000 bob 2023-08-01 00:00:00.000000 alice 2024-07-01 00:00:00.000000"},{"location":"3.%20SQL/08-dates/#now-and-current_date","title":"<code>now</code> and <code>current_date</code>","text":"<ul> <li><code>now()</code>: Returns the current date and time with time zone.</li> <li><code>current_date</code>: Returns the current date.</li> </ul> <pre><code>select now();\n</code></pre> now 2024-09-25 21:12:05.032204 +00:00 <pre><code>select current_date;\n</code></pre> current_date 2024-09-25"},{"location":"3.%20SQL/08-dates/#differences-between-now-and-current_date","title":"Differences between <code>now()</code> and <code>current_date</code>","text":"<ol> <li> <p>Return type:</p> <ul> <li><code>now()</code> returns a timestamp with time zone (date and time with time zone)</li> <li><code>current_date</code> returns only a date (without time or time zone)</li> </ul> </li> <li> <p>Precision:</p> <ul> <li><code>now()</code> includes hour, minutes, seconds, and microseconds</li> <li><code>current_date</code> returns only the date (year, month, day)</li> </ul> </li> <li> <p>Usage in transactions:</p> <ul> <li><code>now()</code> returns the same value throughout a transaction</li> <li><code>current_date</code> can change if the transaction spans midnight</li> </ul> </li> <li> <p>Performance:</p> <ul> <li><code>current_date</code> is generally faster because it only processes the date</li> </ul> </li> <li> <p>Behavior with time zones:</p> <ul> <li><code>now()</code> takes into account the session\u2019s time zone</li> <li><code>current_date</code> always returns the server\u2019s local date</li> </ul> </li> <li> <p>Flexibility:</p> <ul> <li><code>now()</code> can be easily converted to other temporal types</li> <li><code>current_date</code> is limited to operations on dates</li> </ul> </li> <li> <p>Consistency:</p> <ul> <li><code>now()</code> remains constant in a transaction, useful for data consistency</li> <li><code>current_date</code> can change, always reflecting the current date</li> </ul> </li> </ol> <p>In summary, <code>now()</code> offers more precision and flexibility, while <code>current_date</code> is simpler and faster when only the date is needed.</p>"},{"location":"3.%20SQL/08-dates/#operations-with-interval","title":"Operations with <code>interval</code>","text":"<p>Using <code>interval</code> allows performing calculations on dates:</p> <pre><code>-- Add 1 month to the current date\nselect current_date + interval '1 month';\n</code></pre> ?column? 2024-10-25 00:00:00.000000 <pre><code>-- Subtract 2 weeks from a specific date\nselect date '2023-01-15' - interval '2 weeks';\n</code></pre> <pre><code>-- users created in the last month\nselect name, users.created\nfrom users\nwhere created &gt; current_date - interval '1 month';\n</code></pre> name created denis 2024-09-25 20:42:08.200074"},{"location":"3.%20SQL/08-dates/#advanced-examples","title":"Advanced examples","text":""},{"location":"3.%20SQL/08-dates/#calculate-age","title":"Calculate age","text":"<pre><code>select name, age(created)\nfrom users;\n-- Returns the interval between the specified date and the current date\n</code></pre> name age denis 0 years 0 mons 0 days -20 hours -42 mins -8.200074 secs bob 1 years 1 mons 15 days 11 hours 48 mins 0.0 secs alice 0 years 1 mons 30 days 21 hours 17 mins 51.799926 secs"},{"location":"3.%20SQL/08-dates/#convert-a-string-to-a-date","title":"Convert a string to a date","text":"<pre><code>select to_date('2023-09-21', 'yyyy-mm-dd');\n-- Converts the string to a date\n</code></pre>"},{"location":"3.%20SQL/08-dates/#format-a-date","title":"Format a date","text":"<pre><code>select to_char(current_date, 'DD/MM/YYYY');\n-- Formats the current date in DD/MM/YYYY format\n</code></pre> to_char 25/09/2024 <p>These examples cover the most common operations on dates and timestamps in PostgreSQL. Remember that PostgreSQL offers many other functions and capabilities for manipulating dates and times according to your specific needs.</p>"},{"location":"3.%20SQL/08-dates/#date-operations","title":"Date operations","text":"<ol> <li> <p>Date subtraction:</p> <ul> <li>You can subtract two dates to get an interval.</li> <li>Example: <code>date '2023-09-21' - date '2023-01-01'</code> will return an interval representing the difference between these   two dates.</li> </ul> </li> <li> <p>Addition/Subtraction with an interval:</p> <ul> <li>You can add or subtract an interval to a date.</li> <li>Example: <code>date '2023-09-21' + interval '1 month'</code> will add one month to the specified date.</li> </ul> </li> </ol>"},{"location":"3.%20SQL/08-dates/#timestamp-operations","title":"Timestamp operations","text":"<ol> <li> <p>Timestamp subtraction:</p> <ul> <li>Subtracting two timestamps returns an interval.</li> <li>Example: <code>timestamp '2023-09-21 10:00:00' - timestamp '2023-09-20 09:00:00'</code> will give the interval between these   two moments.</li> </ul> </li> <li> <p>Addition/Subtraction with an interval:</p> <ul> <li>As with dates, you can add or subtract intervals to timestamps.</li> <li>Example: <code>timestamp '2023-09-21 10:00:00' - interval '2 hours'</code> will subtract 2 hours from the timestamp.</li> </ul> </li> </ol>"},{"location":"3.%20SQL/08-dates/#important-points-to-note","title":"Important points to note","text":"<ol> <li> <p>Precision: Operations on timestamps are more precise because they take into account hours, minutes, and seconds.</p> </li> <li> <p>Time zones: For <code>timestamp with time zone</code>, PostgreSQL automatically handles time zone adjustments during operations.</p> </li> <li> <p>Complex intervals: You can use complex intervals like <code>interval '1 year 2 months 3 days'</code> for more elaborate    calculations.</p> </li> <li> <p>AGE() function: To calculate the difference between two dates or timestamps in a more readable way, you can use the    <code>age()</code> function.</p> </li> </ol> <p>These operations are very useful for performing temporal calculations in your queries, such as finding the duration between two events or calculating future or past dates based on a reference date.</p>"},{"location":"3.%20SQL/08-dates/#converting-an-interval-to-a-number-of-hours-float","title":"Converting an interval to a number of hours (float)","text":"<p>The most common method for converting an interval to a number is to transform it into seconds, then divide it to get the desired unit. To get a number of hours as a float, you can use the EXTRACT function with the \u2018epoch\u2019 unit:</p> <pre><code>select extract(epoch from interval '4 hours 30 minutes') / 3600.0 as hours;\n</code></pre> <p>This query will return 4.5, representing 4 hours and 30 minutes in decimal format.</p>"},{"location":"3.%20SQL/08-dates/#conversion-to-numeric","title":"Conversion to numeric","text":"<p>For a conversion to numeric type, which offers arbitrary precision, you can use a similar approach:</p> <pre><code>select cast(extract(epoch from interval '4 hours 30 minutes') / 3600.0 as numeric(10, 2)) as hours;\n</code></pre> <p>This query will convert the interval to a numeric number with 2 decimal places.</p>"},{"location":"3.%20SQL/08-dates/#important-points-to-note_1","title":"Important points to note","text":"<ol> <li> <p>Precision: Converting an interval to a number can lead to a loss of precision, especially for intervals including    years or months, as these units don\u2019t have a fixed duration in seconds.</p> </li> <li> <p>Variable units: Years and months are treated specially in PostgreSQL intervals. For example, \u20181 year\u2019 is not always    equal to 365 days, which can lead to unexpected results during conversion.</p> </li> <li> <p>Choice of unit: You can adjust the divisor (3600.0 in the examples above) to get other units. For example, use    86400.0 to get days, or 60.0 for minutes.</p> </li> <li> <p><code>to_char()</code> function: For more complex formatting needs, you can use the to_char() function which allows formatting    various data types, including intervals.</p> </li> </ol> <p>In conclusion, although PostgreSQL does not provide a direct conversion of an interval to float or numeric, it is possible to perform this conversion using the EXTRACT function with the \u2018epoch\u2019 unit, followed by a division and possibly a CAST if necessary.</p>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/","title":"Mod\u00e9lisation Entit\u00e9-Association","text":"<ul> <li>Mod\u00e8le de donn\u00e9es relationnel (ou mod\u00e8le relationnel)</li> <li>Mod\u00e8le Entit\u00e9-Association (ou Mod\u00e8le EA)</li> <li>Exemples</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#modele-relationnel","title":"Mod\u00e8le Relationnel","text":"<ul> <li>Relation (table) : table \u00e0 deux dimensions, ensemble (et non liste) de   tuples</li> <li>Attributs : colonnes de la table, champs</li> <li>Sch\u00e9ma : <code>Movies(title, year, length, filmType)</code></li> <li>Tuples : lignes dans la table, enregistrements</li> <li>Domaines : types</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#exemple-de-table-base-de-donnees-monde","title":"Exemple de Table (Base de Donn\u00e9es <code>Monde</code>)","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#table-country-donnees-dexemple-triees-par-nom-de-pays","title":"Table : country (donn\u00e9es d\u2019exemple, tri\u00e9es par nom de pays)","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#terminologie","title":"Terminologie","text":"<ul> <li>Entit\u00e9 : Quelque chose d\u2019int\u00e9r\u00eat pour la communaut\u00e9 des utilisateurs de la   base de donn\u00e9es.<ul> <li>clients, pi\u00e8ces, localisations g\u00e9ographiques</li> </ul> </li> <li>Colonne : Un \u00e9l\u00e9ment de donn\u00e9es individuel stock\u00e9 dans une table.</li> <li>Ligne : Un ensemble de colonnes qui, ensemble, d\u00e9crivent compl\u00e8tement une   entit\u00e9 ou une action sur une entit\u00e9. Aussi appel\u00e9 un enregistrement.</li> <li>Table : Un ensemble de lignes, conserv\u00e9es soit en m\u00e9moire (non   persistante) soit sur un stockage permanent (persistant).</li> <li>Ensemble de r\u00e9sultats : Un autre nom pour une table non persistante,   g\u00e9n\u00e9ralement le r\u00e9sultat d\u2019une requ\u00eate SQL.</li> <li>Cl\u00e9 primaire : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es comme   identifiant unique pour chaque ligne d\u2019une table.</li> <li>Cl\u00e9 \u00e9trang\u00e8re : Une ou plusieurs colonnes pouvant \u00eatre utilis\u00e9es ensemble   pour identifier une ligne unique dans une autre table.</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#etapes-pour-creer-une-nouvelle-base-de-donnees","title":"\u00c9tapes pour cr\u00e9er une nouvelle base de donn\u00e9es","text":"<ol> <li> <p>Mod\u00e8les Conceptuels et Logiques : mod\u00e9liser (ou concevoir) la base de    donn\u00e9es au niveau conceptuel et logique</p> <ul> <li>nous pouvons utiliser la notation traditionnelle ERD, ou</li> <li>la notation UML, ou</li> <li>d\u2019autres notations notation.md</li> <li>le mod\u00e8le conceptuel est tr\u00e8s g\u00e9n\u00e9ral, comme une premi\u00e8re \u00e9bauche, se   concentrant uniquement sur les entit\u00e9s et les associations</li> <li>le mod\u00e8le logique ajoute des types de donn\u00e9es et des contraintes au   mod\u00e8le conceptuel</li> </ul> </li> <li> <p>Mod\u00e8le de Donn\u00e9es Relationnel, aussi appel\u00e9 Mod\u00e8le Physique :    convertir le mod\u00e8le logique en mod\u00e8le de donn\u00e9es relationnel</p> <ul> <li>nous pourrions utiliser d\u2019autres mod\u00e8les de donn\u00e9es, tels que le mod\u00e8le   objet-relationnel ou d\u2019autres mod\u00e8les non relationnels (OO, NoSQL, \u2026)</li> <li>le mod\u00e8le relationnel est le mod\u00e8le le plus courant, et il ne peut pas   \u00eatre ignor\u00e9 lors de l\u2019apprentissage des bases de donn\u00e9es</li> </ul> </li> <li> <p>Cr\u00e9ation d\u2019Instance de Base de Donn\u00e9es : g\u00e9n\u00e9rer les instructions SQL    n\u00e9cessaires <code>CREATE TABLE</code> et autres pour cr\u00e9er une instance de base de    donn\u00e9es, et la remplir avec des donn\u00e9es</p> </li> </ol> <ul> <li>Une fois la base de donn\u00e9es cr\u00e9\u00e9e, vous pouvez commencer \u00e0 l\u2019utiliser (   instructions <code>SELECT</code>, mises \u00e0 jour de donn\u00e9es, \u2026)</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#modele-entite-association-ea","title":"Mod\u00e8le Entit\u00e9-Association (EA)","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#notation-traditionnelle","title":"Notation Traditionnelle","text":"<ul> <li>Ensembles d\u2019entit\u00e9s : rectangles</li> <li>Ensembles de associations : losanges</li> <li>Attributs : ovales</li> <li>Fl\u00e8ches pour connecter les ensembles de associations aux ensembles   d\u2019entit\u00e9s :<ul> <li>triangle noir plein : au plus 1</li> <li>triangle rond ouvert ou triangle transparent : exactement 1</li> <li>pas de fl\u00e8ches : plusieurs</li> </ul> </li> <li>Cl\u00e9s primaires : noms d\u2019attributs soulign\u00e9s</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#notation-uml","title":"Notation UML","text":"<p>notation.md</p> <ul> <li>Entit\u00e9s : rectangles</li> <li>Associations : lignes entre les entit\u00e9s, \u00e9ventuellement avec des \u00e9tiquettes   et des fl\u00e8ches directionnelles \u00e0 c\u00f4t\u00e9 des \u00e9tiquettes</li> <li>Attributs : dans les rectangles des entit\u00e9s, sous les noms des entit\u00e9s</li> <li>Cardinalit\u00e9s pour connecter les associations aux entit\u00e9s :<ul> <li>au plus 1 : <code>0..1</code></li> <li>exactement 1 : <code>1</code> ou <code>1..1</code></li> <li>plusieurs : <code>*</code></li> <li>au moins 1 : <code>1..*</code></li> </ul> </li> <li>Cl\u00e9s primaires : attributs avec la contrainte <code>&lt;&lt;pk&gt;&gt;</code></li> <li>Cl\u00e9s \u00e9trang\u00e8res (dans les diagrammes physiques uniquement) : attributs   avec la contrainte <code>&lt;&lt;fk&gt;&gt;</code></li> <li>Contrainte de non-nullit\u00e9 : cercle avant le nom de l\u2019attribut</li> </ul>"},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#base-de-donnees-de-contacts","title":"Base de Donn\u00e9es de Contacts","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#notation-traditionnelle_1","title":"Notation Traditionnelle","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#autre-notation-traditionnelle","title":"Autre Notation Traditionnelle","text":""},{"location":"4.%20DB%20Design/01-mod%C3%A9lisation-EA/#notation-uml_1","title":"Notation UML","text":""},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/","title":"Les Entit\u00e9s Faibles","text":""},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#definition","title":"D\u00e9finition","text":"<p>Dans le mod\u00e8le entit\u00e9-association (E-A), une entit\u00e9 faible est une entit\u00e9 qui ne peut pas \u00eatre identifi\u00e9e de mani\u00e8re unique par ses propres attributs seuls. Elle d\u00e9pend d\u2019une autre entit\u00e9, appel\u00e9e entit\u00e9 forte, pour son identification. Une entit\u00e9 faible est souvent utilis\u00e9e pour repr\u00e9senter des objets qui n\u2019ont pas de signification ind\u00e9pendante sans leur entit\u00e9 forte associ\u00e9e.</p>"},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#caracteristiques-des-entites-faibles","title":"Caract\u00e9ristiques des Entit\u00e9s Faibles","text":"<ol> <li>D\u00e9pendance d\u2019Existence : Une entit\u00e9 faible ne peut pas exister sans son    entit\u00e9 forte correspondante.</li> <li>Cl\u00e9 Partielle : L\u2019identification d\u2019une entit\u00e9 faible n\u00e9cessite une cl\u00e9    partielle (un ensemble d\u2019attributs propres \u00e0 l\u2019entit\u00e9 faible) en combinaison    avec la cl\u00e9 primaire de l\u2019entit\u00e9 forte.</li> <li>Relation d\u2019Identification : Une relation sp\u00e9ciale, souvent appel\u00e9e    relation d\u2019identification, relie l\u2019entit\u00e9 faible \u00e0 son entit\u00e9 forte.</li> </ol>"},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#exemple","title":"Exemple","text":"<p>Consid\u00e9rons une base de donn\u00e9es pour une biblioth\u00e8que. Nous avons deux entit\u00e9s : Biblioth\u00e8que et Livre.</p> <ul> <li>Biblioth\u00e8que (entit\u00e9 forte) : Identifi\u00e9e par un attribut unique,   comme <code>ID_Biblioth\u00e8que</code>.</li> <li>Livre (entit\u00e9 faible) : Identifi\u00e9 par une combinaison de <code>ID_Biblioth\u00e8que</code>   et <code>Num\u00e9ro_Livre</code>. Un livre n\u2019a pas de signification sans la biblioth\u00e8que \u00e0   laquelle il appartient.</li> </ul>"},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#comparaison-avec-la-conception-orientee-objet-oo-en-uml","title":"Comparaison avec la Conception Orient\u00e9e Objet (OO) en UML","text":"<p>En conception orient\u00e9e objet avec UML (Unified Modeling Language), les concepts d\u2019entit\u00e9s faibles et fortes peuvent \u00eatre compar\u00e9s aux relations de composition et d\u2019agr\u00e9gation.</p> <ul> <li>Composition : Similaire aux entit\u00e9s faibles, une classe composante ne peut   pas exister ind\u00e9pendamment de la classe composite. Par exemple, une   classe <code>Page</code> peut \u00eatre une composante d\u2019une classe <code>Livre</code>, et une page n\u2019a   pas de sens sans le livre auquel elle appartient.</li> <li>Agr\u00e9gation : Contrairement aux entit\u00e9s faibles, une classe agr\u00e9g\u00e9e peut   exister ind\u00e9pendamment de la classe agr\u00e9gante. Par exemple, une   classe <code>Auteur</code> peut \u00eatre associ\u00e9e \u00e0 plusieurs <code>Livres</code>, mais elle peut   exister ind\u00e9pendamment de ces livres.</li> </ul>"},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#illustration-uml","title":"Illustration UML","text":"<p>En UML, une composition est repr\u00e9sent\u00e9e par un losange rempli \u00e0 l\u2019extr\u00e9mit\u00e9 de l\u2019association, tandis qu\u2019une agr\u00e9gation est repr\u00e9sent\u00e9e par un losange vide.</p> <ul> <li>Composition :</li> </ul> Code <pre><code>@startuml\nLivre *-- Page\n@enduml\n</code></pre> <p></p> <ul> <li>Agr\u00e9gation :</li> </ul> Code <pre><code>@startuml\nAuteur o-- Livre\n@enduml\n</code></pre> <p></p>"},{"location":"4.%20DB%20Design/01b-enit%C3%A9s-faibles/#conclusion","title":"Conclusion","text":"<p>Les entit\u00e9s faibles sont un concept crucial dans le mod\u00e8le entit\u00e9-association pour mod\u00e9liser des objets d\u00e9pendants d\u2019autres objets pour leur identification. En comparaison, la conception orient\u00e9e objet utilise des relations de composition pour repr\u00e9senter des d\u00e9pendances similaires, mais permet \u00e9galement des relations plus l\u00e2ches avec l\u2019agr\u00e9gation. Comprendre ces concepts est essentiel pour concevoir des bases de donn\u00e9es relationnelles robustes et bien structur\u00e9es.</p> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"4.%20DB%20Design/02-notation/","title":"Diff\u00e9rentes notations pour les DEA","text":""},{"location":"4.%20DB%20Design/02-notation/#notation-traditionnelle-du-diagramme-entite-association","title":"Notation traditionnelle du diagramme entit\u00e9-association","text":"<p>Remarque : il est difficile d\u2019inclure des losanges pour les associations avec PlantUML, mais nous pouvons nommer les associations avec une \u00e9tiquette. Les \u00e9tiquettes ne sont pas utilis\u00e9es dans le premier diagramme en raison des bo\u00eetes de notes proches des associations. Le deuxi\u00e8me diagramme montre les \u00e9tiquettes des associations au lieu des bo\u00eetes de notes.</p> <p>Nous incluons g\u00e9n\u00e9ralement des bo\u00eetes de notes uniquement dans certains cas, pas sur toutes les associations. Il est souvent recommand\u00e9 de nommer les associations pour clarifier leur objectif ou leur signification, non seulement en utilisant la notation traditionnelle ERD, mais aussi avec d\u2019autres notations.</p>"},{"location":"4.%20DB%20Design/02-notation/#diagramme-avec-etiquettes","title":"Diagramme avec \u00e9tiquettes","text":"Code <pre><code>@startuml\n\nT1 -- T2\n\nnote on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2\n\nT2 --&gt; T3\n\nnote on link: plusieurs-\u00e0-un\\nentre T2 et T3\n\nT3 --|&gt; T4\n\nnote on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4\n\nT2 &lt;-&gt; T5\n\nnote on link: un-\u00e0-un\\nentre T2 et T5\n\nT5 &lt;|--|&gt; T6\n\nnote on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6\n\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/02-notation/#diagramme-sans-etiquettes","title":"Diagramme sans \u00e9tiquettes","text":"<p>Nous pouvons inclure <code>&lt;</code> ou <code>&gt;</code> dans les \u00e9tiquettes pour aider \u00e0 lire l\u2019association plus facilement. Ce n\u2019est pas tr\u00e8s utile dans cet exemple g\u00e9n\u00e9rique, mais ce sera utile dans les exemples sp\u00e9cifiques.</p> Code <pre><code>@startuml\n\nT1 -- T2: rel_1\n\nT2 --&gt; T3: rel_2 &gt;\n\nT3 --|&gt; T4: rel_3 &gt;\n\nT2 &lt;-&gt; T5: &lt; rel_4\n\nT5 &lt;|--|&gt; T6: rel_5\n\n@enduml\n</code></pre> <p></p>"},{"location":"4.%20DB%20Design/02-notation/#utilisation-des-cardinalites-ou-multiplicites-a-la-place","title":"Utilisation des cardinalit\u00e9s (ou multiplicit\u00e9s) \u00e0 la place","text":"<p>Remarques :</p> <ul> <li> <p><code>*</code> peut \u00eatre remplac\u00e9 par <code>n</code>, ou parfois <code>m</code>.</p> </li> <li> <p>C\u2019est la notation pr\u00e9f\u00e9r\u00e9e, avec des \u00e9tiquettes ajout\u00e9es sur les associations   si n\u00e9cessaire.</p> </li> </ul> Code <pre><code>@startuml\n\nT1 \"*\" -- \"*\" T2\n\nnote on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2\n\nT2 \"*\" -- \"0..1\" T3\n\nnote on link: plusieurs-\u00e0-un\\nentre T2 et T3\n\nT3 \"*\" -- \"1\" T4\n\nnote on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4\n\nT2 \"0..1\" - \"0..1\" T5\n\nnote on link: un-\u00e0-un\\nentre T2 et T5\n\nT5 \"1\" -- \"1\" T6\n\nnote on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6\n\nT3 \"1..*\" - \"1..*\" T6\n\nnote on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6\n\n@enduml\n</code></pre> <p></p>"},{"location":"4.%20DB%20Design/02-notation/#notation-en-pied-de-corbeau","title":"Notation en pied-de-corbeau","text":"Code <pre><code>@startuml\n\nT1 }o--o{ T2\n\nnote on link: plusieurs-\u00e0-plusieurs\\nentre T1 et T2\n\nT2 }o--o| T3\n\nnote on link: plusieurs-\u00e0-un\\nentre T2 et T3\n\nT3 }o--|| T4\n\nnote on link: plusieurs-\u00e0-exactement-un\\nentre T3 et T4\n\nT2 |o-o| T5\n\nnote on link: un-\u00e0-un\\nentre T2 et T5\n\nT5 ||--|| T6\n\nnote on link: exactement-un-\u00e0-exactement-un\\nentre T5 et T6\n\nT3 }|-|{ T6\n\nnote on link: au-moins-un-\u00e0-au-moins-un\\nentre T3 et T6\n\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/02-notation/#differents-types-de-diagrammes-ea-avec-plantuml","title":"Diff\u00e9rents types de diagrammes EA avec PlantUML","text":"<ul> <li>Il existe diff\u00e9rents types de DEA :<ul> <li>conceptuel</li> <li>logique</li> <li>physique</li> </ul> </li> <li>Les mod\u00e8les conceptuels et logiques ne contiennent pas de cl\u00e9s \u00e9trang\u00e8res.   Il y a des associations, qui seront \u00e9ventuellement converties en cl\u00e9s   \u00e9trang\u00e8res, et peut-\u00eatre en tables, \u00e0 une \u00e9tape ult\u00e9rieure, g\u00e9n\u00e9ralement dans   les mod\u00e8les physiques.</li> <li>Les mod\u00e8les conceptuels sont tr\u00e8s basiques, sans types de donn\u00e9es ni   contraintes.</li> <li>Les types de donn\u00e9es et les contraintes sont g\u00e9n\u00e9ralement ajout\u00e9s aux mod\u00e8les   logiques.</li> <li>Les associations sont traduites en tables et en cl\u00e9s \u00e9trang\u00e8res dans les   mod\u00e8les physiques. Les diagrammes produits par Datagrip peuvent \u00eatre   consid\u00e9r\u00e9s comme des mod\u00e8les physiques, r\u00e9tro-con\u00e7us \u00e0 partir d\u2019une base de   donn\u00e9es existante.</li> </ul>"},{"location":"4.%20DB%20Design/02-notation/#base-de-donnees-de-contacts","title":"Base de donn\u00e9es de contacts","text":""},{"location":"4.%20DB%20Design/02-notation/#diagramme-de-base-conceptuel","title":"Diagramme de base (Conceptuel)","text":"Code <pre><code>@startuml\nentity Call {\n    call_id\n    --\n    phone\n    datetime\n}\n\nentity Contact {\n    contact_id\n    --\n    name\n    phone\n    address\n    email\n}\n\nCall \"*\" -- \"0..1\" Contact : \"            \"\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/02-notation/#avec-types-de-donnees-et-contraintes-logique","title":"Avec types de donn\u00e9es et contraintes (Logique)","text":"<p>Le cercle avant un nom de colonne signifie obligatoire, et l\u2019absence de ce cercle signifie optionnel.</p> Code <pre><code>@startuml\nentity Call {\n    * call_id : INT\n    --\n    phone : VARCHAR\n    datetime : DATETIME\n}\n\nentity Contact {\n    * contact_id : INT\n    --\n    name : VARCHAR\n    phone : VARCHAR\n    address : VARCHAR\n    email : VARCHAR\n}\n\nCall \"*\" -- \"0..1\" Contact : \"            \"\n@enduml\n</code></pre> <p></p>"},{"location":"4.%20DB%20Design/03-exemples/","title":"Exemples","text":""},{"location":"4.%20DB%20Design/03-exemples/#base-de-donnees-bancaire-simple","title":"Base de Donn\u00e9es Bancaire Simple","text":"<ul> <li>L\u2019application de base de donn\u00e9es appel\u00e9e BANK, qui suit les clients d\u2019une   banque et leurs comptes.<ul> <li>Les clients sont identifi\u00e9s par leur nom, adresse, t\u00e9l\u00e9phone et ID client.</li> <li>Les comptes ont des num\u00e9ros, des types (par exemple, \u00e9pargne, courant) et   des soldes.</li> <li>Enregistrer \u00e9galement le(s) client(s) qui poss\u00e8dent un compte.</li> <li>Une transaction a lieu sur un seul compte.</li> <li>Chaque transaction a un ID, un code, un montant, une date, une heure et   une description.</li> </ul> </li> </ul> Traditionnelle UML Code <pre><code>@startuml\nentity Customer {\n    customer_id\n    --\n    name\n    address\n    phone\n}\n\nentity Account {\n    number\n    --\n    type\n    balance\n}\n\nentity Transaction {\n    transaction_id\n    --\n    code\n    amount\n    date\n    time\n    description\n}\n\nCustomer \"1..*\" -- \" *  \" Account: &gt; owns\nTransaction \" *  \" -- \"1\" Account: &gt; takes place\n\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/03-exemples/#base-de-donnees-dun-college","title":"Base de Donn\u00e9es d\u2019un Coll\u00e8ge","text":"<ul> <li>Dans cette base de donn\u00e9es, vous devez enregistrer les \u00e9tudiants, les   enseignants, les cours, les notes et les conseillers \u00e9tudiants.<ul> <li>Chaque \u00e9tudiant a un num\u00e9ro d\u2019\u00e9tudiant, un nom et une adresse.</li> <li>Chaque enseignant a un num\u00e9ro d\u2019employ\u00e9, un nom, un num\u00e9ro de bureau, un   rang et un num\u00e9ro de t\u00e9l\u00e9phone.</li> <li>Pour chaque cours, son code, son nom et son nombre de cr\u00e9dits sont   enregistr\u00e9s.</li> <li>Une note est donn\u00e9e \u00e0 un \u00e9tudiant par un enseignant pour un cours enseign\u00e9   pendant un semestre (A, B ou C) d\u2019une ann\u00e9e particuli\u00e8re.</li> <li>Les conseillers des \u00e9tudiants sont des enseignants.</li> </ul> </li> </ul> Traditionnelle (avec association grade)  Traditionnelle (avec entit\u00e9 grade)  UML"},{"location":"4.%20DB%20Design/03-exemples/#base-de-donnees-des-droits-dauteur-de-musique","title":"Base de Donn\u00e9es des Droits d\u2019Auteur de Musique","text":"<ul> <li>Vous \u00eates charg\u00e9 de concevoir une base de donn\u00e9es pour une agence de collecte   de droits d\u2019auteur de musique, incluant les informations suivantes :<ul> <li>Un auteur a un num\u00e9ro d\u2019auteur, un pr\u00e9nom, un nom de famille et une   adresse.</li> <li>Les auteurs peuvent \u00eatre sign\u00e9s avec un \u00e9diteur. Les \u00e9diteurs signent de   nombreux auteurs.</li> <li>Les \u00e9diteurs ont un code \u00e9diteur, un nom et une adresse.</li> <li>Les auteurs \u00e9crivent des \u0153uvres. Les \u0153uvres peuvent avoir plus d\u2019un   auteur. Chaque auteur \u00e9crit un pourcentage d\u2019une \u0153uvre.</li> <li>Une \u0153uvre a un titre, une dur\u00e9e et une description.</li> <li>Les \u0153uvres sont interpr\u00e9t\u00e9es lors de concerts (ou spectacles de musique)   par un groupe.</li> <li>Un concert a une date et un lieu.</li> </ul> </li> </ul> Traditionnelle UML Code <pre><code>@startuml\n\nentity Writer {\nnumber\nfirst name\nlast name\naddress\n}\n\nentity Work {\nid\ntitle\nduration\ndescription\n}\n\nentity Publisher {\ncode\nname\naddress\n}\n\nentity Act {\nid\nname\naddress\n}\n\nentity Concert {\nid\ndate venue\n}\n\nWriter \"*\" -- \"0..1\" Publisher: &gt; signs contract\n\nentity writes {\npercentage\n}\nWriter \"1\" - \"*\" writes: \"       \"\nwrites \"*\" - \"1\" Work: \"       \"\n\nentity performed {\n\n}\nWork \"1\" -- \"*\" performed\nAct \"1\" -- \"*\" performed\nConcert \"1\" -- \"*\" performed\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/03-exemples/#appartements-a-louer","title":"Appartements \u00e0 Louer","text":"<ul> <li> <p>Vous devez concevoir une base de donn\u00e9es pour g\u00e9rer les informations d\u2019une   entreprise g\u00e9rant un ensemble d\u2019appartements \u00e0 louer.</p> <ul> <li>Cette entreprise g\u00e8re de nombreux b\u00e2timents, chacun compos\u00e9 d\u2019au moins un   appartement.</li> <li>Supposons qu\u2019un appartement puisse \u00eatre identifi\u00e9 de mani\u00e8re unique par   son num\u00e9ro dans son b\u00e2timent.</li> <li>Pour chaque appartement, il y a au moins un locataire, s\u2019il est lou\u00e9.</li> <li>Le loyer mensuel et la date de fin de bail (si connue) doivent \u00eatre   inclus.</li> <li>Pour chaque appartement disponible prochainement, la date de disponibilit\u00e9   et le loyer mensuel demand\u00e9 doivent \u00eatre inclus.</li> <li>Pour chaque locataire, le pr\u00e9nom, le nom de famille, le num\u00e9ro de   t\u00e9l\u00e9phone \u00e0 domicile, le nom de son employeur et son num\u00e9ro de t\u00e9l\u00e9phone   professionnel doivent \u00eatre inclus.</li> </ul> </li> <li> <p>Cette date de fin de bail n\u2019est pas toujours le jour suivant la fin du bail   pr\u00e9c\u00e9dent car un appartement pourrait \u00eatre indisponible pendant un certain   temps en raison de r\u00e9novations, par exemple.</p> </li> <li>En suivant un raisonnement similaire, le loyer mensuel demand\u00e9 n\u2019est pas   n\u00e9cessairement le m\u00eame que le loyer actuel.</li> </ul>"},{"location":"4.%20DB%20Design/03-exemples/#entite-faible-appartement","title":"Entit\u00e9 Faible : Appartement","text":""},{"location":"4.%20DB%20Design/03-exemples/#notation-traditionnelle","title":"Notation Traditionnelle","text":"Traditionnelle 1 Traditionnelle 2 UML Code <pre><code>@startuml\n\nskinparam linetype ortho\nskinparam classFontSize 20\nskinparam classFontName Source Code Pro\nhide empty methods\n\nentity Apartment {\n    * number: integer\n    asking_rent: numeric(10, 2)\n    available_on: date\n}\n\nentity Building {\n    * building_id: integer &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    name: text\n    * address: text\n}\n\nApartment \"1..*\" --* \"1\" Building : &gt; located in\n\n@enduml\n</code></pre>"},{"location":"4.%20DB%20Design/03-exemples/#appartements-a-louer_1","title":"Appartements \u00e0 Louer","text":""},{"location":"4.%20DB%20Design/03-exemples/#diagramme-complet","title":"Diagramme Complet","text":"Traditionnelle UML"},{"location":"4.%20DB%20Design/03-exemples/#diagramme-ameliore","title":"Diagramme Am\u00e9lior\u00e9","text":"Traditionnelle UML"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/","title":"Conversion d\u2019un diagramme EA en sch\u00e9ma relationnel","text":""},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#schema-relationnel","title":"Sch\u00e9ma relationnel","text":"<ul> <li>Sch\u00e9ma relationnel (mod\u00e8le de donn\u00e9es relationnel) : ensemble de sch\u00e9mas   de tables</li> <li> <p>Sch\u00e9ma de table :</p> <ul> <li>forme basique : nom de la table et ensemble de noms de colonnes<ul> <li><code>employee(emp_id, name, address, dept_id)</code></li> </ul> </li> </ul> </li> <li> <p>Sch\u00e9ma de table :</p> <ul> <li>forme d\u00e9taill\u00e9e : nom de la table et ensemble de noms de colonnes plus   types de donn\u00e9es et cl\u00e9s primaires, et parfois d\u2019autres contraintes telles   que <code>NOT NULL</code><ul> <li>les colonnes faisant partie de la cl\u00e9 primaire sont soit soulign\u00e9es,   soit en majuscules<ul> <li>pour \u00e9viter des probl\u00e8mes avec certains SGBD, \u00e9crivez les noms des   tables et des colonnes uniquement en minuscules dans les   instructions <code>CREATE TABLE</code></li> </ul> </li> <li> </li> </ul> </li> <li>d\u2019autres formes interm\u00e9diaires entre les deux pr\u00e9c\u00e9dentes sont \u00e9galement   possibles</li> </ul> </li> <li>Diagramme physique : \u00e0 partir d\u2019un diagramme logique, convertir toutes les   relations en cl\u00e9s \u00e9trang\u00e8res et entit\u00e9s suppl\u00e9mentaires (ou tables) si   n\u00e9cessaire</li> </ul>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#les-colonnes-faisant-partie-dune-cle-etrangere-sont-suivies-dun","title":"les colonnes faisant partie d\u2019une cl\u00e9 \u00e9trang\u00e8re sont suivies d\u2019un *","text":"exemple : <code>employee(EMP_ID integer, name text, address text, dept_id* integer)</code>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#etapes","title":"\u00c9tapes","text":"<ol> <li> <p>Chaque entit\u00e9 du diagramme ER sera une table dans le sch\u00e9ma relationnel</p> <ul> <li>tous les attributs de l\u2019entit\u00e9 deviennent des colonnes dans le sch\u00e9ma de   table</li> <li>les attributs de cl\u00e9 primaire deviennent des colonnes de cl\u00e9 primaire dans   le sch\u00e9ma de table</li> </ul> </li> <li> <p>Chaque association plusieurs-\u00e0-plusieurs sera une table</p> <ul> <li>les attributs de l\u2019association sont ajout\u00e9s au sch\u00e9ma de table</li> <li>ajouter une colonne de cl\u00e9 \u00e9trang\u00e8re (ou des colonnes) pour chaque table   impliqu\u00e9e dans l\u2019association</li> <li>choisir une cl\u00e9 primaire parmi les colonnes actuelles, ou ajouter de   nouvelles colonnes de cl\u00e9 primaire (comme une colonne ID)</li> </ul> </li> </ol> <p>Conseil : comptez le nombre d\u2019entit\u00e9s dans le diagramme ER, ajoutez le    nombre d\u2019associations plusieurs-\u00e0-plusieurs, et ce nombre sera le nombre de    tables dans le sch\u00e9ma relationnel</p> <ol> <li> <p>Les associations plusieurs-\u00e0-un ne deviendront PAS des tables</p> <ul> <li>\u00e0 la place, ajoutez une colonne de cl\u00e9 \u00e9trang\u00e8re du c\u00f4t\u00e9 plusieurs   r\u00e9f\u00e9rant la cl\u00e9 primaire du c\u00f4t\u00e9 un</li> <li>si le c\u00f4t\u00e9 un est en fait exactement un, alors rendez la colonne de cl\u00e9   \u00e9trang\u00e8re <code>NOT NULL</code></li> </ul> </li> <li> <p>Les associations un-\u00e0-un ne deviendront PAS des tables</p> <ul> <li>traitez les associations un-\u00e0-un de mani\u00e8re similaire aux associations   plusieurs-\u00e0-un, sauf que vous ne prenez qu\u2019une des cl\u00e9s primaires comme   cl\u00e9 \u00e9trang\u00e8re de l\u2019autre c\u00f4t\u00e9</li> <li>il n\u2019y a pas de r\u00e8gle parfaite sur quel c\u00f4t\u00e9 choisir, cela d\u00e9pend du   contexte</li> <li>si c\u2019est une association exactement-un-\u00e0-au-plus-un, alors g\u00e9n\u00e9ralement la   cl\u00e9 \u00e9trang\u00e8re sera du c\u00f4t\u00e9 au-plus-un (pointant vers le c\u00f4t\u00e9   exactement-un)</li> </ul> </li> </ol>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#exemples","title":"Exemples","text":""},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#contacts","title":"Contacts","text":"R\u00e9ponse <pre>\ncontact(CONTACT_ID, name, phone, address, email)\ncall(CALL_ID, phone, date, time, contact_id*)\n    </pre>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#simple-bank","title":"Simple Bank","text":"R\u00e9ponse <pre>\ncustomer(ID, name, address, phone)\naccount(NUMBER, type, balance)\ntransaction(ID, code, amount, date, time, description, account_number*)\ncustomer_account(id*, number*)\n    </pre>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#college","title":"Coll\u00e8ge","text":"R\u00e9ponse <pre>\nStudent(STUDENT_ID, name, phone, advisor_id*)\nLecturer(LECTURER_ID, name, office, rank, phone)\nCourse(CODE, name, credits)\nGrade(GRADE_ID, student_id* NOT NULL, \n      lecturer_id* NOT NULL, \n      course_code* NOT NULL, \n      semester, \n      year, \n      result)\n    </pre>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#music","title":"Music","text":"R\u00e9ponse <pre>\nwriter(WRITER_ID, first_name, last_name, address, pub_id*)\nwork(WORK_ID, title, duration, description)\npublisher(PUB_ID, code, name, address)\nact(ACT_ID, name, address)\nconcert(CONCERT_ID, date, venue)\nwriter_work(WRITER_ID*, WORK_ID*, percentage)\nperformance(PERFORMANCE_ID, act_id*, concert_id*, work_id*)\n    </pre>"},{"location":"4.%20DB%20Design/04-ea-vers-relationnel/#appartments","title":"Appartments","text":"R\u00e9ponse <pre>\nbuilding(BUILDING_ID, name, address, managed)\napartment(BUILDING_ID*, NUMBER, date_available, asking_rent, managed)\ntenant(TENANT_ID, first_name, last_name, employer, work_phone)\nlease(LEASE_ID, building_id*, apartment_number*, rent, end_of_lease)\ntenant_lease(tenant_id*, lease_id*)\n    </pre>"},{"location":"5.%20Advanced%20SQL/01-vues/","title":"Vues","text":"<ul> <li>Les vues sont essentiellement des tables virtuelles</li> <li>Elles sont une couche au-dessus d\u2019autres tables</li> <li>Avec le contr\u00f4le d\u2019acc\u00e8s, elles peuvent \u00eatre utilis\u00e9es pour assurer diff\u00e9rents   niveaux de confidentialit\u00e9 et de s\u00e9curit\u00e9</li> <li>Par exemple, le d\u00e9partement des ressources humaines a g\u00e9n\u00e9ralement besoin de   conna\u00eetre les num\u00e9ros d\u2019assurance sociale (NAS) de leurs employ\u00e9s pour les   d\u00e9clarer aux diff\u00e9rents gouvernements pour les imp\u00f4ts, etc.</li> <li>Mais les services informatiques (sauf peut-\u00eatre les DBA de haut niveau), le   marketing, etc. ne devraient pas avoir acc\u00e8s aux NAS</li> <li>L\u2019acc\u00e8s \u00e0 la table de base des employ\u00e9s, avec les NAS, peut \u00eatre accord\u00e9 \u00e0   certains employ\u00e9s (ou \u00e0 certains r\u00f4les si l\u2019on utilise le contr\u00f4le d\u2019acc\u00e8s   bas\u00e9 sur les r\u00f4les)</li> <li>Une vue au-dessus de la table des employ\u00e9s peut \u00eatre cr\u00e9\u00e9e sans les NAS, et   l\u2019acc\u00e8s \u00e0 d\u2019autres employ\u00e9s peut \u00eatre accord\u00e9 sur la vue</li> </ul> <pre><code>drop schema if exists company cascade;\ncreate schema company;\nset search_path to company;\ncreate table employee_priv\n(\n    eid   integer generated always as identity primary key,\n    sin   CHAR(9) not null unique,\n    name  text    not null,\n    phone text\n);\ninsert into employee_priv(sin, name, phone)\nvalues ('123456789', 'Denis', '123-456-7890'),\n       ('987654321', 'Jane', '987-654-3210');\nselect *\nfrom employee_priv;\n</code></pre> <pre><code>create or replace view employee AS\nselect eid, name, phone\nfrom employee_priv;\nselect *\nfrom employee;\n</code></pre> <pre><code>--drop role hr;\n--drop role itsupport;\ncreate role hr;\ncreate role itsupport;\ngrant select, insert, update, delete on employee_priv to hr;\ngrant select on employee to itsupport;\n</code></pre> <ul> <li>La cr\u00e9ation d\u2019utilisateurs et de r\u00f4les n\u2019est pas compl\u00e8tement standardis\u00e9e   dans tous les SGBDR</li> <li>Chaque SGBDR devrait avoir les commandes SQL <code>grant</code> et <code>revoke</code></li> <li>PostgreSQL - create user</li> <li>PostgreSQL - alter user</li> <li>PostgreSQL - grant</li> <li>Les vues peuvent \u00eatre cr\u00e9\u00e9es sur des requ\u00eates couramment utilis\u00e9es, souvent   incluant des jointures, pour simplifier l\u2019\u00e9criture d\u2019autres requ\u00eates</li> </ul> <pre><code>set search_path to university;\ncreate or replace view studentcourse as\nselect s.sid,\n       s.name as student_name,\n       c.code,\n       c.name as course_name,\n       o.semester,\n       o.year\nfrom student s\n         left join enrollment e on s.sid = e.sid\n         inner join offering o on e.oid = o.oid\n         inner join course c on o.cid = c.cid;\nselect *\nfrom studentcourse;\n</code></pre> <ul> <li>Nous pouvons restreindre les lignes de la vue \u00e0 un \u00e9tudiant sp\u00e9cifique, pour   un semestre et une ann\u00e9e sp\u00e9cifiques</li> <li>cela pourrait \u00eatre utile lors de la cr\u00e9ation d\u2019horaires</li> </ul> <pre><code>select *\nfrom studentcourse\nwhere sid = 3\n  and semester = 'W'\n  and year = 2020;\n</code></pre>"},{"location":"5.%20Advanced%20SQL/01-vues/#independance-logique-des-donnees","title":"Ind\u00e9pendance logique des donn\u00e9es","text":"<ul> <li>Les vues peuvent \u00e9galement \u00eatre utilis\u00e9es pour minimiser l\u2019impact des   changements de sch\u00e9ma dans la base de donn\u00e9es</li> <li>Supposons qu\u2019un sch\u00e9ma de table doive \u00eatre modifi\u00e9, \u00e9ventuellement parce   qu\u2019une table doit \u00eatre d\u00e9compos\u00e9e pour r\u00e9duire la redondance en raison d\u2019une   d\u00e9pendance fonctionnelle pr\u00e9c\u00e9demment inconnue</li> <li>Ensuite, toutes les requ\u00eates utilisant cette table doivent \u00eatre mises \u00e0 jour,   ce qui pourrait \u00eatre difficile \u00e0 faire</li> <li>Une vue avec le m\u00eame nom et les m\u00eames colonnes peut \u00eatre cr\u00e9\u00e9e pour remplacer   l\u2019ancienne table</li> <li>cette vue serait d\u00e9finie sur les nouvelles tables rempla\u00e7ant l\u2019ancienne table</li> </ul>"},{"location":"5.%20Advanced%20SQL/01-vues/#les-vues-sont-elles-modifiables","title":"Les vues sont-elles modifiables ?","text":"<ul> <li>La meilleure r\u00e9ponse est peut-\u00eatre, mais probablement pas (du moins pas en   g\u00e9n\u00e9ral)</li> <li>Si nous voulons mettre \u00e0 jour le num\u00e9ro de t\u00e9l\u00e9phone d\u2019un employ\u00e9, nous   pourrions probablement le faire via la vue, car la vue a une correspondance   directe avec exactement 1 table, moins la colonne NAS</li> <li>la mise \u00e0 jour peut \u00eatre redirig\u00e9e vers la table <code>employee_priv</code></li> <li>Mais nous ne pouvons pas ins\u00e9rer une nouvelle ligne dans la vue des employ\u00e9s   car la table <code>employee_priv</code> a la colonne NAS, qui ne peut pas \u00eatre <code>null</code></li> <li>de plus, comme elle a la contrainte <code>unique</code>, nous ne pouvons pas la d\u00e9finir   sur une valeur par d\u00e9faut</li> <li>en fait, nous pourrions la d\u00e9finir sur une valeur par d\u00e9faut pour au plus 1   employ\u00e9</li> <li>De m\u00eame, essayer de mettre \u00e0 jour la vue <code>studentcourse</code> pourrait \u00eatre   compliqu\u00e9 car elle provient de la jointure de 4 tables</li> <li>mettre \u00e0 jour 1 ligne dans <code>studentcourse</code> pourrait signifier que nous devons   modifier plusieurs lignes dans 1 ou plusieurs tables sous-jacentes</li> <li>si nous essayons de changer l\u2019inscription d\u2019un \u00e9tudiant \u00e0 une offre de cours   via la vue, nous devrons mettre \u00e0 jour la table d\u2019inscription, qui n\u2019appara\u00eet   pas directement dans la vue (ses colonnes ne sont pas s\u00e9lectionn\u00e9es par la   requ\u00eate de la vue)</li> <li>m\u00eame genre de probl\u00e8me pour l\u2019insertion de lignes</li> <li>cela pourrait \u00eatre possible dans certains cas, mais il n\u2019y a pas de moyen   universel de le faire</li> <li>Il y a des probl\u00e8mes similaires avec la suppression de lignes via une vue</li> <li>c\u2019est possible dans certains cas, mais pas tous</li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/","title":"Contraintes et D\u00e9clencheurs","text":"<ul> <li>Les contraintes peuvent \u00eatre d\u00e9finies dans les instructions <code>create table</code></li> <li>Ou ajout\u00e9es aux tables existantes avec les instructions <code>alter table</code></li> <li>Diff\u00e9rents types de contraintes<ul> <li><code>null</code> ou <code>not null</code></li> <li>Cl\u00e9 primaire</li> <li>Unique</li> <li>Cl\u00e9 \u00e9trang\u00e8re</li> <li>Check</li> <li>Domaine</li> <li>Assertion</li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-null-ou-not-null","title":"Contraintes <code>null</code> ou <code>not null</code>","text":"<ul> <li>Une colonne peut permettre des valeurs <code>null</code></li> <li>Ou les interdire avec <code>not null</code></li> <li>Par d\u00e9faut : permettre des valeurs <code>null</code></li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-cle-primaire","title":"Contraintes de cl\u00e9 primaire","text":"<ul> <li>Une colonne ou un groupe de colonnes peut \u00eatre d\u00e9sign\u00e9 comme <code>primary key</code> (   cl\u00e9 primaire)</li> <li>Les colonnes de cl\u00e9 primaire ne peuvent pas \u00eatre <code>null</code></li> <li>implicite <code>not null</code> pour chaque colonne de cl\u00e9 primaire</li> <li>Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 primaire n\u2019a qu\u2019une   seule colonne<ul> <li><code>sid integer primary key</code></li> </ul> </li> <li>Si la cl\u00e9 primaire a plus d\u2019une colonne, nous devons utiliser une contrainte   de table<ul> <li>sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l\u2019instruction <code>create table</code></li> <li><code>primary key(eid, sid)</code></li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-uniques","title":"Contraintes uniques","text":"<ul> <li>Comme les cl\u00e9s primaires, mais pour les cl\u00e9s candidates (secondaires)</li> <li>D\u00e9finies de la m\u00eame mani\u00e8re, mais avec <code>unique</code> au lieu de <code>primary key</code></li> <li>Exemple :<ul> <li>ajout d\u2019une contrainte <code>unique</code> \u00e0 la colonne <code>code</code> de la table <code>course</code></li> </ul> </li> </ul> <pre><code>set search_path to university;\n-- alter table course drop constraint course_code_key;\nalter table course\n    add unique (code);\n</code></pre> <pre><code>insert into course(name, code, credits)\nvalues ('Data Structures', 'DS', 3);\n-- delete from course where code = 'DS';\n</code></pre>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-cle-etrangere","title":"Contraintes de cl\u00e9 \u00e9trang\u00e8re","text":"<ul> <li>R\u00e9f\u00e9rences \u00e0 d\u2019autres tables</li> <li>Se r\u00e9f\u00e8re g\u00e9n\u00e9ralement aux cl\u00e9s primaires dans d\u2019autres tables</li> <li>G\u00e9n\u00e9ralement cr\u00e9\u00e9es pour repr\u00e9senter des relations lors de la traduction d\u2019un   diagramme ER en sch\u00e9ma relationnel</li> <li>Une colonne ou un groupe de colonnes peut \u00eatre des r\u00e9f\u00e9rences \u00e0 une colonne ou   un groupe de colonnes dans une autre table</li> <li>Nous pouvons utiliser une contrainte de colonne si la cl\u00e9 \u00e9trang\u00e8re n\u2019a qu\u2019une   seule colonne<ul> <li><code>sid integer references student(sid)</code></li> </ul> </li> <li>Si la cl\u00e9 \u00e9trang\u00e8re a plus d\u2019une colonne, nous devons utiliser une contrainte   de table<ul> <li>sp\u00e9cifi\u00e9e apr\u00e8s toutes les colonnes dans l\u2019instruction <code>create table</code></li> <li><code>foreign key(eid, sid) references enrollment(eid, sid)</code></li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#politique-des-contraintes-de-cle-etrangere","title":"Politique des contraintes de cl\u00e9 \u00e9trang\u00e8re","text":"<ul> <li>Lorsque nous ins\u00e9rons une nouvelle ligne dans une table avec une cl\u00e9   \u00e9trang\u00e8re, la valeur que nous sp\u00e9cifions pour la ou les colonnes de cl\u00e9   \u00e9trang\u00e8re doit exister dans l\u2019autre table \u00e0 laquelle nous nous r\u00e9f\u00e9rons<ul> <li>cela est souvent appel\u00e9 une contrainte d\u2019int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle</li> <li>cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-exactly-one (   plusieurs-exactement-un)</li> <li>exception : si nous permettons des valeurs <code>null</code> pour la ou les colonnes   de cl\u00e9 \u00e9trang\u00e8re, alors les valeurs <code>null</code> n\u2019ont pas besoin d\u2019exister dans   l\u2019autre table</li> <li>et les valeurs <code>null</code> n\u2019existeront g\u00e9n\u00e9ralement pas car la ou les colonnes   auxquelles la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re seront g\u00e9n\u00e9ralement des colonnes de   cl\u00e9 primaire</li> <li>cela correspond g\u00e9n\u00e9ralement \u00e0 une relation many-at-most-one (   plusieurs-au-plus-un)</li> </ul> </li> <li>Mais que se passe-t-il lorsque nous supprimons ou mettons \u00e0 jour une ligne   dans la table \u00e0 laquelle la cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8re ?<ul> <li>Si la valeur \u00e0 laquelle la ou les colonnes de cl\u00e9 \u00e9trang\u00e8re se r\u00e9f\u00e8rent   n\u2019existe plus, que faisons-nous ?</li> <li>Dans les standards SQL, les actions valides sont<ul> <li><code>RESTRICT</code>, <code>CASCADE</code>, <code>SET NULL</code>, <code>NO ACTION</code> et <code>SET DEFAULT</code></li> <li>Toutes les actions valides ne sont pas impl\u00e9ment\u00e9es dans tous les   SGBDR</li> </ul> </li> <li>La politique par d\u00e9faut des cl\u00e9s \u00e9trang\u00e8res est <code>RESTRICT</code><ul> <li>si l\u2019ex\u00e9cution de la mise \u00e0 jour ou de la suppression laisserait des   lignes \u201corphelines\u201d (lignes qui se r\u00e9f\u00e8rent \u00e0 des valeurs   inexistantes), alors bloquer la mise \u00e0 jour ou la suppression et   renvoyer un message d\u2019erreur</li> <li><code>NO ACTION</code> est un synonyme de <code>RESTRICT</code></li> </ul> </li> <li>Si la politique <code>CASCADE</code> est d\u00e9finie<ul> <li>alors les changements sont propag\u00e9s aux lignes d\u00e9pendant de la ligne   originale</li> <li>si la ligne est supprim\u00e9e, alors les lignes d\u00e9pendant d\u2019elle seront   \u00e9galement supprim\u00e9es (tr\u00e8s dangereux)</li> <li>si la ligne est mise \u00e0 jour, alors les lignes d\u00e9pendant d\u2019elle seront   \u00e9galement mises \u00e0 jour</li> </ul> </li> <li>Si la politique est d\u00e9finie sur <code>SET NULL</code> ou <code>SET DEFAULT</code>, elle   remplacera les valeurs de la ou des colonnes de cl\u00e9 \u00e9trang\u00e8re par la   valeur <code>null</code> ou par la valeur par d\u00e9faut, si possible</li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-check","title":"Contraintes <code>check</code>","text":"<ul> <li>V\u00e9rifie une expression avant d\u2019effectuer une insertion ou une mise \u00e0 jour<ul> <li>si l\u2019expression est fausse, alors l\u2019insertion ou la mise \u00e0 jour \u00e9chouera</li> <li>sinon, elle r\u00e9ussira</li> <li>attention : si l\u2019expression \u00e9value \u00e0 <code>null</code>, alors l\u2019insertion ou la mise   \u00e0 jour r\u00e9ussira</li> </ul> </li> <li>Si les contraintes <code>check</code> se r\u00e9f\u00e8rent \u00e0 une seule colonne, elles peuvent \u00eatre   sp\u00e9cifi\u00e9es comme une contrainte de colonne<ul> <li><code>score integer check(score &gt;= 0 and score &lt;= 100)</code></li> </ul> </li> <li>Si les contraintes <code>check</code> se r\u00e9f\u00e8rent \u00e0 2 colonnes ou plus, elles doivent   \u00eatre sp\u00e9cifi\u00e9es comme une contrainte de table<ul> <li><code>check(end_date &gt;= start_date)</code></li> <li>notez que si l\u2019une des dates est <code>null</code>, l\u2019expression sera <code>null</code> et la   v\u00e9rification passera</li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#contraintes-de-domaine","title":"Contraintes de domaine","text":"<ul> <li>Un domaine est utilis\u00e9 pour restreindre les valeurs possibles pour un type de   donn\u00e9es</li> <li>Un domaine<ul> <li>peut avoir une valeur par d\u00e9faut</li> <li>peut \u00eatre d\u00e9fini avec une contrainte <code>null</code> ou <code>not null</code></li> <li>peut avoir une ou plusieurs contraintes <code>check</code></li> </ul> </li> <li>Un domaine peut \u00eatre utilis\u00e9 pour \u00e9viter de r\u00e9p\u00e9ter trop de contraintes, en   particulier les contraintes <code>check</code><ul> <li><code>create domain score as integer check(score &gt;= 0 and score &lt;= 100)</code></li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#assertions","title":"Assertions","text":"<ul> <li>Contraintes g\u00e9n\u00e9rales qui peuvent s\u2019appliquer \u00e0 plus d\u2019une ligne d\u2019une table   ou \u00e0 des colonnes de plus d\u2019une table</li> <li>Comme des contraintes <code>check</code> plus g\u00e9n\u00e9rales qui ne sont pas limit\u00e9es \u00e0 une   seule ligne</li> <li>La plupart des SGBDR n\u2019ont pas de support complet pour les assertions, voire   aucun support pour les assertions</li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#declencheurs-triggers","title":"D\u00e9clencheurs (Triggers)","text":"<p>trigger_examples.sql</p> <ul> <li>Les d\u00e9clencheurs sont utilis\u00e9s dans les bases de donn\u00e9es actives</li> <li>Ils sont similaires aux \u00e9v\u00e9nements dans une architecture orient\u00e9e   \u00e9v\u00e9nements</li> <li>Un d\u00e9clencheur ex\u00e9cute g\u00e9n\u00e9ralement une fonction sur un \u00e9v\u00e9nement ou des   \u00e9v\u00e9nements sp\u00e9cifiques</li> <li>La fonction qu\u2019il ex\u00e9cute est similaire \u00e0 un gestionnaire d\u2019\u00e9v\u00e9nements<ul> <li>par exemple, dans une page HTML, vous pouvez associer une fonction   JavaScript \u00e0 un \u00e9v\u00e9nement <code>onclick</code> sur un bouton</li> <li><code>Do something</code></li> </ul> </li> <li>Les d\u00e9clencheurs suivent la structure ECA pour d\u00e9finir des r\u00e8gles actives<ul> <li>Event : signal (d\u00e9clencheur) invoquant la r\u00e8gle</li> <li>Condition : test logique, d\u00e9termine si l\u2019action sera ex\u00e9cut\u00e9e ou non</li> <li>Action : code ou fonction (en SQL, PL/SQL, ou un autre langage   support\u00e9) s\u2019ex\u00e9cutant sur la base de donn\u00e9es</li> </ul> </li> <li>Le support des d\u00e9clencheurs varie selon les SGBDR</li> </ul>"},{"location":"5.%20Advanced%20SQL/02-contraintes-et-d%C3%A9clencheurs/#quand-utiliser-les-declencheurs","title":"Quand utiliser les d\u00e9clencheurs","text":"<ul> <li>Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour imposer des contraintes qui ne   peuvent pas \u00eatre impos\u00e9es autrement<ul> <li>si les assertions ne sont pas support\u00e9es, alors une fonctionnalit\u00e9   similaire peut \u00eatre obtenue avec des d\u00e9clencheurs\u2026</li> <li>mais les d\u00e9clencheurs sont plus puissants que les assertions</li> </ul> </li> <li>Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour la journalisation<ul> <li>si vous voulez (ou devez) conserver des journaux de modifications, alors   les d\u00e9clencheurs peuvent aider</li> <li>normalement, lorsque des insertions, mises \u00e0 jour et suppressions sont   ex\u00e9cut\u00e9es sur la base de donn\u00e9es, aucune trace ne sera laiss\u00e9e</li> <li>cr\u00e9er des d\u00e9clencheurs pour ins\u00e9rer des donn\u00e9es dans une table de journal   ou d\u2019historique (ou des tables)</li> <li>plus de d\u00e9tails : https://en.wikipedia.org/wiki/Log_trigger</li> </ul> </li> <li>Les d\u00e9clencheurs peuvent \u00eatre utilis\u00e9s pour de nombreuses autres choses<ul> <li>pour g\u00e9n\u00e9rer/mettre \u00e0 jour des valeurs pour d\u2019autres colonnes</li> <li>pour mettre \u00e0 jour une table de statistiques</li> <li>pour auditer des donn\u00e9es sensibles</li> <li>pour envoyer des emails aux DBA lors d\u2019\u00e9v\u00e9nements critiques</li> <li>pour impl\u00e9menter d\u2019autres r\u00e8gles m\u00e9tier</li> </ul> </li> <li>De m\u00eame que la programmation \u00e9v\u00e9nementielle en JavaScript ou dans d\u2019autres   langages de programmation, des fonctions doivent \u00eatre associ\u00e9es \u00e0 certains   \u00e9v\u00e9nements<ul> <li>les \u00e9v\u00e9nements les plus courants sont : <code>INSERT</code>, <code>UPDATE</code>, et <code>DELETE</code></li> <li>avec un modificateur (sp\u00e9cifi\u00e9 avant l\u2019\u00e9v\u00e9nement) : <code>BEFORE</code> ou <code>AFTER</code></li> <li>L\u2019\u00e9v\u00e9nement peut \u00eatre d\u00e9clench\u00e9 pour chaque ligne ou pour l\u2019ensemble de la   d\u00e9claration<ul> <li>une seule instruction <code>INSERT</code>, <code>UPDATE</code>, ou <code>DELETE</code> peut s\u2019appliquer   \u00e0 une ou plusieurs lignes</li> <li>par d\u00e9faut, nous obtenons un d\u00e9clencheur au niveau de la d\u00e9claration</li> <li>si nous sp\u00e9cifions FOR EACH ROW, alors nous obtenons un d\u00e9clencheur   au niveau de la ligne</li> </ul> </li> </ul> </li> <li>Par exemple, apr\u00e8s avoir ins\u00e9r\u00e9 les informations d\u2019un nouvel employ\u00e9 dans une   table <code>employee</code>, nous pourrions vouloir cr\u00e9er automatiquement un compte pour   permettre au nouvel employ\u00e9 de se connecter au syst\u00e8me de l\u2019entreprise<ul> <li>la cr\u00e9ation d\u2019un tel compte n\u00e9cessiterait probablement l\u2019insertion d\u2019une   ligne dans une table <code>account</code></li> <li>nous avons donc besoin d\u2019un d\u00e9clencheur <code>AFTER INSERT</code> pour cela</li> <li>notez que parfois, cette fonctionnalit\u00e9 est g\u00e9r\u00e9e par l\u2019application   frontale, et non par la base de donn\u00e9es</li> </ul> </li> <li> <p>Un autre exemple : nous pourrions avoir un d\u00e9clencheur <code>BEFORE DELETE</code> pour   archiver les donn\u00e9es supprim\u00e9es importantes</p> <ul> <li>nous pourrions ins\u00e9rer les donn\u00e9es supprim\u00e9es dans une autre table</li> <li>nous pourrions \u00e9galement enregistrer qui a supprim\u00e9 les donn\u00e9es et quand   elles ont \u00e9t\u00e9 supprim\u00e9es</li> </ul> </li> <li> <p>Malheureusement, les impl\u00e9mentations de d\u00e9clencheurs varient selon les SGBD</p> <ul> <li>Certains ne supportent que des sous-ensembles de la norme, d\u2019autres y   apportent de petites modifications</li> </ul> </li> <li>Dans PostgreSQL, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s avec la syntaxe (   simplifi\u00e9e) suivante :</li> </ul> <pre><code>CREATE TRIGGER trigger_name \n{BEFORE | AFTER | INSTEAD OF} {event [OR ...]}\n   ON table_name\n   [FOR [EACH] {ROW | STATEMENT}]\n       EXECUTE PROCEDURE trigger_function\n</code></pre> <ul> <li>o\u00f9 <code>event</code> peut \u00eatre <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code> ou <code>TRUNCATE</code></li> <li> <p>R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails :</p> <ul> <li>https://www.postgresqltutorial.com/creating-first-trigger-postgresql/</li> <li>https://www.postgresql.org/docs/14/sql-createtrigger.html</li> <li>https://www.postgresql.org/docs/14/triggers.html</li> </ul> </li> <li> <p>Sur MySQL/MariaDB, la syntaxe de base est :</p> </li> </ul> <pre><code>CREATE TRIGGER trigger_name\n{BEFORE | AFTER} {INSERT | UPDATE| DELETE }\nON table_name FOR EACH ROW\ntrigger_body;\n</code></pre> <ul> <li> <p>R\u00e9f\u00e9rez-vous \u00e0 ces liens pour plus de d\u00e9tails :</p> <ul> <li>https://www.mysqltutorial.org/create-the-first-trigger-in-mysql.aspx</li> <li>https://dev.mysql.com/doc/refman/8.0/en/create-trigger.html</li> <li>https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html</li> </ul> </li> <li> <p>Sur Oracle, les d\u00e9clencheurs peuvent \u00eatre cr\u00e9\u00e9s en utilisant la syntaxe   suivante :</p> </li> </ul> <pre><code>CREATE [OR REPLACE] TRIGGER trigger_name\n{BEFORE | AFTER } triggering_event ON table_name\n[FOR EACH ROW]\n[FOLLOWS | PRECEDES another_trigger]\n[ENABLE / DISABLE ]\n[WHEN condition]\nDECLARE\n    declaration statements\nBEGIN\n    executable statements\nEXCEPTION\n    exception_handling statements\nEND;\n</code></pre> <ul> <li> <p>https://www.oracletutorial.com/plsql-tutorial/oracle-trigger/</p> </li> <li> <p>Pour bien utiliser les d\u00e9clencheurs, nous devons \u00e9crire des fonctions ou des   proc\u00e9dures dans un certain langage de programmation</p> <ul> <li>PL/SQL (langage de programmation pour SQL) est support\u00e9 sous une certaine   forme dans la plupart des bases de donn\u00e9es relationnelles</li> <li>ou un autre langage de programmation support\u00e9, tel que C<ul> <li>PostgreSQL supporte les types d\u00e9finis par l\u2019utilisateur (UDT) et les   fonctions d\u00e9finies par l\u2019utilisateur (UDF)</li> <li>Les UDF peuvent \u00eatre d\u00e9finies en PL/SQL ou en C</li> <li>Les UDF peuvent \u00eatre utilis\u00e9es pour les d\u00e9clencheurs</li> </ul> </li> <li>d\u2019autres langages de programmation supportent les langages de   programmation de diff\u00e9rentes mani\u00e8res</li> </ul> </li> </ul>"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/","title":"Mod\u00e8le objet-relationel","text":"<p>ORDBMS : Object-Relational DBMS</p>"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts-normalises","title":"Contacts normalis\u00e9s","text":""},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts1-schema-relationnel","title":"<code>contacts1</code> Sch\u00e9ma relationnel","text":"<pre><code>DROP SCHEMA IF EXISTS contacts1 CASCADE;\nCREATE SCHEMA contacts1;\nSET search_path TO contacts1;\n\nCREATE TABLE users\n(\n    uid               INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username          VARCHAR(15) NOT NULL,\n    email             TEXT        NOT NULL,\n    firstname         TEXT,\n    lastname          TEXT,\n    emergency_contact TEXT\n);\n</code></pre> <pre><code>INSERT INTO users (username, email, emergency_contact)\nVALUES ('denis', 'denis.rinfret@example.com', 'help@example.com'),\n       ('minh', 'minh@example.com', 'contact@example.com');\n</code></pre> <pre><code>SELECT *\nFROM users;\n</code></pre> uid username email firstname lastname emergency_contact 1 denis denis.rinfret@example.com None None help@example.com 2 minh minh@example.com None None contact@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#que-devons-nous-faire-pour-permettre-a-un-utilisateur-davoir-plus-dun-contact","title":"Que devons-nous faire pour permettre \u00e0 un utilisateur d\u2019avoir plus d\u2019un contact ?","text":"<ol> <li>Si le nombre de contacts est fixe, disons <code>n</code> contacts, alors nous pourrions    avoir <code>n</code> colonnes de contacts, tant que <code>n</code> est petit.</li> <li>Mais si <code>n</code> n\u2019est pas petit ou si <code>n</code> est inconnu, alors nous devons avoir    une autre table, une table contacts, pour pr\u00e9server la premi\u00e8re forme    normale.</li> <li>La premi\u00e8re forme normale stipule que chaque valeur de colonne doit \u00eatre    atomique.</li> </ol>"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts2-schema-relationnel","title":"<code>contacts2</code> Sch\u00e9ma relationnel","text":"<pre><code>DROP SCHEMA IF EXISTS contacts2 CASCADE;\nCREATE SCHEMA contacts2;\nSET search_path TO contacts2;\n\nCREATE TABLE users\n(\n    uid       INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username  VARCHAR(15) NOT NULL,\n    email     TEXT        NOT NULL,\n    firstname TEXT,\n    lastname  TEXT\n);\n\nCREATE TABLE contacts\n(\n    cid   INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    email TEXT NOT NULL,\n    uid   INTEGER REFERENCES users (uid)\n)\n</code></pre> <pre><code> INSERT INTO users (username, email)\n VALUES ('denis', 'denis.rinfret@example.com'),\n        ('minh', 'minh@example.com');\n\nINSERT INTO contacts (email, uid)\nVALUES ('help@example.com', 1),\n       ('minh@example.com', 1),\n       ('contact@example.com', 2),\n       ('ha@example.com', 2);\n</code></pre> <pre><code>SELECT *\nFROM users;\n</code></pre> uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None <pre><code>SELECT *\nFROM contacts;\n</code></pre> cid email uid 1 help@example.com 1 2 minh@example.com 1 3 contact@example.com 2 4 ha@example.com 2"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#jointure-necessaire-pour-obtenir-toutes-les-donnees","title":"Jointure n\u00e9cessaire pour obtenir toutes les donn\u00e9es","text":"<pre><code>SELECT *\nFROM users u\n         INNER JOIN contacts c ON u.uid = c.uid;\n</code></pre> uid username email firstname lastname cid email_1 uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com 1 1 denis denis.rinfret@example.com None None 2 minh@example.com 1 2 minh minh@example.com None None 3 contact@example.com 2 2 minh minh@example.com None None 4 ha@example.com 2 <ol> <li>Les jointures peuvent \u00eatre lentes.</li> <li>Mais sans normalisation, les donn\u00e9es peuvent \u00eatre redondantes et des    anomalies peuvent appara\u00eetre.</li> <li>Une SGDB <code>object-relationalle</code> (SGBDOR, ou ORDBMS) peut aider.</li> </ol>"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts-denormalises","title":"Contacts d\u00e9normalis\u00e9s","text":""},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts3-schema-objet-relationnel","title":"<code>contacts3</code> Sch\u00e9ma objet-relationnel","text":"<pre><code>DROP SCHEMA IF EXISTS contacts3 CASCADE;\nCREATE SCHEMA contacts3;\nSET search_path TO contacts3;\n\nCREATE TABLE users\n(\n    uid                INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username           VARCHAR(15) NOT NULL,\n    email              TEXT        NOT NULL,\n    firstname          TEXT,\n    lastname           TEXT,\n    emergency_contacts TEXT[]\n);\n</code></pre> <pre><code>INSERT INTO users (username, email, emergency_contacts)\nVALUES ('denis', 'denis.rinfret@example.com',\n        ARRAY ['help@example.com', 'minh@example.com']),\n       ('minh', 'minh@example.com',\n        ARRAY ['contact@example.com', 'ha@example.com']);\n</code></pre> <pre><code>SELECT uid, emergency_contacts\nFROM users;\n</code></pre> uid emergency_contacts 1 [\"help@example.com\", \"minh@example.com\"] 2 [\"contact@example.com\", \"ha@example.com\"] <pre><code>SELECT uid,\n       username,\n       email,\n       firstname,\n       lastname,\n       unnest(emergency_contacts)\nFROM users;\n</code></pre> uid username email firstname lastname unnest 1 denis denis.rinfret@example.com None None help@example.com 1 denis denis.rinfret@example.com None None minh@example.com 2 minh minh@example.com None None contact@example.com 2 minh minh@example.com None None ha@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-avec-un-courriel-specifique-comme-premier-contact-durgence","title":"Trouver les utilisateurs avec un courriel sp\u00e9cifique comme premier contact d\u2019urgence","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE emergency_contacts[1] = 'help@example.com';\n</code></pre> uid username email 1 denis denis.rinfret@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-un-utilisateur-avec-un-courriel-specifique-comme-contact-durgence-nimporte-quelle-position","title":"Trouver un utilisateur avec un courriel sp\u00e9cifique comme contact d\u2019urgence (n\u2019importe quelle position)","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE 'ha@example.com' = ANY (emergency_contacts);\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-qui-sont-listes-comme-contact-durgence-dautres-utilisateurs","title":"Trouver les utilisateurs qui sont list\u00e9s comme contact d\u2019urgence d\u2019autres utilisateurs","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE email IN (SELECT unnest(emergency_contacts)\n                FROM users);\n</code></pre> uid username email 2 minh minh@example.com <pre><code>SELECT distinct uid, username, email\nFROM users\n         INNER JOIN\n     (SELECT unnest(emergency_contacts) AS emergency_email\n      FROM users) AS all_contacts\n     ON email = emergency_email;\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#sans-unnest-ni-sous-requetes","title":"Sans <code>unnest</code> ni sous-requ\u00eates","text":"<pre><code>SELECT u1.uid, u1.username, u1.email\nFROM users u1\n         INNER JOIN users u2\n                    ON u1.email = ANY (u2.emergency_contacts);\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#types-definis-par-les-utilisateurs","title":"Types d\u00e9finis par les utilisateurs","text":"<p>User-Defined Types (UDT)</p>"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts4-schema-objet-relationnel","title":"<code>contacts4</code> Sch\u00e9ma objet-relationnel","text":"<pre><code>DROP SCHEMA IF EXISTS contacts4 CASCADE;\nCREATE SCHEMA contacts4;\nSET search_path TO contacts4;\n\nCREATE TYPE contact_type AS ENUM ('emergency', 'friend',\n    'family', 'colleague');\n\nCREATE TYPE contact AS\n(\n    email TEXT,\n    type  contact_type\n);\n</code></pre> <pre><code>CREATE TABLE users\n(\n    uid       INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username  VARCHAR(15) NOT NULL,\n    email     TEXT        NOT NULL,\n    firstname TEXT,\n    lastname  TEXT,\n    contacts  contact[]\n);\n</code></pre> <pre><code>INSERT INTO users (username, email, contacts)\nVALUES ('denis', 'denis.rinfret@example.com',\n        ARRAY [('help@example.com', 'emergency')::contact,\n            ('minh@example.com', 'friend')::contact]),\n       ('minh', 'minh@example.com',\n        ARRAY [('contact@example.com', 'family')::contact,\n            ('ha@example.com', 'colleague')::contact]);\n</code></pre> <pre><code>SELECT uid, contacts\nFROM users;\n</code></pre> uid contacts 1 {\"(help@example.com,emergency)\",\"(minh@example.com,friend)\"} 2 {\"(contact@example.com,family)\",\"(ha@example.com,colleague)\"} <pre><code>SELECT uid,\n       username,\n       email,\n       (unnest(contacts)::contact).*\nFROM users;\n</code></pre> uid username email email_1 type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague <pre><code>SELECT uid,\n       username,\n       email,\n       (unnest(contacts)::contact).email AS contact_email,\n       (unnest(contacts)::contact).type  AS contact_type\nFROM users;\n</code></pre> uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency 1 denis denis.rinfret@example.com minh@example.com friend 2 minh minh@example.com contact@example.com family 2 minh minh@example.com ha@example.com colleague"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-tous-les-contacts-durgence-dun-utilisateur","title":"Trouver tous les contacts d\u2019urgence d\u2019un utilisateur","text":"<pre><code>SELECT *\nFROM (SELECT uid,\n             username,\n             email,\n             (unnest(contacts)::contact).email AS contact_email,\n             (unnest(contacts)::contact).type  AS contact_type\n      FROM users) AS temp\nWHERE contact_type = 'emergency';\n</code></pre> uid username email contact_email contact_type 1 denis denis.rinfret@example.com help@example.com emergency"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence","title":"Trouver les utilisateurs sans contacts d\u2019urgence","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE 'emergency' NOT IN (SELECT (unnest(contacts)::contact).type);\n</code></pre> uid username email 2 minh minh@example.com <pre><code>SELECT uid, username, email\nFROM users\nWHERE 'emergency' != ALL (SELECT (unnest(contacts)::contact).type);\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#jsonb-a-la-place-de-tableaux","title":"JSONB \u00e0 la place de tableaux","text":""},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts5-schema-objet-relationnel","title":"<code>contacts5</code> Sch\u00e9ma objet-relationnel","text":"<pre><code>DROP SCHEMA IF EXISTS contacts5 CASCADE;\nCREATE SCHEMA contacts5;\nSET search_path TO contacts5;\n\nCREATE TABLE users\n(\n    uid       INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username  VARCHAR(15) NOT NULL,\n    email     TEXT        NOT NULL,\n    firstname TEXT,\n    lastname  TEXT,\n    contacts  jsonb\n);\n</code></pre> <pre><code>INSERT INTO users (username, email, contacts)\nVALUES ('denis', 'denis.rinfret@example.com',\n        '{\"emergency\": \"help@example.com\", \"friend\": \"minh@example.com\"}'),\n       ('minh', 'minh@example.com',\n        '{\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"}');\n</code></pre> <pre><code>SELECT uid, contacts\nFROM users;\n</code></pre> uid contacts 1 {\"friend\": \"minh@example.com\", \"emergency\": \"help@example.com\"} 2 {\"family\": \"contact@example.com\", \"colleague\": \"ha@example.com\"}"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-avec-au-moins-un-contact-durgence","title":"Trouver les utilisateurs avec au moins un contact d\u2019urgence","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE 'emergency' IN (SELECT jsonb_object_keys(contacts));\n</code></pre> uid username email 1 denis denis.rinfret@example.com <pre><code>SELECT uid, username, email\nFROM users\nWHERE contacts ? 'emergency';\n</code></pre> uid username email 1 denis denis.rinfret@example.com <pre><code>SELECT uid, username, email, contacts -&gt; 'emergency' AS emergency\nFROM users\nWHERE contacts ? 'emergency';\n</code></pre> uid username email emergency 1 denis denis.rinfret@example.com help@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence_1","title":"Trouver les utilisateurs sans contacts d\u2019urgence","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE NOT (contacts ? 'emergency');\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#schema-relationnel-avec-les-types-de-contact","title":"Sch\u00e9ma relationnel avec les types de contact","text":""},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#contacts6-relational-schema","title":"<code>contacts6</code> Relational Schema","text":"<pre><code>DROP SCHEMA IF EXISTS contacts6 CASCADE;\nCREATE SCHEMA contacts6;\nSET search_path TO contacts6;\n\nCREATE TABLE users\n(\n    uid       INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    username  VARCHAR(15) NOT NULL,\n    email     TEXT        NOT NULL,\n    firstname TEXT,\n    lastname  TEXT\n);\n</code></pre> <pre><code>CREATE TYPE contact_type AS ENUM ('emergency', 'friend',\n    'family', 'colleague');\n\nCREATE TABLE contacts\n(\n    cid   INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    email TEXT         NOT NULL,\n    type  contact_type NOT NULL,\n    uid   INTEGER REFERENCES users (uid)\n);\n</code></pre> <pre><code>INSERT INTO users (username, email)\nVALUES ('denis', 'denis.rinfret@example.com'),\n       ('minh', 'minh@example.com');\n\nINSERT INTO contacts (email, type, uid)\nVALUES ('help@example.com', 'emergency', 1),\n       ('minh@example.com', 'friend', 1),\n       ('contact@example.com', 'colleague', 2),\n       ('ha@example.com', 'family', 2);\n</code></pre> <pre><code>SELECT *\nFROM users;\n</code></pre> uid username email firstname lastname 1 denis denis.rinfret@example.com None None 2 minh minh@example.com None None <pre><code>SELECT *\nFROM contacts;\n</code></pre> cid email type uid 1 help@example.com emergency 1 2 minh@example.com friend 1 3 contact@example.com colleague 2 4 ha@example.com family 2 <pre><code>SELECT *\nFROM users u\n         INNER JOIN contacts c ON u.uid = c.uid;\n</code></pre> uid username email firstname lastname cid email_1 type uid_1 1 denis denis.rinfret@example.com None None 1 help@example.com emergency 1 1 denis denis.rinfret@example.com None None 2 minh@example.com friend 1 2 minh minh@example.com None None 3 contact@example.com colleague 2 2 minh minh@example.com None None 4 ha@example.com family 2"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#trouver-les-utilisateurs-sans-contacts-durgence_2","title":"Trouver les utilisateurs sans contacts d\u2019urgence","text":"<pre><code>SELECT uid, username, email\nFROM users\nWHERE uid NOT IN (SELECT uid\n                  FROM contacts\n                  WHERE type = 'emergency');\n</code></pre> uid username email 2 minh minh@example.com <pre><code>SELECT users.uid, username, email\nFROM users\n         LEFT JOIN (SELECT uid\n                    FROM contacts\n                    WHERE type = 'emergency') AS temp\n                   ON users.uid = temp.uid\nWHERE temp.uid IS NULL;\n</code></pre> uid username email 2 minh minh@example.com"},{"location":"5.%20Advanced%20SQL/03-objet-relationel/#comment-traitons-nous-les-relations-plusieurs-a-plusieurs","title":"Comment traitons-nous les relations plusieurs \u00e0 plusieurs ?","text":"<ul> <li>Dans une base de donn\u00e9es relationnelle, nous avons besoin d\u2019une table   suppl\u00e9mentaire entre les 2 tables.<ul> <li>Par exemple, nous avons besoin d\u2019une table entre \u201cUsers\u201d et \u201cContacts\u201d,   contenant des cl\u00e9s \u00e9trang\u00e8res pour les ID d\u2019utilisateur et les ID de   contact.</li> </ul> </li> <li>Comment r\u00e9cup\u00e9rons-nous toutes les donn\u00e9es ?<ul> <li>Avec 2 jointures.</li> </ul> </li> <li>Qu\u2019en est-il des autres mod\u00e8les de donn\u00e9es ?<ul> <li>Avec des tableaux ?</li> <li>Avec JSONB ?</li> </ul> </li> </ul> <p>Il n\u2019y a pas de solutions miracles pour les relations plusieurs \u00e0 plusieurs</p>"},{"location":"5.%20Advanced%20SQL/04-transactions/","title":"Transactions","text":"<p>exemples_fk.sql</p>"},{"location":"5.%20Advanced%20SQL/04-transactions/#version-1","title":"Version 1","text":"<pre><code>create schema exemples_fk1;\nset search_path to exemples_fk1;\n\ncreate table users\n(\n    id       int generated by default as identity primary key,\n    username varchar(16) unique not null,\n    email    text unique        not null\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text not null,\n    description text not null,\n    user_id int references users(id)\n);\n</code></pre> <pre><code>@startuml\n\nentity users {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * username: varchar(16)\n    * email: text\n}\n\nentity profile {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * name: text\n    * description: text\n    user_id: int &lt;&lt;fk users(id)&gt;&gt;\n}\n\nusers \"0..1\" -- \"*\" profile\n\n@enduml\n</code></pre>"},{"location":"5.%20Advanced%20SQL/04-transactions/#version-2","title":"Version 2","text":"<pre><code>@startuml\n\nentity users {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * username: varchar(16)\n    * email: text\n}\n\nentity profile {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * name: text\n    * description: text\n    * user_id: int &lt;&lt;fk users(id)&gt;&gt;\n}\n\nusers \"1\" -- \"*\" profile\n\n@enduml\n</code></pre> <pre><code>create schema exemples_fk2;\nset search_path to exemples_fk2;\n\ncreate table users\n(\n    id       int generated by default as identity primary key,\n    username varchar(16) unique not null,\n    email    text unique        not null\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text not null,\n    description text not null,\n    user_id int references users(id) not null \n);\n</code></pre>"},{"location":"5.%20Advanced%20SQL/04-transactions/#version-3","title":"Version 3","text":"<pre><code>@startuml\n\nentity users {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * username: varchar(16)\n    * email: text\n    profile_id: int &lt;&lt;fk profile(id)&gt;&gt;\n}\n\nentity profile {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * name: text\n    * description: text\n    * user_id: int &lt;&lt;fk users(id)&gt;&gt;\n}\n\nusers \"1\" -- \"0..1\" profile\n\n@enduml\n</code></pre> <pre><code>create schema exemples_fk3;\nset search_path to exemples_fk3;\n\n-- erreur, profile n'existe pas\n-- si on inverse la cr\u00e9ation des tables, on obtiendra \u00e9galement une erreur, que users n'existe pas\ncreate table users\n(\n    id         int generated by default as identity primary key,\n    username   varchar(16) unique not null,\n    email      text unique        not null,\n    profile_id int references profile (id)\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text                      not null,\n    description text                      not null,\n    user_id     int references users (id) not null\n);\n</code></pre> <pre><code>create schema exemples_fk3;\nset search_path to exemples_fk3;\n\ncreate table users\n(\n    id         int generated by default as identity primary key,\n    username   varchar(16) unique not null,\n    email      text unique        not null,\n    profile_id int -- references profile (id)\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text                      not null,\n    description text                      not null,\n    user_id     int references users (id) not null\n);\n\nalter table users add foreign key (profile_id) references profile(id);\n\ninsert into users(username, email) values ('denis', 'denis@example.com');\ninsert into profile(name, description, user_id) values ('public', 'profil public', 1); \nupdate users set profile_id = 1 where id = 1;\n</code></pre>"},{"location":"5.%20Advanced%20SQL/04-transactions/#version-4","title":"Version 4","text":"<pre><code>@startuml\n\nentity users {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * username: varchar(16)\n    * email: text\n    * profile_id: int &lt;&lt;fk profile(id)&gt;&gt;\n}\n\nentity profile {\n    * id: int &lt;&lt;generated&gt;&gt; &lt;&lt;pk&gt;&gt;\n    --\n    * name: text\n    * description: text\n    * user_id: int &lt;&lt;fk users(id)&gt;&gt;\n}\n\nusers \"1\" -- \"1\" profile\n\n@enduml\n</code></pre> <pre><code>create schema exemples_fk4;\nset search_path to exemples_fk4;\n\ncreate table users\n(\n    id         int generated by default as identity primary key,\n    username   varchar(16) unique not null,\n    email      text unique        not null,\n    profile_id int                not null -- references profile (id)\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text                      not null,\n    description text                      not null,\n    user_id     int references users (id) not null\n);\n\nalter table users\n    add foreign key (profile_id) references profile (id);\n\n\n-- erreur: profile_id ne peut pas \u00eatre null\ninsert into users(username, email)\nvalues ('denis', 'denis@example.com');\n\n-- erreur: user_id n'existe pas\ninsert into profile(name, description, user_id)\nvalues ('public', 'profil public', 1);\n</code></pre> <p>Solution : utiliser une transaction</p> <pre><code>create schema exemples_fk5;\nset search_path to exemples_fk5;\n\ncreate table users\n(\n    id         int generated by default as identity primary key,\n    username   varchar(16) unique not null,\n    email      text unique        not null,\n    profile_id int                not null -- references profile (id)\n);\n\ncreate table profile\n(\n    id          int generated by default as identity primary key,\n    name        text                      not null,\n    description text                      not null,\n    user_id     int references users (id) not null\n);\n\nalter table users\n    add constraint user_id_fk foreign key (profile_id) references profile (id) deferrable;\n</code></pre>"},{"location":"5.%20Advanced%20SQL/04-transactions/#transaction","title":"Transaction","text":"<pre><code>begin transaction;\n\nset constraints user_id_fk deferred ;\n\ninsert into users(username, email, profile_id)\nvalues ('denis', 'denis@example.com', 0);\n\ninsert into profile(name, description, user_id)\nvalues ('public', 'profil public', 1);\n\nupdate users set profile_id = 1 where id = 1;\n\nset constraints user_id_fk immediate;\n\ncommit;\n</code></pre>"},{"location":"5.%20Advanced%20SQL/04-transactions/#insert-into-retuning-id","title":"insert into \u2026 retuning id","text":"<pre><code>insert into profile(name, description, user_id)\nvalues ('public', 'profil public', 1) returning id;\n</code></pre>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/","title":"Gestion des Utilisateurs et S\u00e9curit\u00e9","text":"<p>La gestion des utilisateurs et la s\u00e9curit\u00e9 sont des aspects cruciaux de l\u2019administration des Syst\u00e8mes de Gestion de Bases de Donn\u00e9es (SGBD). Une bonne compr\u00e9hension de ces concepts est essentielle pour garantir l\u2019int\u00e9grit\u00e9, la confidentialit\u00e9 et la disponibilit\u00e9 des donn\u00e9es. Voici une introduction g\u00e9n\u00e9rale \u00e0 ces sujets.</p>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#1-gestion-des-utilisateurs","title":"1. Gestion des Utilisateurs","text":""},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#11-creation-et-gestion-des-comptes-utilisateurs","title":"1.1. Cr\u00e9ation et Gestion des Comptes Utilisateurs","text":"<p>La gestion des utilisateurs dans un SGBD implique la cr\u00e9ation, la modification et la suppression de comptes utilisateurs. Chaque utilisateur se voit attribuer un identifiant unique et des informations d\u2019authentification (comme un mot de passe). Voici quelques concepts cl\u00e9s :</p> <ul> <li>Cr\u00e9ation de Comptes : Les administrateurs de bases de donn\u00e9es (DBA) cr\u00e9ent   des comptes utilisateurs en d\u00e9finissant des identifiants et des mots de passe.</li> <li>Modification de Comptes : Les DBA peuvent modifier les informations des   comptes existants, comme les mots de passe ou les r\u00f4les attribu\u00e9s.</li> <li>Suppression de Comptes : Les comptes inutilis\u00e9s ou compromis peuvent \u00eatre   supprim\u00e9s pour maintenir la s\u00e9curit\u00e9.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#12-roles-et-privileges","title":"1.2. R\u00f4les et Privil\u00e8ges","text":"<p>Les r\u00f4les et privil\u00e8ges d\u00e9terminent ce que chaque utilisateur peut faire dans la base de donn\u00e9es.</p> <ul> <li>R\u00f4les : Un r\u00f4le est un ensemble de privil\u00e8ges qui peuvent \u00eatre attribu\u00e9s \u00e0   un ou plusieurs utilisateurs. Les r\u00f4les facilitent la gestion des permissions   en regroupant des privil\u00e8ges communs.</li> <li>Privil\u00e8ges : Les privil\u00e8ges sont des autorisations sp\u00e9cifiques accord\u00e9es   aux utilisateurs ou aux r\u00f4les. Ils peuvent inclure des actions comme SELECT,   INSERT, UPDATE, DELETE, CREATE, et DROP.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#2-securite-dans-un-sgbd","title":"2. S\u00e9curit\u00e9 dans un SGBD","text":""},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#21-authentification","title":"2.1. Authentification","text":"<p>L\u2019authentification est le processus de v\u00e9rification de l\u2019identit\u00e9 d\u2019un utilisateur. Les m\u00e9thodes courantes incluent :</p> <ul> <li>Mots de Passe : La m\u00e9thode la plus courante o\u00f9 les utilisateurs doivent   fournir un mot de passe pour acc\u00e9der \u00e0 la base de donn\u00e9es.</li> <li>Authentification \u00e0 Deux Facteurs (2FA) : Ajoute une couche de s\u00e9curit\u00e9   suppl\u00e9mentaire en exigeant un second facteur, comme un code envoy\u00e9 par SMS.</li> <li>Certificats : Utilis\u00e9s pour l\u2019authentification bas\u00e9e sur des certificats   num\u00e9riques.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#22-autorisation","title":"2.2. Autorisation","text":"<p>L\u2019autorisation d\u00e9termine ce que les utilisateurs authentifi\u00e9s sont autoris\u00e9s \u00e0 faire. Elle est g\u00e9r\u00e9e par des r\u00f4les et des privil\u00e8ges, comme mentionn\u00e9 pr\u00e9c\u00e9demment. Les DBA doivent s\u2019assurer que les utilisateurs n\u2019ont que les privil\u00e8ges n\u00e9cessaires pour accomplir leurs t\u00e2ches (principe du moindre privil\u00e8ge).</p>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#23-controle-dacces","title":"2.3. Contr\u00f4le d\u2019Acc\u00e8s","text":"<p>Le contr\u00f4le d\u2019acc\u00e8s est la mise en \u0153uvre des politiques d\u2019autorisation. Il existe plusieurs mod\u00e8les de contr\u00f4le d\u2019acc\u00e8s :</p> <ul> <li>Contr\u00f4le d\u2019Acc\u00e8s Discr\u00e9tionnaire (DAC) : Les propri\u00e9taires des objets de   la base de donn\u00e9es (comme les tables) contr\u00f4lent l\u2019acc\u00e8s \u00e0 leurs objets.</li> <li>Contr\u00f4le d\u2019Acc\u00e8s Obligatoire (MAC) : Les acc\u00e8s sont contr\u00f4l\u00e9s par des   r\u00e8gles globales d\u00e9finies par l\u2019administrateur, souvent bas\u00e9es sur des niveaux   de s\u00e9curit\u00e9.</li> <li>Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) : Les acc\u00e8s sont accord\u00e9s en   fonction des r\u00f4les attribu\u00e9s aux utilisateurs.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#24-securite-des-donnees","title":"2.4. S\u00e9curit\u00e9 des Donn\u00e9es","text":"<p>La s\u00e9curit\u00e9 des donn\u00e9es comprend la protection des donn\u00e9es \u00e0 la fois en transit et au repos.</p> <ul> <li>Chiffrement : Les donn\u00e9es peuvent \u00eatre chiffr\u00e9es pour emp\u00eacher l\u2019acc\u00e8s non   autoris\u00e9. Le chiffrement peut \u00eatre appliqu\u00e9 aux donn\u00e9es en transit (   lorsqu\u2019elles sont transf\u00e9r\u00e9es sur le r\u00e9seau) et aux donn\u00e9es au repos (   lorsqu\u2019elles sont stock\u00e9es).</li> <li>Masquage de Donn\u00e9es : Technique permettant de masquer les donn\u00e9es   sensibles pour les utilisateurs qui n\u2019ont pas besoin d\u2019y acc\u00e9der directement.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#25-audit-et-surveillance","title":"2.5. Audit et Surveillance","text":"<p>Les syst\u00e8mes de gestion de bases de donn\u00e9es doivent inclure des m\u00e9canismes pour auditer et surveiller les activit\u00e9s des utilisateurs. Cela permet de d\u00e9tecter et de r\u00e9pondre aux comportements suspects ou non autoris\u00e9s.</p> <ul> <li>Journaux d\u2019Audit : Enregistrement des actions des utilisateurs, comme les   connexions, les modifications de donn\u00e9es, etc.</li> <li>Alertes de S\u00e9curit\u00e9 : Notifications automatiques en cas d\u2019activit\u00e9s   suspectes ou de violations de s\u00e9curit\u00e9.</li> </ul>"},{"location":"6.%20Security%20and%20Users/01-s%C3%A9curit%C3%A9/#conclusion","title":"Conclusion","text":"<p>La gestion des utilisateurs et la s\u00e9curit\u00e9 dans un SGBD sont des domaines vastes et complexes, mais essentiels pour prot\u00e9ger les donn\u00e9es et garantir leur int\u00e9grit\u00e9. Une compr\u00e9hension approfondie de ces concepts permet aux administrateurs de bases de donn\u00e9es de mettre en place des syst\u00e8mes robustes et s\u00e9curis\u00e9s, minimisant ainsi les risques de compromission des donn\u00e9es.</p> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"6.%20Security%20and%20Users/02-rbac/","title":"Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC)","text":"<p>Le Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode de gestion des autorisations qui permet de contr\u00f4ler l\u2019acc\u00e8s aux ressources en fonction des r\u00f4les attribu\u00e9s aux utilisateurs au sein d\u2019une organisation. Cette approche est largement utilis\u00e9e dans les syst\u00e8mes d\u2019information pour g\u00e9rer les permissions de mani\u00e8re efficace et s\u00e9curis\u00e9e. Voici une vue d\u00e9taill\u00e9e du RBAC, ses concepts cl\u00e9s, ses avantages, et ses meilleures pratiques.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#1-concepts-cles-du-rbac","title":"1. Concepts Cl\u00e9s du RBAC","text":""},{"location":"6.%20Security%20and%20Users/02-rbac/#11-roles","title":"1.1. R\u00f4les","text":"<p>Un r\u00f4le est une collection de permissions qui d\u00e9finissent ce qu\u2019un utilisateur peut faire dans le syst\u00e8me. Les r\u00f4les sont g\u00e9n\u00e9ralement bas\u00e9s sur les responsabilit\u00e9s des utilisateurs au sein de l\u2019organisation. Par exemple, les r\u00f4les peuvent inclure \u201cAdministrateur\u201d, \u201cD\u00e9veloppeur\u201d, \u201cAnalyste\u201d, etc.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#12-utilisateurs","title":"1.2. Utilisateurs","text":"<p>Les utilisateurs sont les individus qui interagissent avec le syst\u00e8me. Chaque utilisateur se voit attribuer un ou plusieurs r\u00f4les, d\u00e9terminant ainsi ses permissions.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#13-permissions","title":"1.3. Permissions","text":"<p>Les permissions sont des autorisations sp\u00e9cifiques qui permettent d\u2019effectuer des actions sur des objets du syst\u00e8me. Par exemple, les permissions peuvent inclure \u201clire un fichier\u201d, \u201c\u00e9crire dans une base de donn\u00e9es\u201d, \u201cmodifier une configuration\u201d, etc.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#14-sessions","title":"1.4. Sessions","text":"<p>Les sessions repr\u00e9sentent une instance de connexion d\u2019un utilisateur au syst\u00e8me. Pendant une session, l\u2019utilisateur peut exercer les permissions associ\u00e9es \u00e0 ses r\u00f4les.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#2-modeles-de-rbac","title":"2. Mod\u00e8les de RBAC","text":"<p>Il existe plusieurs mod\u00e8les de RBAC, chacun offrant diff\u00e9rents niveaux de contr\u00f4le et de flexibilit\u00e9 :</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#21-rbac-de-base-rbac0","title":"2.1. RBAC de Base (RBAC0)","text":"<p>Le mod\u00e8le de base permet d\u2019assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#22-rbac-hierarchique-rbac1","title":"2.2. RBAC Hi\u00e9rarchique (RBAC1)","text":"<p>Le mod\u00e8le hi\u00e9rarchique introduit la notion de hi\u00e9rarchie des r\u00f4les, o\u00f9 les r\u00f4les peuvent h\u00e9riter des permissions d\u2019autres r\u00f4les. Cela permet de cr\u00e9er des r\u00f4les parents et enfants, facilitant la gestion des permissions.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#23-rbac-contrainte-rbac2","title":"2.3. RBAC Contrainte (RBAC2)","text":"<p>Le mod\u00e8le contraint ajoute des contraintes suppl\u00e9mentaires pour renforcer la s\u00e9curit\u00e9. Par exemple, des contraintes de s\u00e9paration des t\u00e2ches peuvent \u00eatre appliqu\u00e9es pour s\u2019assurer qu\u2019aucun utilisateur n\u2019a des permissions conflictuelles.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#24-rbac-symbiotique-rbac3","title":"2.4. RBAC Symbiotique (RBAC3)","text":"<p>Le mod\u00e8le symbiotique combine les fonctionnalit\u00e9s des mod\u00e8les hi\u00e9rarchique et contraint, offrant ainsi une flexibilit\u00e9 maximale et une s\u00e9curit\u00e9 renforc\u00e9e.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#3-avantages-du-rbac","title":"3. Avantages du RBAC","text":"<ul> <li>Simplicit\u00e9 : Simplifie la gestion des permissions en regroupant les   autorisations communes dans des r\u00f4les.</li> <li>S\u00e9curit\u00e9 : R\u00e9duit les risques d\u2019erreurs de configuration des permissions   et renforce la s\u00e9curit\u00e9 en centralisant la gestion des acc\u00e8s.</li> <li>Scalabilit\u00e9 : Facilite la gestion des permissions dans des environnements   avec de nombreux utilisateurs et r\u00f4les.</li> <li>Conformit\u00e9 : Aide \u00e0 respecter les r\u00e9glementations en mati\u00e8re de s\u00e9curit\u00e9   et de confidentialit\u00e9 en appliquant des politiques d\u2019acc\u00e8s strictes.</li> </ul>"},{"location":"6.%20Security%20and%20Users/02-rbac/#4-meilleures-pratiques-pour-limplementation-du-rbac","title":"4. Meilleures Pratiques pour l\u2019Impl\u00e9mentation du RBAC","text":""},{"location":"6.%20Security%20and%20Users/02-rbac/#41-analyse-des-roles","title":"4.1. Analyse des R\u00f4les","text":"<p>Commencez par analyser les responsabilit\u00e9s et les t\u00e2ches des utilisateurs au sein de l\u2019organisation pour d\u00e9finir des r\u00f4les appropri\u00e9s. Assurez-vous que chaque r\u00f4le correspond \u00e0 un ensemble coh\u00e9rent de permissions.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#42-minimisation-des-privileges","title":"4.2. Minimisation des Privil\u00e8ges","text":"<p>Appliquez le principe du moindre privil\u00e8ge en attribuant uniquement les permissions n\u00e9cessaires \u00e0 chaque r\u00f4le. \u00c9vitez de donner des permissions excessives qui pourraient compromettre la s\u00e9curit\u00e9.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#43-utilisation-de-la-hierarchie-des-roles","title":"4.3. Utilisation de la Hi\u00e9rarchie des R\u00f4les","text":"<p>Utilisez des r\u00f4les hi\u00e9rarchiques pour simplifier la gestion des permissions. Les r\u00f4les parents peuvent regrouper des permissions communes, tandis que les r\u00f4les enfants h\u00e9ritent de ces permissions et ajoutent des permissions sp\u00e9cifiques.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#44-separation-des-taches","title":"4.4. S\u00e9paration des T\u00e2ches","text":"<p>Impl\u00e9mentez des contraintes de s\u00e9paration des t\u00e2ches pour \u00e9viter les conflits d\u2019int\u00e9r\u00eats. Par exemple, un utilisateur ne devrait pas avoir \u00e0 la fois des permissions de cr\u00e9ation et d\u2019approbation de transactions financi\u00e8res.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#45-surveillance-et-audit","title":"4.5. Surveillance et Audit","text":"<p>Mettez en place des m\u00e9canismes de surveillance et d\u2019audit pour suivre les activit\u00e9s des utilisateurs et d\u00e9tecter les comportements suspects. Les journaux d\u2019audit peuvent aider \u00e0 identifier les violations de s\u00e9curit\u00e9 et \u00e0 prendre des mesures correctives.</p>"},{"location":"6.%20Security%20and%20Users/02-rbac/#5-exemple-dimplementation-du-rbac","title":"5. Exemple d\u2019Impl\u00e9mentation du RBAC","text":"<p>Supposons que vous avez une organisation avec les r\u00f4les suivants : Administrateur, D\u00e9veloppeur, et Analyste. Voici comment vous pourriez d\u00e9finir et attribuer des r\u00f4les et des permissions :</p> <ol> <li> <p>D\u00e9finir les r\u00f4les :</p> <ul> <li>Administrateur : Permissions de gestion du syst\u00e8me, cr\u00e9ation et   suppression d\u2019utilisateurs, configuration du syst\u00e8me.</li> <li>D\u00e9veloppeur : Permissions de lecture et \u00e9criture dans le code source,   d\u00e9ploiement d\u2019applications.</li> <li>Analyste : Permissions de lecture des donn\u00e9es, g\u00e9n\u00e9ration de rapports.</li> </ul> </li> <li> <p>Attribuer les r\u00f4les aux utilisateurs :</p> <ul> <li>Alice : Administrateur</li> <li>Bob : D\u00e9veloppeur</li> <li>Carol : Analyste</li> </ul> </li> <li> <p>D\u00e9finir les permissions pour chaque r\u00f4le :     -     Administrateur : <code>manage_system</code>, <code>create_user</code>, <code>delete_user</code>, <code>configure_system</code></p> <ul> <li>D\u00e9veloppeur : <code>read_code</code>, <code>write_code</code>, <code>deploy_application</code></li> <li>Analyste : <code>read_data</code>, <code>generate_report</code></li> </ul> </li> </ol>"},{"location":"6.%20Security%20and%20Users/02-rbac/#conclusion","title":"Conclusion","text":"<p>Le Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC) est une m\u00e9thode puissante et flexible pour g\u00e9rer les permissions dans les syst\u00e8mes d\u2019information. En d\u00e9finissant des r\u00f4les et en attribuant des permissions de mani\u00e8re coh\u00e9rente, les organisations peuvent am\u00e9liorer la s\u00e9curit\u00e9, simplifier la gestion des acc\u00e8s, et assurer la conformit\u00e9 avec les r\u00e9glementations. L\u2019impl\u00e9mentation du RBAC n\u00e9cessite une analyse minutieuse des responsabilit\u00e9s des utilisateurs et l\u2019 application de meilleures pratiques pour garantir une gestion efficace et s\u00e9curis\u00e9e des acc\u00e8s.</p> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/","title":"Gestion des Utilisateurs dans PostgreSQL","text":"<p>Dans PostgreSQL, les termes \u201cutilisateur\u201d et \u201cr\u00f4le\u201d sont souvent utilis\u00e9s de mani\u00e8re interchangeable, mais il existe des diff\u00e9rences subtiles. Un <code>user</code> est essentiellement un r\u00f4le avec la capacit\u00e9 de se connecter (l\u2019option <code>LOGIN</code>), tandis qu\u2019un <code>role</code> sans cette capacit\u00e9 est par d\u00e9faut cr\u00e9\u00e9 avec l\u2019option <code>NOLOGIN</code>. Cette distinction permet de cr\u00e9er des r\u00f4les qui servent uniquement \u00e0 regrouper des privil\u00e8ges sans permettre la connexion directe \u00e0 la base de donn\u00e9es.</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#1-creation-et-gestion-des-comptes-utilisateurs","title":"1. Cr\u00e9ation et Gestion des Comptes Utilisateurs","text":""},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#11-creation-dun-utilisateur","title":"1.1. Cr\u00e9ation d\u2019un Utilisateur","text":"<p>Pour cr\u00e9er un nouvel utilisateur dans PostgreSQL, vous utilisez la commande <code>CREATE USER</code> ou <code>CREATE ROLE</code> avec l\u2019option <code>LOGIN</code>. Voici un exemple de cr\u00e9ation d\u2019un utilisateur avec un mot de passe :</p> <pre><code>CREATE USER nom_utilisateur WITH PASSWORD 'mot_de_passe';\n</code></pre> <p>Exemple :</p> <pre><code>CREATE USER alice WITH PASSWORD 'password123';\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#12-modification-dun-utilisateur","title":"1.2. Modification d\u2019un Utilisateur","text":"<p>Pour modifier un utilisateur existant, vous pouvez utiliser la commande <code>ALTER USER</code>. Par exemple, pour changer le mot de passe d\u2019un utilisateur :</p> <pre><code>ALTER USER nom_utilisateur WITH PASSWORD 'nouveau_mot_de_passe';\n</code></pre> <p>Exemple :</p> <pre><code>ALTER USER alice WITH PASSWORD 'newpassword456';\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#13-suppression-dun-utilisateur","title":"1.3. Suppression d\u2019un Utilisateur","text":"<p>Pour supprimer un utilisateur, utilisez la commande <code>DROP USER</code> :</p> <pre><code>DROP USER nom_utilisateur;\n</code></pre> <p>Exemple :</p> <pre><code>DROP USER alice;\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#2-modification-de-mot-de-passe-dans-postgresql-a-partir-du-terminal-avec-psql","title":"2. Modification de Mot de Passe dans PostgreSQL \u00e0 partir du Terminal avec <code>psql</code>","text":"<p>Modifier un mot de passe dans PostgreSQL peut se faire de diff\u00e9rentes mani\u00e8res selon si l\u2019utilisateur souhaite changer son propre mot de passe ou si un administrateur souhaite changer le mot de passe d\u2019un autre utilisateur. Voici comment proc\u00e9der dans les deux cas, en utilisant <code>psql</code>.</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#21-un-utilisateur-qui-veut-modifier-son-propre-mot-de-passe","title":"2.1. Un Utilisateur qui Veut Modifier son Propre Mot de Passe","text":"<p>Pour qu\u2019un utilisateur modifie son propre mot de passe sans l\u2019\u00e9crire en clair dans une commande <code>ALTER USER</code>, il peut utiliser la commande <code>\\password</code> dans <code>psql</code>. Cette commande invite l\u2019utilisateur \u00e0 entrer son nouveau mot de passe de mani\u00e8re s\u00e9curis\u00e9e.</p> <p>Voici les \u00e9tapes :</p> <ol> <li> <p>Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu\u2019utilisateur dont    vous souhaitez modifier le mot de passe : <pre><code>psql -U nom_utilisateur -d nom_base_de_donnees\n</code></pre></p> </li> <li> <p>Une fois connect\u00e9, ex\u00e9cutez la commande <code>\\password</code> : <pre><code>\\password\n</code></pre></p> </li> <li> <p>PostgreSQL vous demandera d\u2019entrer le nouveau mot de passe deux fois pour    confirmation : <pre><code>Enter new password:\nEnter it again:\n</code></pre></p> </li> </ol> <p>Exemple complet :</p> <pre><code>psql -U alice -d mydatabase\n</code></pre> <pre><code>\\password\nEnter new password:\nEnter it again:\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#22-un-administrateur-qui-veut-modifier-le-mot-de-passe-dun-autre-utilisateur","title":"2.2. Un Administrateur qui Veut Modifier le Mot de Passe d\u2019un Autre Utilisateur","text":"<p>Pour qu\u2019un administrateur modifie le mot de passe d\u2019un autre utilisateur sans l\u2019\u00e9crire en clair dans une commande <code>ALTER USER</code>, il peut utiliser la commande <code>\\password</code> suivie du nom de l\u2019utilisateur cible. Cela permet de modifier le mot de passe de l\u2019utilisateur de mani\u00e8re s\u00e9curis\u00e9e.</p> <p>Voici les \u00e9tapes :</p> <p>1- Ouvrez le terminal et connectez-vous \u00e0 PostgreSQL en tant qu\u2019administrateur (    ou un utilisateur ayant les privil\u00e8ges n\u00e9cessaires) : <pre><code>psql -U admin -d nom_base_de_donnees\n</code></pre></p> <p>2- Une fois connect\u00e9, ex\u00e9cutez la commande <code>\\password</code> suivie du nom de    l\u2019utilisateur dont vous souhaitez modifier le mot de passe : <pre><code>\\password nom_utilisateur\n</code></pre></p> <p>3- PostgreSQL vous demandera d\u2019entrer le nouveau mot de passe deux fois pour    confirmation : <pre><code>Enter new password:\nEnter it again:\n</code></pre></p> <p>Exemple complet :</p> <pre><code>psql -U admin -d mydatabase\n</code></pre> <pre><code>\\password alice\nEnter new password:\nEnter it again:\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#3-options-de-create-role-et-create-user","title":"3. Options de <code>CREATE ROLE</code> et <code>CREATE USER</code>","text":"<p>PostgreSQL offre plusieurs options lors de la cr\u00e9ation d\u2019utilisateurs et de r\u00f4les pour sp\u00e9cifier leurs capacit\u00e9s et restrictions. Voici quelques-unes des options les plus courantes :</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#31-options-de-create-role","title":"3.1. Options de <code>CREATE ROLE</code>","text":"<ul> <li>LOGIN/NOLOGIN : Sp\u00e9cifie si le r\u00f4le peut se connecter \u00e0 la base de   donn\u00e9es.</li> <li>SUPERUSER/NOSUPERUSER : Sp\u00e9cifie si le r\u00f4le a des privil\u00e8ges   superutilisateur.</li> <li>CREATEDB/NOCREATEDB : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er des bases de donn\u00e9es.</li> <li>CREATEROLE/NOCREATEROLE : Sp\u00e9cifie si le r\u00f4le peut cr\u00e9er d\u2019autres r\u00f4les.</li> <li>INHERIT/NOINHERIT : Sp\u00e9cifie si le r\u00f4le h\u00e9rite des privil\u00e8ges des r\u00f4les   auxquels il appartient.</li> <li>REPLICATION/NOREPLICATION : Sp\u00e9cifie si le r\u00f4le peut initier des   connexions de r\u00e9plication.</li> <li>CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour le   r\u00f4le.</li> </ul> <p>Exemple :</p> <pre><code>CREATE ROLE dev_team NOLOGIN;\nCREATE ROLE admin WITH LOGIN SUPERUSER CREATEDB CREATEROLE;\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#32-options-de-create-user","title":"3.2. Options de <code>CREATE USER</code>","text":"<p>Les options pour <code>CREATE USER</code> sont similaires \u00e0 celles de <code>CREATE ROLE</code>, avec l\u2019option <code>LOGIN</code> \u00e9tant implicite :</p> <ul> <li>PASSWORD : D\u00e9finit le mot de passe pour l\u2019utilisateur.</li> <li>VALID UNTIL : D\u00e9finit une date d\u2019expiration pour le mot de passe.</li> <li>CONNECTION LIMIT : Limite le nombre de connexions simultan\u00e9es pour   l\u2019utilisateur.</li> </ul> <p>Exemple :</p> <pre><code>CREATE USER alice WITH PASSWORD 'password123' VALID UNTIL '2024-12-31' CONNECTION LIMIT 5;\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#4-privileges","title":"4. Privil\u00e8ges","text":""},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#41-privileges-de-base","title":"4.1. Privil\u00e8ges de Base","text":"<p>Voici quelques privil\u00e8ges de base que vous pouvez attribuer aux utilisateurs ou aux r\u00f4les :</p> <ul> <li>SELECT : Permet de lire les donn\u00e9es d\u2019une table.</li> <li>INSERT : Permet d\u2019ajouter des donn\u00e9es dans une table.</li> <li>UPDATE : Permet de modifier les donn\u00e9es d\u2019une table.</li> <li>DELETE : Permet de supprimer des donn\u00e9es d\u2019une table.</li> <li>CREATE : Permet de cr\u00e9er de nouvelles tables ou bases de donn\u00e9es.</li> <li>DROP : Permet de supprimer des tables ou bases de donn\u00e9es.</li> </ul>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#42-attribution-de-privileges","title":"4.2. Attribution de Privil\u00e8ges","text":"<p>Pour attribuer des privil\u00e8ges \u00e0 un utilisateur ou un r\u00f4le, utilisez la commande <code>GRANT</code>. Par exemple, pour donner des privil\u00e8ges de lecture et d\u2019\u00e9criture sur une table :</p> <pre><code>GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO nom_utilisateur;\n</code></pre> <p>Exemple :</p> <pre><code>GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO alice;\n</code></pre>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#5-controle-dacces","title":"5. Contr\u00f4le d\u2019Acc\u00e8s","text":""},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#51-controle-dacces-base-sur-les-roles","title":"5.1. Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les","text":"<p>PostgreSQL utilise le mod\u00e8le de Contr\u00f4le d\u2019Acc\u00e8s Bas\u00e9 sur les R\u00f4les (RBAC). Les r\u00f4les peuvent \u00eatre utilis\u00e9s pour simplifier la gestion des privil\u00e8ges. Par exemple, vous pouvez cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs et attribuer ce r\u00f4le \u00e0 tous les utilisateurs qui sont des d\u00e9veloppeurs.</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#52-exemple-de-controle-dacces","title":"5.2. Exemple de Contr\u00f4le d\u2019Acc\u00e8s","text":"<p>Supposons que vous avez une base de donn\u00e9es avec plusieurs tables et que vous souhaitez g\u00e9rer les acc\u00e8s de mani\u00e8re structur\u00e9e :</p> <p>1- Cr\u00e9er un r\u00f4le pour les d\u00e9veloppeurs : <pre><code>CREATE ROLE dev_team;\n</code></pre></p> <p>2- Attribuer des privil\u00e8ges au r\u00f4le : <pre><code>GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team;\n</code></pre></p> <p>3- Attribuer le r\u00f4le aux utilisateurs : <pre><code>GRANT dev_team TO alice;\nGRANT dev_team TO bob;\n</code></pre></p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#postgresql-et-le-rbac","title":"PostgreSQL et le RBAC","text":"<p>PostgreSQL utilise le RBAC pour g\u00e9rer les permissions et les acc\u00e8s des utilisateurs. PostgreSQL impl\u00e9mente principalement le mod\u00e8le de RBAC de Base (RBAC0), mais il supporte \u00e9galement certaines fonctionnalit\u00e9s avanc\u00e9es qui permettent de cr\u00e9er des hi\u00e9rarchies de r\u00f4les, ce qui le rapproche du RBAC Hi\u00e9rarchique (RBAC1).</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#modele-de-rbac-dans-postgresql","title":"Mod\u00e8le de RBAC dans PostgreSQL","text":""},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#1-rbac-de-base-rbac0","title":"1. RBAC de Base (RBAC0)","text":"<p>Dans PostgreSQL, le RBAC de base permet d\u2019assigner des r\u00f4les aux utilisateurs et de d\u00e9finir des permissions pour chaque r\u00f4le. Les utilisateurs h\u00e9ritent des permissions de leurs r\u00f4les. Voici comment cela fonctionne :</p> <ul> <li>R\u00f4les et Utilisateurs : PostgreSQL traite les r\u00f4les et les utilisateurs de   mani\u00e8re interchangeable. Un utilisateur est simplement un r\u00f4le avec la   capacit\u00e9 de se connecter (<code>LOGIN</code>).</li> <li>Permissions : Les permissions sont attribu\u00e9es aux r\u00f4les et peuvent inclure   des actions comme <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>CREATE</code>, et <code>DROP</code>.</li> </ul>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#2-rbac-hierarchique-rbac1","title":"2. RBAC Hi\u00e9rarchique (RBAC1)","text":"<p>PostgreSQL supporte \u00e9galement des fonctionnalit\u00e9s de hi\u00e9rarchie des r\u00f4les, permettant \u00e0 un r\u00f4le d\u2019h\u00e9riter des permissions d\u2019un autre r\u00f4le. Cela facilite la gestion des permissions en cr\u00e9ant des r\u00f4les parents et enfants.</p> <ul> <li>H\u00e9ritage des R\u00f4les : Les r\u00f4les peuvent \u00eatre configur\u00e9s pour h\u00e9riter des   permissions d\u2019autres r\u00f4les en utilisant l\u2019option <code>INHERIT</code>. Par d\u00e9faut, les   r\u00f4les sont cr\u00e9\u00e9s avec l\u2019option <code>INHERIT</code>.</li> </ul>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#exemples-dutilisation-du-rbac-dans-postgresql","title":"Exemples d\u2019Utilisation du RBAC dans PostgreSQL","text":""},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#creation-de-roles-et-attribution-de-permissions","title":"Cr\u00e9ation de R\u00f4les et Attribution de Permissions","text":"<p>1- Cr\u00e9er des r\u00f4les : <pre><code>CREATE ROLE dev_team;\nCREATE ROLE qa_team;\nCREATE ROLE admin_team WITH LOGIN SUPERUSER;\n</code></pre></p> <p>2- Attribuer des privil\u00e8ges aux r\u00f4les : <pre><code>GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO dev_team;\nGRANT SELECT ON employees TO qa_team;\n</code></pre></p> <p>3- Cr\u00e9er des utilisateurs et attribuer des r\u00f4les : <pre><code>CREATE USER alice WITH PASSWORD 'password123';\nCREATE USER bob WITH PASSWORD 'password456';\nGRANT dev_team TO alice;\nGRANT qa_team TO bob;\n</code></pre></p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#heritage-des-permissions","title":"H\u00e9ritage des Permissions","text":"<p>1- Cr\u00e9er un r\u00f4le parent et un r\u00f4le enfant : <pre><code>CREATE ROLE senior_dev INHERIT;\nGRANT dev_team TO senior_dev;\n</code></pre></p> <p>2- Attribuer le r\u00f4le enfant \u00e0 un utilisateur : <pre><code>CREATE USER charlie WITH PASSWORD 'password789';\nGRANT senior_dev TO charlie;\n</code></pre></p> <p>Dans cet exemple, <code>charlie</code> h\u00e9rite des permissions du r\u00f4le <code>dev_team</code> via le r\u00f4le <code>senior_dev</code>.</p>"},{"location":"6.%20Security%20and%20Users/03-utilisateurs/#conclusion","title":"Conclusion","text":"<p>La gestion des utilisateurs dans PostgreSQL est flexible et puissante gr\u00e2ce \u00e0 l\u2019utilisation des r\u00f4les et des privil\u00e8ges. En suivant les bonnes pratiques de gestion des utilisateurs et des privil\u00e8ges, vous pouvez assurer une s\u00e9curit\u00e9 robuste et une administration efficace de votre base de donn\u00e9es.</p> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/","title":"Gestion des mots de passe d\u2019application dans une BD","text":""},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#distinction-des-types-dutilisateurs","title":"Distinction des Types d\u2019Utilisateurs","text":"<p>Utilisateurs de l\u2019Application Web - Stock\u00e9s dans, par exemple, la table <code>users</code> de la base de donn\u00e9es - S\u2019authentifient via l\u2019interface web - Leurs identifiants et mots de passe sont g\u00e9r\u00e9s par l\u2019application - Leurs permissions sont g\u00e9r\u00e9es au niveau de l\u2019application</p> <p>Utilisateurs de la Base de Donn\u00e9es - Cr\u00e9\u00e9s directement dans PostgreSQL - Utilis\u00e9s pour la connexion \u00e0 la base de donn\u00e9es - G\u00e9r\u00e9s par l\u2019administrateur de la base de donn\u00e9es - Leurs permissions sont g\u00e9r\u00e9es via les commandes GRANT/REVOKE</p>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#bonnes-pratiques","title":"Bonnes Pratiques","text":"<p>Configuration de l\u2019Application - Cr\u00e9er un seul utilisateur PostgreSQL d\u00e9di\u00e9 pour l\u2019application (ex: <code>web_app</code>)[1] - Cet utilisateur unique sert d\u2019interm\u00e9diaire entre l\u2019application et la base de donn\u00e9es - Ne pas cr\u00e9er un utilisateur PostgreSQL pour chaque utilisateur de l\u2019application[1]</p> <p>Exemple de Configuration <pre><code>-- Cr\u00e9ation de l'utilisateur pour l'application\nCREATE ROLE web_app WITH LOGIN PASSWORD 'mot_de_passe_securise';\n\n-- Attribution des permissions n\u00e9cessaires\nGRANT SELECT, INSERT, UPDATE, DELETE ON users TO web_app;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO web_app;\n</code></pre></p> <p>S\u00e9curit\u00e9 - L\u2019application doit agir comme gardien d\u2019acc\u00e8s aux donn\u00e9es[1] - Limiter les privil\u00e8ges de l\u2019utilisateur PostgreSQL aux op\u00e9rations strictement n\u00e9cessaires[4] - Ne jamais donner les droits superutilisateur \u00e0 l\u2019utilisateur de l\u2019application[4] - Impl\u00e9menter un syst\u00e8me de contr\u00f4le d\u2019acc\u00e8s bas\u00e9 sur les r\u00f4les (RBAC) au niveau de l\u2019application[4]</p> <p>Authentification des Utilisateurs Web - G\u00e9rer l\u2019authentification des utilisateurs web via la table <code>users</code> - Utiliser des sessions ou des tokens pour maintenir l\u2019\u00e9tat de connexion - Impl\u00e9menter une politique de mots de passe forts - Stocker uniquement les hachages des mots de passe, jamais en clair</p> <p>Cette approche permet une s\u00e9paration claire des responsabilit\u00e9s tout en maintenant un niveau de s\u00e9curit\u00e9 \u00e9lev\u00e9 pour l\u2019application et la base de donn\u00e9es.</p> <p>Citations: [1] https://stackoverflow.com/questions/17475805/application-user-database-user [2] https://www.strongdm.com/blog/postgres-create-user [3] https://www.linkedin.com/pulse/17-users-vs-roles-postgres-rajneesh-verma [4] https://www.percona.com/blog/postgresql-database-security-best-practices/</p>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#exemple","title":"Exemple","text":"<p>Voici la table <code>users</code> pour g\u00e9rer les mots de passe de mani\u00e8re s\u00e9curis\u00e9e :</p> <pre><code>create table users\n(\n    id            int generated by default as identity primary key,\n    username      varchar(16) unique not null,\n    email         text unique not null,\n    password_hash varchar(60) not null check (length(password_hash) = 60)\n);\n</code></pre>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#explications-des-modifications","title":"Explications des Modifications","text":"<p>La nouvelle colonne <code>password_hash</code> est con\u00e7ue pour stocker des hachages bcrypt :</p> <ul> <li>Le type <code>varchar(60)</code> est utilis\u00e9 car bcrypt produit toujours une cha\u00eene de 60 caract\u00e8res</li> <li>La contrainte <code>check</code> v\u00e9rifie que le hachage a la bonne longueur</li> <li>Le <code>not null</code> assure qu\u2019un mot de passe est toujours requis</li> </ul>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#bonnes-pratiques-de-securite","title":"Bonnes Pratiques de S\u00e9curit\u00e9","text":"<ol> <li>Ne jamais stocker les mots de passe en clair</li> </ol> <ul> <li>Toujours utiliser une fonction de hachage cryptographique</li> <li><code>bcrypt</code> est recommand\u00e9, car il inclut automatiquement un \u201csalt\u201d et est r\u00e9sistant aux attaques par force brute</li> </ul> <ol> <li> <p>Dans l\u2019application <pre><code># Exemple avec Python et bcrypt\nimport bcrypt\n\ndef hash_password(password):\n    # G\u00e9n\u00e8re un salt et hache le mot de passe\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\ndef verify_password(password, hashed):\n    # V\u00e9rifie si le mot de passe correspond au hash\n    return bcrypt.checkpw(password.encode('utf-8'), hashed)\n</code></pre></p> </li> <li> <p>Insertion d\u2019un utilisateur <pre><code>-- Le hash du mot de passe doit \u00eatre g\u00e9n\u00e9r\u00e9 par l'application\nINSERT INTO users (username, email, password_hash)\nVALUES ('alice', 'alice@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdsBXOX.eQrdKf.');\n</code></pre></p> </li> </ol>"},{"location":"6.%20Security%20and%20Users/04-mots-de-passe/#considerations-additionnelles","title":"Consid\u00e9rations Additionnelles","text":"<ul> <li>Impl\u00e9menter une politique de mots de passe forts (longueur minimale, complexit\u00e9)</li> <li>Ajouter \u00e9ventuellement une colonne pour le sel si vous n\u2019utilisez pas bcrypt</li> <li>Consid\u00e9rer l\u2019ajout de colonnes pour la gestion des tentatives de connexion \u00e9chou\u00e9es</li> <li>Pr\u00e9voir un m\u00e9canisme de r\u00e9initialisation de mot de passe</li> </ul>"},{"location":"7.%20Exercises/01-exercices/","title":"Exercises","text":""},{"location":"7.%20Exercises/01-exercices/#sql","title":"SQL","text":"<ol> <li>Pagila</li> <li>Recipes</li> <li>Northwind</li> </ol>"},{"location":"7.%20Exercises/01-exercices/#difficulty-level-explanation","title":"Difficulty Level Explanation:","text":"<ol> <li> <p>Simple queries involving a single table, basic operations like <code>SELECT</code>, <code>WHERE</code>, <code>ORDER BY</code>.</p> </li> <li> <p>Queries involving simple joins, basic aggregations, or simple subqueries.</p> </li> <li> <p>Queries with multiple joins, more complex aggregations, simple window functions, or correlated subqueries.</p> </li> <li> <p>Complex queries involving CTEs, advanced window functions, complex calculations, or sophisticated business logic.</p> </li> <li> <p>Very complex queries combining multiple advanced techniques, requiring deep understanding of SQL concepts and    algorithmic thinking.</p> </li> </ol> <p>This evaluation is subjective and may vary depending on individual experience and familiarity with certain SQL concepts.</p>"},{"location":"7.%20Exercises/01-exercices/#modeling","title":"Modeling","text":"<ol> <li>Blog</li> <li>Books</li> <li>Public Transportation Network</li> <li>Restaurant Chain</li> <li>Travel Agency</li> <li>Hospital Management System</li> </ol>"},{"location":"7.%20Exercises/ERD/01-blog/","title":"1. Blog","text":"<p>Cr\u00e9ez un diagramme EA pour la base de donn\u00e9es d\u2019une application de blog, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/01-blog/#partie-1","title":"Partie 1","text":"<ol> <li>Un article de blog doit \u00eatre \u00e9crit par un utilisateur.</li> <li>Un article de blog doit avoir un ID, un titre, un contenu et une date de publication.</li> <li>Un utilisateur doit avoir un pseudonyme (unique parmi tous les utilisateurs) et une adresse e-mail.</li> <li>Les articles de blog doivent \u00eatre organis\u00e9s par th\u00e8mes. Il peut y avoir plusieurs th\u00e8mes par article de blog.</li> <li>Un th\u00e8me doit avoir un ID, un nom et une description.</li> </ol>"},{"location":"7.%20Exercises/ERD/01-blog/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Les utilisateurs peuvent laisser des commentaires sur les articles de blog et r\u00e9pondre \u00e0 d\u2019autres commentaires.</li> <li>Un commentaire doit \u00eatre publi\u00e9 par un utilisateur (pas de commentaires anonymes autoris\u00e9s) et doit \u00eatre associ\u00e9 \u00e0 un    article de blog ou \u00e0 un autre commentaire (le commentaire parent).</li> <li>Un commentaire doit avoir un ID, un contenu (le texte du commentaire) et une date.</li> </ol>"},{"location":"7.%20Exercises/ERD/02-livres/","title":"2. Livres","text":"<p>Cr\u00e9ez un diagramme EA pour une base de donn\u00e9es de livres, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/02-livres/#partie-1","title":"Partie 1","text":"<ol> <li>Un livre a un titre, une date de publication et un num\u00e9ro ISBN, et est \u00e9crit par un ou plusieurs auteurs.</li> <li>Un auteur a un nom, un num\u00e9ro de t\u00e9l\u00e9phone et une adresse e-mail.</li> <li>Un livre peut \u00eatre auto-publi\u00e9 ou publi\u00e9 par un \u00e9diteur.</li> <li>Un \u00e9diteur a un nom, un num\u00e9ro de t\u00e9l\u00e9phone, une adresse e-mail et une adresse postale.</li> </ol>"},{"location":"7.%20Exercises/ERD/02-livres/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Un livre peut avoir plusieurs chapitres. Chaque chapitre a un num\u00e9ro et un titre.</li> <li>Des \u00e9tiquettes peuvent \u00eatre appliqu\u00e9es aux livres, telles que fiction ou non-fiction, informatique,    statistiques, langue, \u2026</li> </ol>"},{"location":"7.%20Exercises/ERD/02-livres/#partie-3","title":"Partie 3","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Une librairie veut vendre des livres aux clients. Les livres doivent avoir un prix de vente au d\u00e9tail et un prix de    vente.</li> <li>Les clients doivent avoir un nom et une adresse e-mail.</li> <li>Un client peut commander plusieurs livres dans la m\u00eame commande. La commande doit enregistrer le prix de chaque livre    command\u00e9, au cas o\u00f9 les prix des livres changeraient au fil du temps.</li> <li>Chaque commande doit avoir le prix total (avant taxes et frais d\u2019exp\u00e9dition), les frais d\u2019exp\u00e9dition et le total    g\u00e9n\u00e9ral avec les frais d\u2019exp\u00e9dition et les taxes.</li> </ol>"},{"location":"7.%20Exercises/ERD/03-transport/","title":"3. R\u00e9seau de transports en commun","text":""},{"location":"7.%20Exercises/ERD/03-transport/#modeles-logiques","title":"Mod\u00e8les logiques","text":"<p>Cr\u00e9ez un diagramme EA pour la base de donn\u00e9es d\u2019un r\u00e9seau de transports en commun, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/03-transport/#partie-1","title":"Partie 1","text":"<ol> <li>Le r\u00e9seau de transports en commun comprend diff\u00e9rents types de v\u00e9hicules : bus, m\u00e9tros et tramways.</li> <li>Chaque v\u00e9hicule a un num\u00e9ro d\u2019identification unique, une capacit\u00e9 de passagers et une date de mise en service.</li> <li>Le r\u00e9seau est compos\u00e9 de plusieurs lignes. Chaque ligne a un num\u00e9ro, un nom et un type (bus, m\u00e9tro ou tramway).</li> <li>Chaque ligne dessert plusieurs arr\u00eats. Un arr\u00eat a un nom, une adresse et des coordonn\u00e9es g\u00e9ographiques.</li> <li>Les conducteurs sont affect\u00e9s aux v\u00e9hicules. Un conducteur a un num\u00e9ro d\u2019employ\u00e9, un nom, un pr\u00e9nom et une date    d\u2019embauche.</li> </ol> Code <pre><code>@startuml\nentity Vehicule {\n  * numero_identification : string\n  --\n  capacite_passagers : integer\n  date_mise_en_service : date\n  type : enum {bus, metro, tramway}\n}\n\nentity Ligne {\n  * numero : string\n  --\n  nom : string\n  type : enum {bus, metro, tramway}\n}\n\nentity Arret {\n  * id : integer\n  --\n  nom : string\n  adresse : string\n  coordonnees_geo : string\n}\n\nentity Conducteur {\n  * numero_employe : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n}\n\nLigne \"*\" -- \"*\" Arret : dessert\nConducteur \"*\" -- \"*\" Vehicule : conduit\nLigne \"1\" -- \"*\" Vehicule : utilise\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/03-transport/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Chaque ligne a un horaire qui d\u00e9finit les heures de passage \u00e0 chaque arr\u00eat. Un horaire peut varier selon le jour de    la semaine (jour ouvr\u00e9, samedi, dimanche et jours f\u00e9ri\u00e9s).</li> <li>Les passagers peuvent acheter diff\u00e9rents types de titres de transport : ticket unitaire, carnet de 10 tickets,    abonnement mensuel ou annuel.</li> <li>Chaque titre de transport a un prix et une dur\u00e9e de validit\u00e9.</li> <li>Les passagers doivent s\u2019enregistrer pour obtenir un abonnement. Un passager a un num\u00e9ro de client, un nom, un pr\u00e9nom    et une adresse e-mail.</li> </ol> Code <pre><code>@startuml\nentity Vehicule {\n  * numero_identification : string\n  --\n  capacite_passagers : integer\n  date_mise_en_service : date\n  type : enum {bus, metro, tramway}\n}\n\nentity Ligne {\n  * numero : string\n  --\n  nom : string\n  type : enum {bus, metro, tramway}\n}\n\nentity Arret {\n  * id : integer\n  --\n  nom : string\n  adresse : string\n  coordonnees_geo : string\n}\n\nentity Conducteur {\n  * numero_employe : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n}\n\nLigne \"*\" -- \"*\" Arret : dessert\nConducteur \"*\" -- \"*\" Vehicule : conduit\nLigne \"1\" -- \"*\" Vehicule : utilise\n\nentity Horaire {\n  * id : integer\n  --\n  jour_semaine : enum {ouvre, samedi, dimanche, ferie}\n  heure_passage : time\n}\n\nentity TitreTransport {\n  * id : integer\n  --\n  type : enum {unitaire, carnet10, mensuel, annuel}\n  prix : decimal\n  duree_validite : integer\n}\n\nentity Passager {\n  * numero_client : string\n  --\n  nom : string\n  prenom : string\n  email : string\n}\n\nLigne \"1\" -- \"*\" Horaire\nArret \"1\" -- \"*\" Horaire\nPassager \"*\" -- \"*\" TitreTransport : achete\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/03-transport/#partie-3","title":"Partie 3","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Le r\u00e9seau souhaite suivre la fr\u00e9quentation des lignes. Pour cela, on enregistre le nombre de passagers montant et    descendant \u00e0 chaque arr\u00eat, pour chaque trajet.</li> <li>Les v\u00e9hicules peuvent tomber en panne. On souhaite enregistrer les incidents, avec la date, le type d\u2019incident et la    dur\u00e9e d\u2019immobilisation du v\u00e9hicule.</li> <li>Les arr\u00eats peuvent \u00eatre \u00e9quip\u00e9s de diff\u00e9rentes installations : abris, bancs, distributeurs de tickets, panneaux    d\u2019information en temps r\u00e9el. On veut pouvoir savoir quelles installations sont pr\u00e9sentes \u00e0 chaque arr\u00eat.</li> <li>Le r\u00e9seau propose un syst\u00e8me de v\u00e9los en libre-service aux arr\u00eats principaux. Chaque station de v\u00e9los a un nombre de    places de stationnement et un nombre de v\u00e9los disponibles qui varie au cours de la journ\u00e9e.</li> </ol> Code <pre><code>@startuml\nentity Vehicule {\n  * numero_identification : string\n  --\n  capacite_passagers : integer\n  date_mise_en_service : date\n  type : enum {bus, metro, tramway}\n}\n\nentity Ligne {\n  * numero : string\n  --\n  nom : string\n  type : enum {bus, metro, tramway}\n}\n\nentity Arret {\n  * id : integer\n  --\n  nom : string\n  adresse : string\n  coordonnees_geo : string\n}\n\nentity Conducteur {\n  * numero_employe : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n}\n\nLigne \"*\" -- \"*\" Arret : dessert\nConducteur \"*\" -- \"*\" Vehicule : conduit\nLigne \"1\" -- \"*\" Vehicule : utilise\n\nentity Horaire {\n  * id : integer\n  --\n  jour_semaine : enum {ouvre, samedi, dimanche, ferie}\n  heure_passage : time\n}\n\nentity TitreTransport {\n  * id : integer\n  --\n  type : enum {unitaire, carnet10, mensuel, annuel}\n  prix : decimal\n  duree_validite : integer\n}\n\nentity Passager {\n  * numero_client : string\n  --\n  nom : string\n  prenom : string\n  email : string\n}\n\nLigne \"1\" -- \"*\" Horaire\nArret \"1\" -- \"*\" Horaire\nPassager \"*\" -- \"*\" TitreTransport : achete\n\n\nentity Frequentation {\n  * id : integer\n  --\n  date : date\n  heure : time\n  passagers_montants : integer\n  passagers_descendants : integer\n}\n\nentity Incident {\n  * id : integer\n  --\n  date : date\n  type : string\n  duree_immobilisation : integer\n}\n\nentity Installation {\n  * id : integer\n  --\n  type : enum {abri, banc, distributeur, panneau_info}\n}\n\nentity StationVelos {\n  * id : integer\n  --\n  nombre_places : integer\n  velos_disponibles : integer\n}\n\nArret \"1\" -- \"*\" Frequentation\nVehicule \"1\" -- \"*\" Incident\nArret \"*\" -- \"*\" Installation : equipee_de\nArret \"1\" -- \"0..1\" StationVelos\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/03-transport/#modele-physique","title":"Mod\u00e8le physique","text":"Code <pre><code>@startuml\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\nhide empty methods\nhide empty fields\n\nTABLE(Vehicule, \"Vehicule\") {\n    PK(id) : integer\n    numero_identification : string\n    capacite_passagers : integer\n    date_mise_en_service : date\n    type : type_vehicule\n    FK(ligne_id) : integer\n}\n\nTABLE(Ligne, \"Ligne\") {\n    PK(id) : integer\n    numero : string\n    nom : string\n    type : type_ligne\n}\n\nTABLE(Arret, \"Arret\") {\n    PK(id) : integer\n    nom : string\n    adresse : string\n    coordonnees_geo : string\n}\n\nTABLE(LigneArret, \"LigneArret\") {\n    PK(FK(ligne_id)) : integer\n    PK(FK(arret_id)) : integer\n    ordre : integer\n}\n\nTABLE(Conducteur, \"Conducteur\") {\n    PK(id) : integer\n    numero_employe : string\n    nom : string\n    prenom : string\n    date_embauche : date\n}\n\nTABLE(Horaire, \"Horaire\") {\n    PK(id) : integer\n    jour_semaine : type_jour\n    heure_passage : time\n    FK(ligne_id) : integer\n    FK(arret_id) : integer\n}\n\nTABLE(TitreTransport, \"TitreTransport\") {\n    PK(id) : integer\n    type : type_titre\n    prix : decimal\n    duree_validite : integer\n}\n\nTABLE(Passager, \"Passager\") {\n    PK(id) : integer\n    numero_client : string\n    nom : string\n    prenom : string\n    email : string\n}\n\nTABLE(Frequentation, \"Frequentation\") {\n    PK(id) : integer\n    date : date\n    heure : time\n    passagers_montants : integer\n    passagers_descendants : integer\n    FK(arret_id) : integer\n    FK(vehicule_id) : integer\n}\n\nTABLE(Incident, \"Incident\") {\n    PK(id) : integer\n    date : date\n    type : string\n    duree_immobilisation : integer\n    FK(vehicule_id) : integer\n}\n\nTABLE(Installation, \"Installation\") {\n    PK(id) : integer\n    type : type_installation\n}\n\nTABLE(ArretInstallation, \"ArretInstallation\") {\n    PK(FK(arret_id)) : integer\n    PK(FK(installation_id)) : integer\n}\n\nTABLE(StationVelos, \"StationVelos\") {\n    PK(id) : integer\n    nombre_places : integer\n    velos_disponibles : integer\n    FK(arret_id) : integer\n}\n\nLigne \"1\" -- \"*\" Vehicule\nLigne \"1\" -- \"*\" LigneArret\nArret \"1\" -- \"*\" LigneArret\nLigne \"1\" -- \"*\" Horaire\nArret \"1\" -- \"*\" Horaire\nArret \"1\" -- \"*\" Frequentation\nVehicule \"1\" -- \"*\" Frequentation\nVehicule \"1\" -- \"*\" Incident\nArret \"1\" -- \"*\" ArretInstallation\nInstallation \"1\" -- \"*\" ArretInstallation\nArret \"1\" -- \"0..1\" StationVelos\n\nTABLE(ConducteurVehicule, \"ConducteurVehicule\") {\n    PK(FK(conducteur_id)) : integer\n    PK(FK(vehicule_id)) : integer\n}\n\nTABLE(PassagerTitreTransport, \"PassagerTitreTransport\") {\n    PK(FK(passager_id)) : integer\n    PK(FK(titre_transport_id)) : integer\n    date_achat : date\n}\n\nConducteur \"1\" -- \"*\" ConducteurVehicule\nVehicule \"1\" -- \"*\" ConducteurVehicule\nPassager \"1\" -- \"*\" PassagerTitreTransport\nTitreTransport \"1\" -- \"*\" PassagerTitreTransport\n\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/03-transport/#creation","title":"Cr\u00e9ation","text":"Code <pre><code>-- Cr\u00e9ation des types enum\nCREATE TYPE type_vehicule AS ENUM ('bus', 'metro', 'tramway');\nCREATE TYPE type_ligne AS ENUM ('bus', 'metro', 'tramway');\nCREATE TYPE type_jour AS ENUM ('ouvre', 'samedi', 'dimanche', 'ferie');\nCREATE TYPE type_titre AS ENUM ('unitaire', 'carnet10', 'mensuel', 'annuel');\nCREATE TYPE type_installation AS ENUM ('abri', 'banc', 'distributeur', 'panneau_info');\n\n-- Cr\u00e9ation des tables\nCREATE TABLE Ligne (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero VARCHAR(20) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    type type_ligne NOT NULL\n);\n\nCREATE TABLE Vehicule (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_identification VARCHAR(50) UNIQUE NOT NULL,\n    capacite_passagers INTEGER NOT NULL,\n    date_mise_en_service DATE NOT NULL,\n    type type_vehicule NOT NULL,\n    ligne_id INTEGER NOT NULL REFERENCES Ligne(id)\n);\n\nCREATE TABLE Arret (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    adresse TEXT,\n    coordonnees_geo VARCHAR(50)\n);\n\nCREATE TABLE LigneArret (\n    ligne_id INTEGER REFERENCES Ligne(id),\n    arret_id INTEGER REFERENCES Arret(id),\n    ordre INTEGER NOT NULL,\n    PRIMARY KEY (ligne_id, arret_id)\n);\n\nCREATE TABLE Conducteur (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_employe VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    date_embauche DATE NOT NULL\n);\n\nCREATE TABLE Horaire (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    jour_semaine type_jour NOT NULL,\n    heure_passage TIME NOT NULL,\n    ligne_id INTEGER NOT NULL REFERENCES Ligne(id),\n    arret_id INTEGER NOT NULL REFERENCES Arret(id)\n);\n\nCREATE TABLE TitreTransport (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    type type_titre NOT NULL,\n    prix DECIMAL(10, 2) NOT NULL,\n    duree_validite INTEGER NOT NULL\n);\n\nCREATE TABLE Passager (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_client VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE Frequentation (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date DATE NOT NULL,\n    heure TIME NOT NULL,\n    passagers_montants INTEGER NOT NULL,\n    passagers_descendants INTEGER NOT NULL,\n    arret_id INTEGER NOT NULL REFERENCES Arret(id),\n    vehicule_id INTEGER NOT NULL REFERENCES Vehicule(id)\n);\n\nCREATE TABLE Incident (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date DATE NOT NULL,\n    type VARCHAR(100) NOT NULL,\n    duree_immobilisation INTEGER NOT NULL,\n    vehicule_id INTEGER NOT NULL REFERENCES Vehicule(id)\n);\n\nCREATE TABLE Installation (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    type type_installation NOT NULL\n);\n\nCREATE TABLE ArretInstallation (\n    arret_id INTEGER REFERENCES Arret(id),\n    installation_id INTEGER REFERENCES Installation(id),\n    PRIMARY KEY (arret_id, installation_id)\n);\n\nCREATE TABLE StationVelos (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nombre_places INTEGER NOT NULL,\n    velos_disponibles INTEGER NOT NULL,\n    arret_id INTEGER UNIQUE NOT NULL REFERENCES Arret(id)\n);\n\nCREATE TABLE ConducteurVehicule (\n    conducteur_id INTEGER REFERENCES Conducteur(id),\n    vehicule_id INTEGER REFERENCES Vehicule(id),\n    PRIMARY KEY (conducteur_id, vehicule_id)\n);\n\nCREATE TABLE PassagerTitreTransport (\n    passager_id INTEGER REFERENCES Passager(id),\n    titre_transport_id INTEGER REFERENCES TitreTransport(id),\n    date_achat DATE NOT NULL,\n    PRIMARY KEY (passager_id, titre_transport_id)\n);\n</code></pre> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"7.%20Exercises/ERD/04-restaurants/","title":"4. Cha\u00eene de restaurants","text":""},{"location":"7.%20Exercises/ERD/04-restaurants/#modeles-logiques","title":"Mod\u00e8les logiques","text":"<p>Cr\u00e9ez un diagramme EA pour la base de donn\u00e9es d\u2019une cha\u00eene de restaurants, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/04-restaurants/#partie-1","title":"Partie 1","text":"<ol> <li>La cha\u00eene poss\u00e8de plusieurs restaurants. Chaque restaurant a un num\u00e9ro unique, un nom, une adresse et un num\u00e9ro de    t\u00e9l\u00e9phone.</li> <li>Chaque restaurant propose un menu compos\u00e9 de plusieurs plats. Un plat a un nom, une description et un prix.</li> <li>Les plats sont class\u00e9s par cat\u00e9gories (entr\u00e9e, plat principal, dessert, boisson).</li> <li>Chaque restaurant emploie plusieurs employ\u00e9s. Un employ\u00e9 a un num\u00e9ro d\u2019identification, un nom, un pr\u00e9nom et une date    d\u2019embauche.</li> <li>Les employ\u00e9s peuvent avoir diff\u00e9rents r\u00f4les : serveur, cuisinier, manager.</li> </ol> Code <pre><code>@startuml\nentity Restaurant {\n  * numero : string\n  --\n  nom : string\n  adresse : string\n  telephone : string\n}\n\nentity Plat {\n  * id : integer\n  --\n  nom : string\n  description : string\n  prix : decimal\n}\n\nentity Categorie {\n  * id : integer\n  --\n  nom : enum {entree, plat_principal, dessert, boisson}\n}\n\nentity Employe {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n  role : enum {serveur, cuisinier, manager}\n}\n\nRestaurant \"*\" -- \"*\" Plat : propose\nPlat \"*\" -- \"1\" Categorie : appartient\nRestaurant \"1\" -- \"*\" Employe : emploie\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/04-restaurants/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>Les clients peuvent faire des r\u00e9servations. Une r\u00e9servation comprend une date, une heure, un nombre de personnes et    est associ\u00e9e \u00e0 un restaurant sp\u00e9cifique.</li> <li>Les restaurants re\u00e7oivent des commandes. Chaque commande est associ\u00e9e \u00e0 une table, a un num\u00e9ro unique, une date et    une heure.</li> <li>Une commande peut contenir plusieurs plats. On veut pouvoir conna\u00eetre la quantit\u00e9 de chaque plat command\u00e9.</li> <li>Les clients peuvent laisser des avis sur leur exp\u00e9rience au restaurant. Un avis comprend une note (de 1 \u00e0 5 \u00e9toiles),    un commentaire et une date.</li> </ol> Code <pre><code>@startuml\nentity Restaurant {\n  * numero : string\n  --\n  nom : string\n  adresse : string\n  telephone : string\n}\n\nentity Plat {\n  * id : integer\n  --\n  nom : string\n  description : string\n  prix : decimal\n}\n\nentity Categorie {\n  * id : integer\n  --\n  nom : enum {entree, plat_principal, dessert, boisson}\n}\n\nentity Employe {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n  role : enum {serveur, cuisinier, manager}\n}\n\nRestaurant \"*\" -- \"*\" Plat : propose\nPlat \"*\" -- \"1\" Categorie : appartient\nRestaurant \"1\" -- \"*\" Employe : emploie\n\nentity Reservation {\n  * id : integer\n  --\n  date : date\n  heure : time\n  nombre_personnes : integer\n}\n\nentity Commande {\n  * numero : string\n  --\n  date : date\n  heure : time\n  table : integer\n}\n\nentity LigneCommande {\n  * id : integer\n  --\n  quantite : integer\n}\n\nentity Avis {\n  * id : integer\n  --\n  note : integer\n  commentaire : string\n  date : date\n}\n\nRestaurant \"1\" -- \"*\" Reservation\nRestaurant \"1\" -- \"*\" Commande\nCommande \"1\" -- \"*\" LigneCommande\nPlat \"1\" -- \"*\" LigneCommande\nRestaurant \"1\" -- \"*\" Avis\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/04-restaurants/#partie-3","title":"Partie 3","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>La cha\u00eene de restaurants souhaite g\u00e9rer son inventaire. Chaque plat n\u00e9cessite plusieurs ingr\u00e9dients. Un ingr\u00e9dient a    un nom, une unit\u00e9 de mesure et un co\u00fbt unitaire.</li> <li>Chaque restaurant a son propre stock d\u2019ingr\u00e9dients. On veut pouvoir suivre la quantit\u00e9 de chaque ingr\u00e9dient    disponible dans chaque restaurant.</li> <li>La cha\u00eene propose un programme de fid\u00e9lit\u00e9. Les clients peuvent s\u2019inscrire au programme en fournissant leur nom,    pr\u00e9nom, adresse e-mail et date de naissance.</li> <li>Les membres du programme de fid\u00e9lit\u00e9 accumulent des points pour chaque euro d\u00e9pens\u00e9. Ces points peuvent \u00eatre \u00e9chang\u00e9s    contre des r\u00e9ductions sur de futures commandes.</li> </ol> Code <pre><code>@startuml\nentity Restaurant {\n  * numero : string\n  --\n  nom : string\n  adresse : string\n  telephone : string\n}\n\nentity Plat {\n  * id : integer\n  --\n  nom : string\n  description : string\n  prix : decimal\n}\n\nentity Categorie {\n  * id : integer\n  --\n  nom : enum {entree, plat_principal, dessert, boisson}\n}\n\nentity Employe {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  date_embauche : date\n  role : enum {serveur, cuisinier, manager}\n}\n\nRestaurant \"*\" -- \"*\" Plat : propose\nPlat \"*\" -- \"1\" Categorie : appartient\nRestaurant \"1\" -- \"*\" Employe : emploie\n\nentity Reservation {\n  * id : integer\n  --\n  date : date\n  heure : time\n  nombre_personnes : integer\n}\n\nentity Commande {\n  * numero : string\n  --\n  date : date\n  heure : time\n  table : integer\n}\n\nentity LigneCommande {\n  * id : integer\n  --\n  quantite : integer\n}\n\nentity Avis {\n  * id : integer\n  --\n  note : integer\n  commentaire : string\n  date : date\n}\n\nRestaurant \"1\" -- \"*\" Reservation\nRestaurant \"1\" -- \"*\" Commande\nCommande \"1\" -- \"*\" LigneCommande\nPlat \"1\" -- \"*\" LigneCommande\nRestaurant \"1\" -- \"*\" Avis\n\nentity Ingredient {\n  * id : integer\n  --\n  nom : string\n  unite_mesure : string\n  cout_unitaire : decimal\n}\n\nentity Stock {\n  * id : integer\n  --\n  quantite : decimal\n}\n\nentity ClientFidele {\n  * id : integer\n  --\n  nom : string\n  prenom : string\n  email : string\n  date_naissance : date\n}\n\nentity PointsFidelite {\n  * id : integer\n  --\n  points : integer\n}\n\nPlat \"*\" -- \"*\" Ingredient : necessite\nRestaurant \"1\" -- \"*\" Stock\nIngredient \"1\" -- \"*\" Stock\nClientFidele \"1\" -- \"*\" PointsFidelite\nCommande \"1\" -- \"*\" PointsFidelite : genere\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/04-restaurants/#modele-physique","title":"Mod\u00e8le physique","text":"Code <pre><code>@startuml\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\nhide empty methods\nhide empty fields\n\nTABLE(Restaurant, \"Restaurant\") {\n    PK(id) : integer\n    numero : string\n    nom : string\n    adresse : text\n    telephone : string\n}\n\nTABLE(Plat, \"Plat\") {\n    PK(id) : integer\n    nom : string\n    description : text\n    prix : decimal\n    FK(categorie_id) : integer\n}\n\nTABLE(Categorie, \"Categorie\") {\n    PK(id) : integer\n    nom : type_categorie\n}\n\nTABLE(Employe, \"Employe\") {\n    PK(id) : integer\n    numero_identification : string\n    nom : string\n    prenom : string\n    date_embauche : date\n    role : type_role\n    FK(restaurant_id) : integer\n}\n\nTABLE(Reservation, \"Reservation\") {\n    PK(id) : integer\n    date : date\n    heure : time\n    nombre_personnes : integer\n    FK(restaurant_id) : integer\n    FK(client_id) : integer\n}\n\nTABLE(Commande, \"Commande\") {\n    PK(id) : integer\n    numero : string\n    date : date\n    heure : time\n    table : integer\n    FK(restaurant_id) : integer\n}\n\nTABLE(LigneCommande, \"LigneCommande\") {\n    PK(id) : integer\n    quantite : integer\n    prix_unitaire : decimal\n    FK(commande_id) : integer\n    FK(plat_id) : integer\n}\n\nTABLE(Avis, \"Avis\") {\n    PK(id) : integer\n    note : integer\n    commentaire : text\n    date : date\n    FK(restaurant_id) : integer\n    FK(client_id) : integer\n}\n\nTABLE(Ingredient, \"Ingredient\") {\n    PK(id) : integer\n    nom : string\n    unite_mesure : string\n    cout_unitaire : decimal\n}\n\nTABLE(PlatIngredient, \"PlatIngredient\") {\n    PK(FK(plat_id)) : integer\n    PK(FK(ingredient_id)) : integer\n    quantite : decimal\n}\n\nTABLE(Stock, \"Stock\") {\n    PK(id) : integer\n    quantite : decimal\n    FK(restaurant_id) : integer\n    FK(ingredient_id) : integer\n}\n\nTABLE(Client, \"Client\") {\n    PK(id) : integer\n    nom : string\n    prenom : string\n    email : string\n    date_naissance : date\n}\n\nTABLE(PointsFidelite, \"PointsFidelite\") {\n    PK(id) : integer\n    points : integer\n    FK(client_id) : integer\n    FK(commande_id) : integer\n}\n\nRestaurant \"1\" -- \"*\" Employe\nRestaurant \"1\" -- \"*\" Reservation\nRestaurant \"1\" -- \"*\" Commande\nRestaurant \"1\" -- \"*\" Avis\nRestaurant \"1\" -- \"*\" Stock\nCategorie \"1\" -- \"*\" Plat\nCommande \"1\" -- \"*\" LigneCommande\nPlat \"1\" -- \"*\" LigneCommande\nPlat \"1\" -- \"*\" PlatIngredient\nIngredient \"1\" -- \"*\" PlatIngredient\nIngredient \"1\" -- \"*\" Stock\nClient \"1\" -- \"*\" Reservation\nClient \"1\" -- \"*\" Avis\nClient \"1\" -- \"*\" PointsFidelite\nCommande \"1\" -- \"*\" PointsFidelite\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/04-restaurants/#creation","title":"Cr\u00e9ation","text":"Code <pre><code>-- Cr\u00e9ation des types enum\nCREATE TYPE type_categorie AS ENUM ('entree', 'plat_principal', 'dessert', 'boisson');\nCREATE TYPE type_role AS ENUM ('serveur', 'cuisinier', 'manager');\n\n-- Cr\u00e9ation des tables\nCREATE TABLE Restaurant (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    adresse TEXT NOT NULL,\n    telephone VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Categorie (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom type_categorie NOT NULL\n);\n\nCREATE TABLE Plat (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    description TEXT,\n    prix DECIMAL(10, 2) NOT NULL,\n    categorie_id INTEGER NOT NULL REFERENCES Categorie(id)\n);\n\nCREATE TABLE Employe (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_identification VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    date_embauche DATE NOT NULL,\n    role type_role NOT NULL,\n    restaurant_id INTEGER NOT NULL REFERENCES Restaurant(id)\n);\n\nCREATE TABLE Client (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    date_naissance DATE\n);\n\nCREATE TABLE Reservation (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date DATE NOT NULL,\n    heure TIME NOT NULL,\n    nombre_personnes INTEGER NOT NULL,\n    restaurant_id INTEGER NOT NULL REFERENCES Restaurant(id),\n    client_id INTEGER NOT NULL REFERENCES Client(id)\n);\n\nCREATE TABLE Commande (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero VARCHAR(50) UNIQUE NOT NULL,\n    date DATE NOT NULL,\n    heure TIME NOT NULL,\n    table INTEGER NOT NULL,\n    restaurant_id INTEGER NOT NULL REFERENCES Restaurant(id)\n);\n\nCREATE TABLE LigneCommande (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    quantite INTEGER NOT NULL,\n    prix_unitaire DECIMAL(10, 2) NOT NULL,\n    commande_id INTEGER NOT NULL REFERENCES Commande(id),\n    plat_id INTEGER NOT NULL REFERENCES Plat(id)\n);\n\nCREATE TABLE Avis (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    note INTEGER CHECK (note BETWEEN 1 AND 5),\n    commentaire TEXT,\n    date DATE NOT NULL,\n    restaurant_id INTEGER NOT NULL REFERENCES Restaurant(id),\n    client_id INTEGER NOT NULL REFERENCES Client(id)\n);\n\nCREATE TABLE Ingredient (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    unite_mesure VARCHAR(50) NOT NULL,\n    cout_unitaire DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE PlatIngredient (\n    plat_id INTEGER REFERENCES Plat(id),\n    ingredient_id INTEGER REFERENCES Ingredient(id),\n    quantite DECIMAL(10, 2) NOT NULL,\n    PRIMARY KEY (plat_id, ingredient_id)\n);\n\nCREATE TABLE Stock (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    quantite DECIMAL(10, 2) NOT NULL,\n    restaurant_id INTEGER NOT NULL REFERENCES Restaurant(id),\n    ingredient_id INTEGER NOT NULL REFERENCES Ingredient(id)\n);\n\nCREATE TABLE PointsFidelite (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    points INTEGER NOT NULL,\n    client_id INTEGER NOT NULL REFERENCES Client(id),\n    commande_id INTEGER NOT NULL REFERENCES Commande(id)\n);\n</code></pre> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"7.%20Exercises/ERD/05-voyages/","title":"5. Agence de voyages","text":""},{"location":"7.%20Exercises/ERD/05-voyages/#modeles-logiques","title":"Mod\u00e8les logiques","text":"<p>Cr\u00e9ez un diagramme EA pour la base de donn\u00e9es d\u2019une agence de voyages, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/05-voyages/#partie-1","title":"Partie 1","text":"<ol> <li>L\u2019agence propose diff\u00e9rentes destinations. Chaque destination a un nom, un pays et une description.</li> <li>Les clients de l\u2019agence ont un num\u00e9ro de client unique, un nom, un pr\u00e9nom, une adresse e-mail et un num\u00e9ro de    t\u00e9l\u00e9phone.</li> <li>L\u2019agence organise des voyages. Chaque voyage a un code unique, une date de d\u00e9part, une date de retour et un prix de    base.</li> <li>Un voyage est associ\u00e9 \u00e0 une destination et peut accueillir un nombre maximum de participants.</li> <li>Les clients peuvent r\u00e9server des voyages. Une r\u00e9servation concerne un client, un voyage, et a une date de    r\u00e9servation.</li> </ol> Code <pre><code>@startuml\nentity Destination {\n  * id : integer\n  --\n  nom : string\n  pays : string\n  description : string\n}\n\nentity Client {\n  * numero_client : string\n  --\n  nom : string\n  prenom : string\n  email : string\n  telephone : string\n}\n\nentity Voyage {\n  * code : string\n  --\n  date_depart : date\n  date_retour : date\n  prix_base : decimal\n  nombre_max_participants : integer\n}\n\nentity Reservation {\n  * id : integer\n  --\n  date_reservation : date\n}\n\nVoyage \"1\" -- \"1\" Destination : concerne\nClient \"1\" -- \"*\" Reservation\nVoyage \"1\" -- \"*\" Reservation\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/05-voyages/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>L\u2019agence travaille avec diff\u00e9rents prestataires : compagnies a\u00e9riennes, h\u00f4tels et soci\u00e9t\u00e9s de location de voitures.    Chaque prestataire a un nom, une adresse et un num\u00e9ro de contact.</li> <li>Un voyage peut inclure des vols, des s\u00e9jours \u00e0 l\u2019h\u00f4tel et des locations de voiture. Chacun de ces \u00e9l\u00e9ments a ses    propres caract\u00e9ristiques (num\u00e9ro de vol, type de chambre, cat\u00e9gorie de voiture, etc.).</li> <li>Les clients peuvent choisir des options suppl\u00e9mentaires pour leur voyage, comme des excursions ou des assurances.    Chaque option a un nom, une description et un prix.</li> <li>L\u2019agence emploie des agents de voyage. Chaque agent a un num\u00e9ro d\u2019employ\u00e9, un nom, un pr\u00e9nom et une sp\u00e9cialit\u00e9 (par    exemple, voyages d\u2019affaires, croisi\u00e8res, etc.).</li> </ol> Code <pre><code>@startuml\nentity Destination {\n  * id : integer\n  --\n  nom : string\n  pays : string\n  description : string\n}\n\nentity Client {\n  * numero_client : string\n  --\n  nom : string\n  prenom : string\n  email : string\n  telephone : string\n}\n\nentity Voyage {\n  * code : string\n  --\n  date_depart : date\n  date_retour : date\n  prix_base : decimal\n  nombre_max_participants : integer\n}\n\nentity Reservation {\n  * id : integer\n  --\n  date_reservation : date\n}\n\nVoyage \"1\" -- \"1\" Destination : concerne\nClient \"1\" -- \"*\" Reservation\nVoyage \"1\" -- \"*\" Reservation\n\nentity Prestataire {\n  * id : integer\n  --\n  nom : string\n  adresse : string\n  numero_contact : string\n  type : enum {compagnie_aerienne, hotel, location_voiture}\n}\n\nentity Vol {\n  * numero_vol : string\n}\n\nentity Sejour {\n  * id : integer\n  --\n  type_chambre : string\n}\n\nentity LocationVoiture {\n  * id : integer\n  --\n  categorie_voiture : string\n}\n\nentity Option {\n  * id : integer\n  --\n  nom : string\n  description : string\n  prix : decimal\n}\n\nentity AgentVoyage {\n  * numero_employe : string\n  --\n  nom : string\n  prenom : string\n  specialite : string\n}\n\nVoyage \"*\" -- \"*\" Prestataire : utilise\nVoyage \"1\" -- \"*\" Vol\nVoyage \"1\" -- \"*\" Sejour\nVoyage \"1\" -- \"*\" LocationVoiture\nVoyage \"*\" -- \"*\" Option : propose\nAgentVoyage \"*\" -- \"*\" Voyage : gere\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/05-voyages/#partie-3","title":"Partie 3","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>L\u2019agence souhaite mettre en place un syst\u00e8me d\u2019avis. Les clients peuvent laisser des avis sur les voyages qu\u2019ils ont    effectu\u00e9s, avec une note (de 1 \u00e0 5 \u00e9toiles) et un commentaire.</li> <li>L\u2019agence propose un programme de fid\u00e9lit\u00e9. Les clients peuvent accumuler des points pour chaque voyage r\u00e9serv\u00e9, en    fonction du prix du voyage. Ces points peuvent \u00eatre \u00e9chang\u00e9s contre des r\u00e9ductions sur de futurs voyages.</li> <li>Certains voyages sont des forfaits tout compris, d\u2019autres sont personnalisables. Pour les voyages personnalisables,    les clients peuvent choisir individuellement leurs vols, h\u00f4tels et activit\u00e9s.</li> <li>L\u2019agence veut suivre les paiements des clients. Un paiement est associ\u00e9 \u00e0 une r\u00e9servation, a une date, un montant et    un mode de paiement (carte de cr\u00e9dit, virement bancaire, etc.).</li> </ol> Code <pre><code>@startuml\nentity Destination {\n  * id : integer\n  --\n  nom : string\n  pays : string\n  description : string\n}\n\nentity Client {\n  * numero_client : string\n  --\n  nom : string\n  prenom : string\n  email : string\n  telephone : string\n}\n\nentity Voyage {\n  * code : string\n  --\n  date_depart : date\n  date_retour : date\n  prix_base : decimal\n  nombre_max_participants : integer\n}\n\nentity Reservation {\n  * id : integer\n  --\n  date_reservation : date\n}\n\nVoyage \"1\" -- \"1\" Destination : concerne\nClient \"1\" -- \"*\" Reservation\nVoyage \"1\" -- \"*\" Reservation\n\nentity Prestataire {\n  * id : integer\n  --\n  nom : string\n  adresse : string\n  numero_contact : string\n  type : enum {compagnie_aerienne, hotel, location_voiture}\n}\n\nentity Vol {\n  * numero_vol : string\n}\n\nentity Sejour {\n  * id : integer\n  --\n  type_chambre : string\n}\n\nentity LocationVoiture {\n  * id : integer\n  --\n  categorie_voiture : string\n}\n\nentity Option {\n  * id : integer\n  --\n  nom : string\n  description : string\n  prix : decimal\n}\n\nentity AgentVoyage {\n  * numero_employe : string\n  --\n  nom : string\n  prenom : string\n  specialite : string\n}\n\nVoyage \"*\" -- \"*\" Prestataire : utilise\nVoyage \"1\" -- \"*\" Vol\nVoyage \"1\" -- \"*\" Sejour\nVoyage \"1\" -- \"*\" LocationVoiture\nVoyage \"*\" -- \"*\" Option : propose\nAgentVoyage \"*\" -- \"*\" Voyage : gere\n\nentity Avis {\n  * id : integer\n  --\n  note : integer\n  commentaire : string\n}\n\nentity PointsFidelite {\n  * id : integer\n  --\n  points : integer\n}\n\nentity VoyagePersonnalise {\n  * id : integer\n}\n\nentity Paiement {\n  * id : integer\n  --\n  date : date\n  montant : decimal\n  mode_paiement : string\n}\n\nClient \"1\" -- \"*\" Avis\nVoyage \"1\" -- \"*\" Avis\nClient \"1\" -- \"*\" PointsFidelite\nVoyage \"1\" -- \"*\" PointsFidelite : genere\nClient \"1\" -- \"*\" VoyagePersonnalise\nVol \"*\" -- \"*\" VoyagePersonnalise\nSejour \"*\" -- \"*\" VoyagePersonnalise\nLocationVoiture \"*\" -- \"*\" VoyagePersonnalise\nOption \"*\" -- \"*\" VoyagePersonnalise\nReservation \"1\" -- \"*\" Paiement\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/05-voyages/#modele-physique","title":"Mod\u00e8le physique","text":"Code <pre><code>@startuml\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\nhide empty methods\nhide empty fields\n\nTABLE(Destination, \"Destination\") {\n    PK(id) : integer\n    nom : string\n    pays : string\n    description : text\n}\n\nTABLE(Client, \"Client\") {\n    PK(id) : integer\n    numero_client : string\n    nom : string\n    prenom : string\n    email : string\n    telephone : string\n}\n\nTABLE(Voyage, \"Voyage\") {\n    PK(id) : integer\n    code : string\n    date_depart : date\n    date_retour : date\n    prix_base : decimal\n    nombre_max_participants : integer\n    FK(destination_id) : integer\n}\n\nTABLE(Reservation, \"Reservation\") {\n    PK(id) : integer\n    date_reservation : date\n    FK(client_id) : integer\n    FK(voyage_id) : integer\n}\n\nTABLE(Prestataire, \"Prestataire\") {\n    PK(id) : integer\n    nom : string\n    adresse : text\n    numero_contact : string\n    type : type_prestataire\n}\n\nTABLE(Vol, \"Vol\") {\n    PK(id) : integer\n    numero_vol : string\n    FK(voyage_id) : integer\n    FK(prestataire_id) : integer\n}\n\nTABLE(Sejour, \"Sejour\") {\n    PK(id) : integer\n    type_chambre : string\n    FK(voyage_id) : integer\n    FK(prestataire_id) : integer\n}\n\nTABLE(LocationVoiture, \"LocationVoiture\") {\n    PK(id) : integer\n    categorie_voiture : string\n    FK(voyage_id) : integer\n    FK(prestataire_id) : integer\n}\n\nTABLE(Option, \"Option\") {\n    PK(id) : integer\n    nom : string\n    description : text\n    prix : decimal\n}\n\nTABLE(VoyageOption, \"VoyageOption\") {\n    PK(FK(voyage_id)) : integer\n    PK(FK(option_id)) : integer\n}\n\nTABLE(AgentVoyage, \"AgentVoyage\") {\n    PK(id) : integer\n    numero_employe : string\n    nom : string\n    prenom : string\n    specialite : string\n}\n\nTABLE(Avis, \"Avis\") {\n    PK(id) : integer\n    note : integer\n    commentaire : text\n    FK(client_id) : integer\n    FK(voyage_id) : integer\n}\n\nTABLE(PointsFidelite, \"PointsFidelite\") {\n    PK(id) : integer\n    points : integer\n    FK(client_id) : integer\n    FK(voyage_id) : integer\n}\n\nTABLE(VoyagePersonnalise, \"VoyagePersonnalise\") {\n    PK(id) : integer\n    FK(client_id) : integer\n}\n\nTABLE(VoyagePersonnaliseVol, \"VoyagePersonnaliseVol\") {\n    PK(FK(voyage_personnalise_id)) : integer\n    PK(FK(vol_id)) : integer\n}\n\nTABLE(VoyagePersonnaliseSejour, \"VoyagePersonnaliseSejour\") {\n    PK(FK(voyage_personnalise_id)) : integer\n    PK(FK(sejour_id)) : integer\n}\n\nTABLE(VoyagePersonnaliseLocationVoiture, \"VoyagePersonnaliseLocationVoiture\") {\n    PK(FK(voyage_personnalise_id)) : integer\n    PK(FK(location_voiture_id)) : integer\n}\n\nTABLE(VoyagePersonnaliseOption, \"VoyagePersonnaliseOption\") {\n    PK(FK(voyage_personnalise_id)) : integer\n    PK(FK(option_id)) : integer\n}\n\nTABLE(Paiement, \"Paiement\") {\n    PK(id) : integer\n    date : date\n    montant : decimal\n    mode_paiement : string\n    FK(reservation_id) : integer\n}\n\nDestination \"1\" -- \"*\" Voyage\nClient \"1\" -- \"*\" Reservation\nVoyage \"1\" -- \"*\" Reservation\nPrestataire \"1\" -- \"*\" Vol\nPrestataire \"1\" -- \"*\" Sejour\nPrestataire \"1\" -- \"*\" LocationVoiture\nVoyage \"1\" -- \"*\" Vol\nVoyage \"1\" -- \"*\" Sejour\nVoyage \"1\" -- \"*\" LocationVoiture\nVoyage \"1\" -- \"*\" VoyageOption\nOption \"1\" -- \"*\" VoyageOption\nClient \"1\" -- \"*\" Avis\nVoyage \"1\" -- \"*\" Avis\nClient \"1\" -- \"*\" PointsFidelite\nVoyage \"1\" -- \"*\" PointsFidelite\nClient \"1\" -- \"*\" VoyagePersonnalise\nVoyagePersonnalise \"1\" -- \"*\" VoyagePersonnaliseVol\nVoyagePersonnalise \"1\" -- \"*\" VoyagePersonnaliseSejour\nVoyagePersonnalise \"1\" -- \"*\" VoyagePersonnaliseLocationVoiture\nVoyagePersonnalise \"1\" -- \"*\" VoyagePersonnaliseOption\nVol \"1\" -- \"*\" VoyagePersonnaliseVol\nSejour \"1\" -- \"*\" VoyagePersonnaliseSejour\nLocationVoiture \"1\" -- \"*\" VoyagePersonnaliseLocationVoiture\nOption \"1\" -- \"*\" VoyagePersonnaliseOption\nReservation \"1\" -- \"*\" Paiement\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/05-voyages/#creation","title":"Cr\u00e9ation","text":"Code <pre><code>-- Cr\u00e9ation des types enum\nCREATE TYPE type_prestataire AS ENUM ('compagnie_aerienne', 'hotel', 'location_voiture');\n\n-- Cr\u00e9ation des tables\nCREATE TABLE Destination (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    pays VARCHAR(100) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE Client (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_client VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    telephone VARCHAR(20)\n);\n\nCREATE TABLE Voyage (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    code VARCHAR(50) UNIQUE NOT NULL,\n    date_depart DATE NOT NULL,\n    date_retour DATE NOT NULL,\n    prix_base DECIMAL(10, 2) NOT NULL,\n    nombre_max_participants INTEGER,\n    destination_id INTEGER NOT NULL REFERENCES Destination(id)\n);\n\nCREATE TABLE Reservation (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date_reservation DATE NOT NULL,\n    client_id INTEGER NOT NULL REFERENCES Client(id),\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id)\n);\n\nCREATE TABLE Prestataire (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    adresse TEXT,\n    numero_contact VARCHAR(20),\n    type type_prestataire NOT NULL\n);\n\nCREATE TABLE Vol (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_vol VARCHAR(20) NOT NULL,\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id),\n    prestataire_id INTEGER NOT NULL REFERENCES Prestataire(id)\n);\n\nCREATE TABLE Sejour (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    type_chambre VARCHAR(50) NOT NULL,\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id),\n    prestataire_id INTEGER NOT NULL REFERENCES Prestataire(id)\n);\n\nCREATE TABLE LocationVoiture (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    categorie_voiture VARCHAR(50) NOT NULL,\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id),\n    prestataire_id INTEGER NOT NULL REFERENCES Prestataire(id)\n);\n\nCREATE TABLE Option (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom VARCHAR(100) NOT NULL,\n    description TEXT,\n    prix DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE VoyageOption (\n    voyage_id INTEGER REFERENCES Voyage(id),\n    option_id INTEGER REFERENCES Option(id),\n    PRIMARY KEY (voyage_id, option_id)\n);\n\nCREATE TABLE AgentVoyage (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_employe VARCHAR(50) UNIQUE NOT NULL,\n    nom VARCHAR(100) NOT NULL,\n    prenom VARCHAR(100) NOT NULL,\n    specialite VARCHAR(100)\n);\n\nCREATE TABLE Avis (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    note INTEGER CHECK (note BETWEEN 1 AND 5),\n    commentaire TEXT,\n    client_id INTEGER NOT NULL REFERENCES Client(id),\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id)\n);\n\nCREATE TABLE PointsFidelite (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    points INTEGER NOT NULL,\n    client_id INTEGER NOT NULL REFERENCES Client(id),\n    voyage_id INTEGER NOT NULL REFERENCES Voyage(id)\n);\n\nCREATE TABLE VoyagePersonnalise (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    client_id INTEGER NOT NULL REFERENCES Client(id)\n);\n\nCREATE TABLE VoyagePersonnaliseVol (\n    voyage_personnalise_id INTEGER REFERENCES VoyagePersonnalise(id),\n    vol_id INTEGER REFERENCES Vol(id),\n    PRIMARY KEY (voyage_personnalise_id, vol_id)\n);\n\nCREATE TABLE VoyagePersonnaliseSejour (\n    voyage_personnalise_id INTEGER REFERENCES VoyagePersonnalise(id),\n    sejour_id INTEGER REFERENCES Sejour(id),\n    PRIMARY KEY (voyage_personnalise_id, sejour_id)\n);\n\nCREATE TABLE VoyagePersonnaliseLocationVoiture (\n    voyage_personnalise_id INTEGER REFERENCES VoyagePersonnalise(id),\n    location_voiture_id INTEGER REFERENCES LocationVoiture(id),\n    PRIMARY KEY (voyage_personnalise_id, location_voiture_id)\n);\n\nCREATE TABLE VoyagePersonnaliseOption (\n    voyage_personnalise_id INTEGER REFERENCES VoyagePersonnalise(id),\n    option_id INTEGER REFERENCES Option(id),\n    PRIMARY KEY (voyage_personnalise_id, option_id)\n);\n\nCREATE TABLE Paiement (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date DATE NOT NULL,\n    montant DECIMAL(10, 2) NOT NULL,\n    mode_paiement VARCHAR(50) NOT NULL,\n    reservation_id INTEGER NOT NULL REFERENCES Reservation(id)\n);\n\nCREATE TABLE VoyageOption (\n    voyage_id INTEGER REFERENCES Voyage(id),\n    option_id INTEGER REFERENCES Option(id),\n    PRIMARY KEY (voyage_id, option_id)\n);\n</code></pre> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"7.%20Exercises/ERD/06-hopital/","title":"6. Syst\u00e8me de gestion d\u2019un h\u00f4pital","text":""},{"location":"7.%20Exercises/ERD/06-hopital/#modeles-logiques","title":"Mod\u00e8les logiques","text":"<p>Cr\u00e9ez un diagramme EA pour la base de donn\u00e9es d\u2019un syst\u00e8me de gestion d\u2019h\u00f4pital, bas\u00e9 sur les informations donn\u00e9es ci-dessous.</p>"},{"location":"7.%20Exercises/ERD/06-hopital/#partie-1","title":"Partie 1","text":"<ol> <li>L\u2019h\u00f4pital a plusieurs d\u00e9partements (par exemple, urgences, cardiologie, p\u00e9diatrie). Chaque d\u00e9partement a un nom    unique et un code.</li> <li>Les patients sont enregistr\u00e9s avec un num\u00e9ro de dossier unique, un nom, un pr\u00e9nom, une date de naissance et une    adresse.</li> <li>Les m\u00e9decins travaillent dans un ou plusieurs d\u00e9partements. Chaque m\u00e9decin a un num\u00e9ro d\u2019identification unique, un    nom, un pr\u00e9nom et une sp\u00e9cialit\u00e9.</li> <li>Les infirmiers sont affect\u00e9s \u00e0 un d\u00e9partement sp\u00e9cifique. Chaque infirmier a un num\u00e9ro d\u2019identification unique, un    nom et un pr\u00e9nom.</li> <li>Les patients peuvent \u00eatre admis \u00e0 l\u2019h\u00f4pital. Une admission a une date d\u2019entr\u00e9e, une date de sortie pr\u00e9vue et un    diagnostic initial.</li> </ol> Code <pre><code>@startuml\nentity Departement {\n  * code : string\n  --\n  nom : string\n}\n\nentity Patient {\n  * numero_dossier : string\n  --\n  nom : string\n  prenom : string\n  date_naissance : date\n  adresse : string\n}\n\nentity Medecin {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  specialite : string\n}\n\nentity Infirmier {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n}\n\nentity Admission {\n  * id : integer\n  --\n  date_entree : date\n  date_sortie_prevue : date\n  diagnostic_initial : string\n}\n\nMedecin \"*\" -- \"*\" Departement : travaille_dans\nInfirmier \"1\" -- \"1\" Departement : affecte_a\nPatient \"1\" -- \"*\" Admission\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/06-hopital/#partie-2","title":"Partie 2","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>L\u2019h\u00f4pital dispose de chambres r\u00e9parties dans diff\u00e9rents services. Chaque chambre a un num\u00e9ro unique et un nombre de    lits.</li> <li>Lors d\u2019une admission, un patient est assign\u00e9 \u00e0 une chambre sp\u00e9cifique.</li> <li>Les m\u00e9decins effectuent des consultations pour les patients. Une consultation a une date, une heure et des notes    m\u00e9dicales.</li> <li>Les m\u00e9dicaments prescrits aux patients doivent \u00eatre enregistr\u00e9s. Chaque m\u00e9dicament a un nom, un dosage et des    instructions d\u2019administration.</li> </ol> Code <pre><code>@startuml\nentity Departement {\n  * code : string\n  --\n  nom : string\n}\n\nentity Patient {\n  * numero_dossier : string\n  --\n  nom : string\n  prenom : string\n  date_naissance : date\n  adresse : string\n}\n\nentity Medecin {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  specialite : string\n}\n\nentity Infirmier {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n}\n\nentity Admission {\n  * id : integer\n  --\n  date_entree : date\n  date_sortie_prevue : date\n  diagnostic_initial : string\n}\n\nMedecin \"*\" -- \"*\" Departement : travaille_dans\nInfirmier \"1\" -- \"1\" Departement : affecte_a\nPatient \"1\" -- \"*\" Admission\n\nentity Chambre {\n  * numero : string\n  --\n  nombre_lits : integer\n}\n\nentity Consultation {\n  * id : integer\n  --\n  date : date\n  heure : time\n  notes_medicales : string\n}\n\nentity Medicament {\n  * id : integer\n  --\n  nom : string\n  dosage : string\n  instructions : string\n}\n\nDepartement \"1\" -- \"*\" Chambre\nAdmission \"*\" -- \"1\" Chambre : assigne\nMedecin \"1\" -- \"*\" Consultation\nPatient \"1\" -- \"*\" Consultation\nConsultation \"*\" -- \"*\" Medicament : prescrit\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/06-hopital/#partie-3","title":"Partie 3","text":"<p>Ajoutez les \u00e9l\u00e9ments suivants au diagramme EA que vous avez obtenu dans la partie pr\u00e9c\u00e9dente.</p> <ol> <li>L\u2019h\u00f4pital r\u00e9alise diff\u00e9rents types d\u2019examens m\u00e9dicaux (radiographies, analyses de sang, etc.). Chaque type d\u2019examen a    un nom et une description.</li> <li>Les r\u00e9sultats des examens doivent \u00eatre enregistr\u00e9s pour chaque patient. Un r\u00e9sultat d\u2019examen a une date, un type    d\u2019examen et une description des r\u00e9sultats.</li> <li>L\u2019h\u00f4pital g\u00e8re un inventaire de mat\u00e9riel m\u00e9dical. Chaque \u00e9quipement a un num\u00e9ro de s\u00e9rie, un nom, une date d\u2019achat et    une date de derni\u00e8re maintenance.</li> <li>Les patients peuvent avoir des allergies ou des conditions m\u00e9dicales pr\u00e9existantes. Ces informations doivent \u00eatre    enregistr\u00e9es dans leur dossier m\u00e9dical.</li> </ol> Code <pre><code>@startuml\nentity Departement {\n  * code : string\n  --\n  nom : string\n}\n\nentity Patient {\n  * numero_dossier : string\n  --\n  nom : string\n  prenom : string\n  date_naissance : date\n  adresse : string\n}\n\nentity Medecin {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n  specialite : string\n}\n\nentity Infirmier {\n  * numero_identification : string\n  --\n  nom : string\n  prenom : string\n}\n\nentity Admission {\n  * id : integer\n  --\n  date_entree : date\n  date_sortie_prevue : date\n  diagnostic_initial : string\n}\n\nMedecin \"*\" -- \"*\" Departement : travaille_dans\nInfirmier \"1\" -- \"1\" Departement : affecte_a\nPatient \"1\" -- \"*\" Admission\n\nentity Chambre {\n  * numero : string\n  --\n  nombre_lits : integer\n}\n\nentity Consultation {\n  * id : integer\n  --\n  date : date\n  heure : time\n  notes_medicales : string\n}\n\nentity Medicament {\n  * id : integer\n  --\n  nom : string\n  dosage : string\n  instructions : string\n}\n\nDepartement \"1\" -- \"*\" Chambre\nAdmission \"*\" -- \"1\" Chambre : assigne\nMedecin \"1\" -- \"*\" Consultation\nPatient \"1\" -- \"*\" Consultation\nConsultation \"*\" -- \"*\" Medicament : prescrit\n\nentity TypeExamen {\n  * id : integer\n  --\n  nom : string\n  description : string\n}\n\nentity ResultatExamen {\n  * id : integer\n  --\n  date : date\n  description_resultats : string\n}\n\nentity EquipementMedical {\n  * numero_serie : string\n  --\n  nom : string\n  date_achat : date\n  date_derniere_maintenance : date\n}\n\nentity ConditionMedicale {\n  * id : integer\n  --\n  nom : string\n  description : string\n  type : enum {allergie, condition_preexistante}\n}\n\nPatient \"*\" -- \"*\" TypeExamen : subit\nTypeExamen \"1\" -- \"*\" ResultatExamen\nPatient \"1\" -- \"*\" ResultatExamen\nPatient \"*\" -- \"*\" ConditionMedicale\n@enduml\n</code></pre> <p></p> Diagramme <p></p>"},{"location":"7.%20Exercises/ERD/06-hopital/#modele-physique","title":"Mod\u00e8le physique","text":"Code <pre><code>@startuml\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\nhide empty methods\nhide empty fields\n\nTABLE(Departement, \"Departement\") {\n    PK(id) : integer\n    code : string\n    nom : string\n}\n\nTABLE(Patient, \"Patient\") {\n    PK(id) : integer\n    numero_dossier : string\n    nom : string\n    prenom : string\n    date_naissance : date\n    adresse : text\n}\n\nTABLE(Medecin, \"Medecin\") {\n    PK(id) : integer\n    numero_identification : string\n    nom : string\n    prenom : string\n    specialite : string\n}\n\nTABLE(Infirmier, \"Infirmier\") {\n    PK(id) : integer\n    numero_identification : string\n    nom : string\n    prenom : string\n    FK(departement_id) : integer\n}\n\nTABLE(Admission, \"Admission\") {\n    PK(id) : integer\n    date_entree : date\n    date_sortie_prevue : date\n    diagnostic_initial : text\n    FK(patient_id) : integer\n    FK(chambre_id) : integer\n}\n\nTABLE(Chambre, \"Chambre\") {\n    PK(id) : integer\n    numero : string\n    nombre_lits : integer\n    FK(departement_id) : integer\n}\n\nTABLE(Consultation, \"Consultation\") {\n    PK(id) : integer\n    date : date\n    heure : time\n    notes_medicales : text\n    FK(medecin_id) : integer\n    FK(patient_id) : integer\n}\n\nTABLE(Medicament, \"Medicament\") {\n    PK(id) : integer\n    nom : string\n    dosage : string\n    instructions : text\n}\n\nTABLE(Prescription, \"Prescription\") {\n    PK(id) : integer\n    FK(consultation_id) : integer\n    FK(medicament_id) : integer\n    quantite : integer\n}\n\nTABLE(TypeExamen, \"TypeExamen\") {\n    PK(id) : integer\n    nom : string\n    description : text\n}\n\nTABLE(ResultatExamen, \"ResultatExamen\") {\n    PK(id) : integer\n    date : date\n    description_resultats : text\n    FK(patient_id) : integer\n    FK(type_examen_id) : integer\n}\n\nTABLE(EquipementMedical, \"EquipementMedical\") {\n    PK(id) : integer\n    numero_serie : string\n    nom : string\n    date_achat : date\n    date_derniere_maintenance : date\n}\n\nTABLE(ConditionMedicale, \"ConditionMedicale\") {\n    PK(id) : integer\n    nom : string\n    description : text\n    type : type_condition\n}\n\nTABLE(PatientCondition, \"PatientCondition\") {\n    PK(FK(patient_id)) : integer\n    PK(FK(condition_id)) : integer\n}\n\nTABLE(MedecinDepartement, \"MedecinDepartement\") {\n    PK(FK(medecin_id)) : integer\n    PK(FK(departement_id)) : integer\n}\n\nDepartement \"1\" -- \"*\" Infirmier\nDepartement \"1\" -- \"*\" Chambre\nPatient \"1\" -- \"*\" Admission\nPatient \"1\" -- \"*\" Consultation\nMedecin \"1\" -- \"*\" Consultation\nConsultation \"1\" -- \"*\" Prescription\nMedicament \"1\" -- \"*\" Prescription\nPatient \"1\" -- \"*\" ResultatExamen\nTypeExamen \"1\" -- \"*\" ResultatExamen\nPatient \"1\" -- \"*\" PatientCondition\nConditionMedicale \"1\" -- \"*\" PatientCondition\nMedecin \"1\" -- \"*\" MedecinDepartement\nDepartement \"1\" -- \"*\" MedecinDepartement\n@enduml\n</code></pre> Diagramme"},{"location":"7.%20Exercises/ERD/06-hopital/#creation","title":"Cr\u00e9ation","text":"Code <pre><code>-- Cr\u00e9ation des types enum\nCREATE TYPE type_condition AS ENUM ('allergie', 'condition_preexistante');\n\n-- Cr\u00e9ation des tables\nCREATE TABLE Departement\n(\n    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    code VARCHAR(10) UNIQUE NOT NULL,\n    nom  VARCHAR(100)       NOT NULL\n);\n\nCREATE TABLE Patient\n(\n    id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_dossier VARCHAR(50) UNIQUE NOT NULL,\n    nom            VARCHAR(100)       NOT NULL,\n    prenom         VARCHAR(100)       NOT NULL,\n    date_naissance DATE               NOT NULL,\n    adresse        TEXT\n);\n\nCREATE TABLE Medecin\n(\n    id                    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_identification VARCHAR(50) UNIQUE NOT NULL,\n    nom                   VARCHAR(100)       NOT NULL,\n    prenom                VARCHAR(100)       NOT NULL,\n    specialite            VARCHAR(100)\n);\n\nCREATE TABLE Infirmier\n(\n    id                    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_identification VARCHAR(50) UNIQUE NOT NULL,\n    nom                   VARCHAR(100)       NOT NULL,\n    prenom                VARCHAR(100)       NOT NULL,\n    departement_id        INTEGER            NOT NULL REFERENCES Departement (id)\n);\n\nCREATE TABLE Chambre\n(\n    id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero         VARCHAR(10) UNIQUE NOT NULL,\n    nombre_lits    INTEGER            NOT NULL,\n    departement_id INTEGER            NOT NULL REFERENCES Departement (id)\n);\n\nCREATE TABLE Admission\n(\n    id                 INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date_entree        DATE    NOT NULL,\n    date_sortie_prevue DATE,\n    diagnostic_initial TEXT,\n    patient_id         INTEGER NOT NULL REFERENCES Patient (id),\n    chambre_id         INTEGER NOT NULL REFERENCES Chambre (id)\n);\n\nCREATE TABLE Consultation\n(\n    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date            DATE    NOT NULL,\n    heure           TIME    NOT NULL,\n    notes_medicales TEXT,\n    medecin_id      INTEGER NOT NULL REFERENCES Medecin (id),\n    patient_id      INTEGER NOT NULL REFERENCES Patient (id)\n);\n\nCREATE TABLE Medicament\n(\n    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom          VARCHAR(100) NOT NULL,\n    dosage       VARCHAR(50),\n    instructions TEXT\n);\n\nCREATE TABLE Prescription\n(\n    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    consultation_id INTEGER NOT NULL REFERENCES Consultation (id),\n    medicament_id   INTEGER NOT NULL REFERENCES Medicament (id),\n    quantite        INTEGER NOT NULL\n);\n\nCREATE TABLE TypeExamen\n(\n    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom         VARCHAR(100) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE ResultatExamen\n(\n    id                    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    date                  DATE    NOT NULL,\n    description_resultats TEXT,\n    patient_id            INTEGER NOT NULL REFERENCES Patient (id),\n    type_examen_id        INTEGER NOT NULL REFERENCES TypeExamen (id)\n);\n\nCREATE TABLE EquipementMedical\n(\n    id                        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    numero_serie              VARCHAR(50) UNIQUE NOT NULL,\n    nom                       VARCHAR(100)       NOT NULL,\n    date_achat                DATE               NOT NULL,\n    date_derniere_maintenance DATE\n);\n\nCREATE TABLE ConditionMedicale\n(\n    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    nom         VARCHAR(100)   NOT NULL,\n    description TEXT,\n    type        type_condition NOT NULL\n);\n\nCREATE TABLE PatientCondition\n(\n    patient_id   INTEGER REFERENCES Patient (id),\n    condition_id INTEGER REFERENCES ConditionMedicale (id),\n    PRIMARY KEY (patient_id, condition_id)\n);\n\nCREATE TABLE MedecinDepartement\n(\n    medecin_id     INTEGER REFERENCES Medecin (id),\n    departement_id INTEGER REFERENCES Departement (id),\n    PRIMARY KEY (medecin_id, departement_id)\n);\n</code></pre> <p> Note : Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement       \u00e0 l\u2019aide de Perplexity AI, avec les LLM <code>GPT-4 Omni</code> et <code>Claude 3.5 Sonnet</code>. L\u2019IA       a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de       structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par       l\u2019auteur.     </p>"},{"location":"7.%20Exercises/SQL/01-pagila/","title":"1. Pagila Database","text":""},{"location":"7.%20Exercises/SQL/01-pagila/#creation","title":"Creation","text":"<p>pagila_create.sql</p>"},{"location":"7.%20Exercises/SQL/01-pagila/#erd","title":"ERD","text":"PlantUML <pre><code>@startuml\n\n'top to bottom direction\n'skinparam linetype polyline\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\n\nhide empty methods\nhide empty fields\n\nTABLE(actor, \"actor\") {\n   first_name: text\n   last_name: text\n   last_update: timestamp with time zone\n   actor_id: integer\n}\nTABLE(address, \"address\") {\n   address: text\n   address2: text\n   district: text\n   city_id: smallint\n   postal_code: text\n   phone: text\n   last_update: timestamp with time zone\n   address_id: integer\n}\nTABLE(category, \"category\") {\n   name: text\n   last_update: timestamp with time zone\n   category_id: integer\n}\n\nTABLE(city, \"city\") {\n   city: text\n   country_id: smallint\n   last_update: timestamp with time zone\n   city_id: integer\n}\n\nTABLE(country, \"country\") {\n   country: text\n   last_update: timestamp with time zone\n   country_id: integer\n}\n\nTABLE(customer, \"customer\") {\n   store_id: smallint\n   first_name: text\n   last_name: text\n   email: text\n   address_id: smallint\n   activebool: boolean\n   create_date: date\n   last_update: timestamp with time zone\n   active: integer\n   customer_id: integer\n}\n\nTABLE(film, \"film\") {\n   title: text\n   description: text\n   release_year: pagila.year\n   language_id: smallint\n   original_language_id: smallint\n   rental_duration: smallint\n   rental_rate: numeric(4,2)\n   length: smallint\n   replacement_cost: numeric(5,2)\n   rating: pagila.mpaa_rating\n   last_update: timestamp with time zone\n   special_features: text[]\n   fulltext: tsvector\n   film_id: integer\n}\n\nTABLE(film_actor, \"film_actor\") {\n   last_update: timestamp with time zone\n   actor_id: smallint\n   film_id: smallint\n}\n\nTABLE(film_category, \"film_category\") {\n   last_update: timestamp with time zone\n   film_id: smallint\n   category_id: smallint\n}\n\nTABLE(inventory, \"inventory\") {\n   film_id: smallint\n   store_id: smallint\n   last_update: timestamp with time zone\n   inventory_id: integer\n}\n\nTABLE(language, \"language\") {\n   name: char(20)\n   last_update: timestamp with time zone\n   language_id: integer\n}\n\nTABLE(payment, \"payment\") {\n   payment_id: integer\n   customer_id: smallint\n   staff_id: smallint\n   rental_id: integer\n   amount: numeric(5,2)\n   payment_date: timestamp with time zone\n}\n\nTABLE(rental, \"rental\") {\n   rental_date: timestamp with time zone\n   inventory_id: integer\n   customer_id: smallint\n   return_date: timestamp with time zone\n   staff_id: smallint\n   last_update: timestamp with time zone\n   rental_id: integer\n}\n\nTABLE(staff, \"staff\") {\n   first_name: text\n   last_name: text\n   address_id: smallint\n   email: text\n   store_id: smallint\n   active: boolean\n   username: text\n   password: text\n   last_update: timestamp with time zone\n   picture: bytea\n   staff_id: integer\n}\n\nTABLE(store, \"store\") {\n   manager_staff_id: smallint\n   address_id: smallint\n   last_update: timestamp with time zone\n   store_id: integer\n}\n\naddress        -[#595959,plain]-^  city          : \"city_id\"\ncity           -[#595959,plain]-^  country       : \"country_id\"\ncustomer       -[#595959,plain]-^  address       : \"address_id\"\ncustomer       -[#595959,plain]-^  store         : \"store_id\"\nfilm           -[#595959,plain]-^  language      : \"language_id\"\nfilm           -[#595959,plain]-^  language      : \"original_language_id:language_id\"\nfilm_actor     -[#595959,plain]-^  actor         : \"actor_id\"\nfilm_actor     -[#595959,plain]-^  film          : \"film_id\"\nfilm_category  -[#595959,plain]-^  category      : \"category_id\"\nfilm_category  -[#595959,plain]-^  film          : \"film_id\"\ninventory      -[#595959,plain]-^  film          : \"film_id\"\ninventory      -[#595959,plain]-^  store         : \"store_id\"\npayment        -[#595959,plain]-^  customer      : \"customer_id\"\npayment        -[#595959,plain]-^  rental        : \"rental_id\"\npayment        -[#595959,plain]-^  staff         : \"staff_id\"\nrental         -[#595959,plain]-^  customer      : \"customer_id\"\nrental         -[#595959,plain]-^  inventory     : \"inventory_id\"\nrental         -[#595959,plain]-^  staff         : \"staff_id\"\nstaff          -[#595959,plain]-^  address       : \"address_id\"\nstaff          -[#595959,plain]-^  store         : \"store_id\"\nstore          -[#595959,plain]-^  address       : \"address_id\"\n@enduml\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#queries","title":"Queries","text":""},{"location":"7.%20Exercises/SQL/01-pagila/#1-find-the-films-at-least-2-hours-long","title":"1. Find the films at least 2 hours long","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT title, length\nFROM film\nWHERE length &gt;= 120\nORDER BY length DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#2-find-the-id-and-description-of-the-film-academy-dinosaur","title":"2. Find the ID and description of the film \u2018ACADEMY DINOSAUR\u2019","text":"<p>Difficulty: 1</p> Answer <p><code>sql... SELECT film_id, description FROM film WHERE title = 'ACADEMY DINOSAUR';</code></p>"},{"location":"7.%20Exercises/SQL/01-pagila/#3-find-the-categories-of-academy-dinosaur","title":"3. Find the categories of \u2018ACADEMY DINOSAUR\u2019","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT c.name\nFROM category c\n         JOIN film_category fc ON c.category_id = fc.category_id\n         JOIN film f ON fc.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR';\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#4-find-films-without-categories","title":"4. Find films without categories","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT f.title\nFROM film f\n         LEFT JOIN film_category fc ON f.film_id = fc.film_id\nWHERE fc.category_id IS NULL;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#5-find-categories-without-films","title":"5. Find categories without films","text":"<p>Best answer:</p> <p>Difficulty: 2</p> Answer <pre><code>SELECT c.name\nFROM category c\n         LEFT JOIN film_category fc ON c.category_id = fc.category_id\nWHERE fc.film_id IS NULL;\n</code></pre> <p>Other answers:</p> Answer <pre><code>select c.category_id, c.name\nfrom category c\n         left join film_category fc on c.category_id = fc.category_id\ngroup by c.category_id, c.name\nhaving count(fc.film_id) = 0;\n</code></pre> Answer <pre><code>select category_id, name\nfrom category\nwhere category_id not in (select category_id from film_category);\n</code></pre> Answer <pre><code>select category_id, name\nfrom category c\nwhere not exists(select fc.category_id\n                 from film_category fc\n                 where fc.category_id = c.category_id);\n</code></pre> Answer <pre><code>select category_id, name\nfrom category c\nexcept\nselect c.category_id, c.name\nfrom category c\n         inner join film_category fc on fc.category_id = c.category_id;\n</code></pre> Answer <pre><code>select c.category_id, name\nfrom category c\n         inner join (select category_id                      \n                     from category c\n                     except\n                     select fc.category_id\n                     from film_category fc) as T\n                    on c.category_id = T.category_id;\n</code></pre> Answer <pre><code>with T as (select category_id\n           from category c\n           except\n           select fc.category_id\n           from film_category fc)\nselect c.category_id, name\nfrom category c\n         inner join T on c.category_id = T.category_id;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#6-find-action-films","title":"6. Find action films","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT f.title\nFROM film f\n         JOIN film_category fc ON f.film_id = fc.film_id\n         JOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Action';\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#7-find-the-number-of-films-in-the-action-category","title":"7. Find the number of films in the \u2018Action\u2019 category","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT COUNT(*) AS action_film_count... FROM film_category fc\n         JOIN category c\nON fc.category_id = c.category_id\nWHERE c.name = 'Action';\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#8-number-of-films-in-each-category","title":"8. Number of films in each category","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.name, COUNT(fc.film_id) AS film_count\nFROM category c\n         LEFT JOIN film_category fc ON c.category_id = fc.category_id\nGROUP BY c.category_id, c.name\nORDER BY film_count DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#9-find-the-number-of-categories-for-each-film","title":"9. Find the number of categories for each film","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT f.title, COUNT(fc.category_id) AS category_count\nFROM film f\n         LEFT JOIN film_category fc ON f.film_id = fc.film_id\nGROUP BY f.film_id, f.title\nORDER BY category_count DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#10-find-the-number-of-films","title":"10. Find the number of films","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT COUNT(*) AS total_films\nFROM film;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#11-find-the-number-of-different-languages-in-the-language-table","title":"11. Find the number of different languages in the language table","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT COUNT(*) AS language_count\nFROM language;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#12-find-the-number-of-different-languages-in-the-film-table","title":"12. Find the number of different languages in the film table","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT COUNT(DISTINCT language_id) AS film_language_count\nFROM film;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#13-category-with-the-largest-number-of-films","title":"13. Category with the largest number of films","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.name, COUNT(f.film_id) AS film_count\nFROM category c\n         JOIN film_category fc ON c.category_id = fc.category_id\n         JOIN film f ON fc.film_id = f.film_id\nGROUP BY c.category_id, c.name\nORDER BY film_count DESC\nLIMIT 1;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH category_counts AS (SELECT c.category_id,\n                                c.name,\n                                COUNT(f.film_id) AS film_count\n                         FROM category c\n                                  JOIN film_category fc\n                                       ON c.category_id = fc.category_id\n                                  JOIN film f ON fc.film_id = f.film_id\n                         GROUP BY c.category_id, c.name),\n     max_count AS (SELECT MAX(film_count) AS max_film_count\n                   FROM category_counts)\nSELECT cc.name AS category, cc.film_count\nFROM category_counts cc,\n     max_count mc\nWHERE cc.film_count = mc.max_film_count\nORDER BY cc.name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#14-list-of-most-rented-films","title":"14. List of most rented films","text":"<p>Difficulty: 3</p> <p>To get the list of the 10 most rented films, with their title and number of rentals:</p> Answer <pre><code>SELECT f.title, COUNT(r.rental_id) AS rental_count\nFROM film f\n         JOIN inventory i ON f.film_id = i.film_id\n         JOIN rental r ON i.inventory_id = r.inventory_id\nGROUP BY f.film_id, f.title\nORDER BY rental_count DESC\nLIMIT 10;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH actor_counts AS (SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count\n                      FROM actor a\n                               JOIN film_actor fa ON a.actor_id = fa.actor_id\n                      GROUP BY a.actor_id, a.first_name, a.last_name),\n     top_5_count AS (SELECT film_count\n                     FROM actor_counts\n                     ORDER BY film_count DESC\n                     LIMIT 1 OFFSET 4)\nSELECT ac.first_name, ac.last_name, ac.film_count\nFROM actor_counts ac,\n     top_5_count t5c\nWHERE ac.film_count &gt;= t5c.film_count\nORDER BY ac.film_count DESC, ac.last_name, ac.first_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#15-total-revenue-by-film-category","title":"15. Total revenue by film category","text":"<p>Difficulty: 3</p> <p>To calculate the total revenue generated by each film category:</p> Answer <pre><code>SELECT c.name AS category, SUM(p.amount) AS total_revenue\nFROM category c\n         JOIN film_category fc ON c.category_id = fc.category_id\n         JOIN film f ON fc.film_id = f.film_id\n         JOIN inventory i\n              ON f.film_id = i.film_id\n         JOIN rental r ON i.inventory_id = r.inventory_id\n         JOIN payment p ON r.rental_id = p.rental_id\nGROUP BY c.category_id, c.name\nORDER BY total_revenue DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#16-customers-who-spent-the-most","title":"16. Customers who spent the most","text":"<p>Difficulty: 3</p> <p>To get the 10 customers who spent the most, with their name and total amount:</p> Answer <pre><code>SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent\nFROM customer c\n         JOIN payment p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nORDER BY total_spent DESC\nLIMIT 10;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent\n                           FROM customer c\n                                    JOIN payment p ON c.customer_id = p.customer_id\n                           GROUP BY c.customer_id, c.first_name, c.last_name),\n     top_10_spent AS (SELECT total_spent\n                      FROM customer_spending\n                      ORDER BY total_spent DESC\n                      LIMIT 1 OFFSET 9)\nSELECT cs.first_name, cs.last_name, cs.total_spent\nFROM customer_spending cs,\n     top_10_spent t10s\nWHERE cs.total_spent &gt;= t10s.total_spent\nORDER BY cs.total_spent DESC, cs.last_name, cs.first_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#17-films-available-in-a-specific-store","title":"17. Films available in a specific store","text":"<p>Difficulty: 2</p> <p>To get the list of films available in store with ID 1:</p> Answer <pre><code>SELECT DISTINCT f.title\nFROM film f\n         JOIN inventory i ON f.film_id = i.film_id\nWHERE i.store_id = 1\nORDER BY f.title;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#18-who-are-the-5-actors-who-appeared-in-the-most-films","title":"18. Who are the 5 actors who appeared in the most films?","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count\nFROM actor a\n         JOIN film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY a.actor_id, a.first_name, a.last_name\nORDER BY film_count DESC\nLIMIT 5;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH actor_counts AS (SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count\n                      FROM actor a\n                               JOIN film_actor fa ON a.actor_id = fa.actor_id\n                      GROUP BY a.actor_id, a.first_name, a.last_name),\n     top_5_count AS (SELECT film_count\n                     FROM actor_counts\n                     ORDER BY film_count DESC\n                     LIMIT 1 OFFSET 4)\nSELECT ac.first_name, ac.last_name, ac.film_count\nFROM actor_counts ac,\n     top_5_count t5c\nWHERE ac.film_count &gt;= t5c.film_count\nORDER BY ac.film_count DESC, ac.last_name, ac.first_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#19-what-is-the-total-revenue-generated-by-each-store","title":"19. What is the total revenue generated by each store?","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT s.store_id, s.address_id, SUM(p.amount) AS total_revenue\nFROM store s\n         JOIN staff st ON s.store_id = st.store_id\n         JOIN payment p ON st.staff_id = p.staff_id\nGROUP BY s.store_id, s.address_id\nORDER BY total_revenue DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#20-what-are-the-10-most-profitable-films-based-on-total-payment-amount","title":"20. What are the 10 most profitable films (based on total payment amount)?","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue\nFROM film f\n         JOIN inventory i ON f.film_id = i.film_id\n         JOIN rental r ON i.inventory_id = r.inventory_id\n         JOIN payment p ON r.rental_id = p.rental_id\nGROUP BY f.film_id, f.title\nORDER BY total_revenue DESC\nLIMIT 10;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH film_revenue AS (SELECT f.film_id, f.title, SUM(p.amount) AS total_revenue\n                      FROM film f\n                               JOIN inventory i ON f.film_id = i.film_id\n                               JOIN rental r ON i.inventory_id = r.inventory_id\n                               JOIN payment p ON r.rental_id = p.rental_id\n                      GROUP BY f.film_id, f.title),\n     top_10_revenue AS (SELECT total_revenue\n                        FROM film_revenue\n                        ORDER BY total_revenue DESC\n                        LIMIT 1 OFFSET 9)\nSELECT fr.film_id, fr.title, fr.total_revenue\nFROM film_revenue fr,\n     top_10_revenue t10r\nWHERE fr.total_revenue &gt;= t10r.total_revenue\nORDER BY fr.total_revenue DESC, fr.title;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#21-what-is-the-average-rental-duration-for-each-film-category","title":"21. What is the average rental duration for each film category?","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT c.name, AVG(EXTRACT(DAY FROM (r.return_date - r.rental_date))) AS avg_rental_duration\nFROM category c\n         JOIN film_category fc ON c.category_id = fc.category_id\n         JOIN film f ON fc.film_id = f.film_id\n         JOIN inventory i ON f.film_id = i.film_id\n         JOIN rental r ON i.inventory_id = r.inventory_id\nWHERE r.return_date IS NOT NULL\nGROUP BY c.category_id, c.name\nORDER BY avg_rental_duration DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#22-which-customers-have-not-made-a-rental-in-more-than-3-months","title":"22. Which customers have not made a rental in more than 3 months?","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT c.customer_id, c.first_name, c.last_name, MAX(r.rental_date) AS last_rental_date\nFROM customer c\n         LEFT JOIN rental r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nHAVING MAX(r.rental_date) &lt; CURRENT_DATE - INTERVAL '3 months'\n    OR MAX(r.rental_date) IS NULL\nORDER BY last_rental_date;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#23-which-films-have-never-been-rented","title":"23. Which films have never been rented?","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT f.film_id, f.title\nFROM film f\n         LEFT JOIN inventory i ON f.film_id = i.film_id\n         LEFT JOIN rental r ON i.inventory_id = r.inventory_id\nWHERE r.rental_id IS NULL;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#24-which-customer-spent-the-most-money-and-how-much-did-they-spend","title":"24. Which customer spent the most money, and how much did they spend?","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent\nFROM customer c\n         JOIN payment p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id, c.first_name, c.last_name\nORDER BY total_spent DESC\nLIMIT 1;\n</code></pre> <p>Difficulty: 4</p> Answer <pre><code>WITH customer_spending AS (SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent\n                           FROM customer c\n                                    JOIN payment p ON c.customer_id = p.customer_id\n                           GROUP BY c.customer_id, c.first_name, c.last_name),\n     max_spending AS (SELECT MAX(total_spent) AS max_amount\n                      FROM customer_spending)\nSELECT cs.customer_id, cs.first_name, cs.last_name, cs.total_spent\nFROM customer_spending cs,\n     max_spending ms\nWHERE cs.total_spent = ms.max_amount\nORDER BY cs.last_name, cs.first_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/01-pagila/#25-which-5-pairs-of-actors-appeared-together-in-the-most-films","title":"25. Which 5 pairs of actors appeared together in the most films?","text":"<p>Difficulty: 5</p> Answer <pre><code>SELECT a1.actor_id   AS actor1_id,\n       a1.first_name AS actor1_first_name,\n       a1.last_name  AS actor1_last_name,\n       a2.actor_id   AS actor2_id,\n       a2.first_name AS actor2_first_name,\n       a2.last_name  AS actor2_last_name,\n       COUNT(*)      AS films_together\nFROM film_actor fa1\n         JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id &lt; fa2.actor_id\n         JOIN actor a1 ON fa1.actor_id = a1.actor_id\n         JOIN actor a2 ON fa2.actor_id = a2.actor_id\nGROUP BY a1.actor_id, a1.first_name, a1.last_name, a2.actor_id, a2.first_name, a2.last_name\nORDER BY films_together DESC\nLIMIT 5;\n</code></pre> Answer <pre><code>WITH actor_pairs AS (SELECT LEAST(fa1.actor_id, fa2.actor_id)    AS actor1_id,\n                            GREATEST(fa1.actor_id, fa2.actor_id) AS actor2_id,\n                            COUNT(*)                             AS films_together\n                     FROM film_actor fa1\n                              JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id &lt; fa2.actor_id\n                     GROUP BY LEAST(fa1.actor_id, fa2.actor_id), GREATEST(fa1.actor_id, fa2.actor_id)),\n     top_5_count AS (SELECT films_together\n                     FROM actor_pairs\n                     ORDER BY films_together DESC\n                     LIMIT 1 OFFSET 4)\nSELECT a1.actor_id   AS actor1_id,\n       a1.first_name AS actor1_first_name,\n       a1.last_name  AS actor1_last_name,\n       a2.actor_id   AS actor2_id,\n       a2.first_name AS actor2_first_name,\n       a2.last_name  AS actor2_last_name,\n       ap.films_together\nFROM actor_pairs ap\n         JOIN actor a1 ON ap.actor1_id = a1.actor_id\n         JOIN actor a2 ON ap.actor2_id = a2.actor_id\n         JOIN top_5_count t5c ON ap.films_together &gt;= t5c.films_together\nORDER BY ap.films_together DESC, a1.last_name, a1.first_name, a2.last_name, a2.first_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/","title":"2. Cooking Recipes","text":""},{"location":"7.%20Exercises/SQL/02-recettes/#creation","title":"Creation","text":"<p>Refer to the file recettes_create.sql.</p>"},{"location":"7.%20Exercises/SQL/02-recettes/#dea","title":"DEA","text":"PlantUML <pre><code>@startuml\n!define TABLE(name,desc) class name as \"desc\" &lt;&lt; (T,#FFAAAA) &gt;&gt;\n!define PK(x) &lt;u&gt;x&lt;/u&gt;\n!define FK(x) &lt;i&gt;x&lt;/i&gt;\nhide empty methods\nhide empty fields\n\nTABLE(Recette, \"Recette\") {\n    PK(id_recette) : INT\n    nom : VARCHAR(100)\n    description : TEXT\n    temps_preparation : INT\n    temps_cuisson : INT\n    difficulte : ENUM('Facile', 'Moyen', 'Difficile')\n    nombre_portions : INT\n    date_creation : DATETIME\n}\n\nTABLE(Utilisateur, \"Utilisateur\") {\n    PK(id_utilisateur) : INT\n    nom : VARCHAR(50)\n    prenom : VARCHAR(50)\n    email : VARCHAR(100)\n    mot_de_passe : VARCHAR(255)\n}\n\nTABLE(Ingredient, \"Ingr\u00e9dient\") {\n    PK(id_ingredient) : INT\n    nom : VARCHAR(50)\n    unite_mesure : VARCHAR(20)\n}\n\nTABLE(Etape, \"\u00c9tape\") {\n    PK(id_etape) : INT\n    FK(id_recette) : INT\n    FK(etape_parent_id) : INT\n    numero_etape : INT\n    description : TEXT\n}\n\nTABLE(Commentaire, \"Commentaire\") {\n    PK(id_commentaire) : INT\n    FK(id_recette) : INT\n    FK(id_utilisateur) : INT\n    contenu : TEXT\n    date_creation : DATETIME\n}\n\nTABLE(Note, \"Note\") {\n    PK(id_note) : INT\n    FK(id_recette) : INT\n    FK(id_utilisateur) : INT\n    valeur : INT\n    date_creation : DATETIME\n}\n\nTABLE(RecetteIngredient, \"RecetteIngredient\") {\n    PK(id_recette_ingredient) : INT\n    FK(id_recette) : INT\n    FK(id_ingredient) : INT\n    quantite : FLOAT\n}\n\nTABLE(RecetteAuteur, \"RecetteAuteur\") {\n    PK(id_recette_auteur) : INT\n    FK(id_recette) : INT\n    FK(id_utilisateur) : INT\n}\n\nRecette \"1\" -- \"0..*\" Etape\nRecette \"1\" -- \"0..*\" Commentaire\nRecette \"1\" -- \"0..*\" Note\nRecette \"1\" -- \"0..*\" RecetteIngredient\nRecette \"1..*\" -- \"1..*\" Utilisateur\n(Recette, Utilisateur) .. RecetteAuteur\nRecetteIngredient \"0..*\" -- \"1\" Ingredient\nCommentaire \"0..*\" -- \"1\" Utilisateur\nNote \"0..*\" -- \"1\" Utilisateur\nEtape \"0..*\" -- \"0..1\" Etape\n@enduml\n</code></pre> <p>This diagram represents a database structure for a recipe website with the following entities:</p> <ol> <li>Recette (Recipe): Contains general information about a recipe.</li> <li>Utilisateur (User): Represents the website users, who can be recipe authors or leave comments and ratings.</li> <li>Ingredient: Lists all possible ingredients.</li> <li>Etape (Step): Describes the preparation steps of a recipe.</li> <li>Commentaire (Comment): Stores user comments on recipes.</li> <li>Note (Rating): Records appreciation ratings given by users to recipes.</li> <li>RecetteIngredient (RecipeIngredient): Junction table between Recipe and Ingredient, allowing to specify    quantities.</li> <li>RecetteAuteur (RecipeAuthor): Junction table between Recipe and User, allowing multiple authors per recipe.</li> </ol>"},{"location":"7.%20Exercises/SQL/02-recettes/#queries","title":"Queries","text":""},{"location":"7.%20Exercises/SQL/02-recettes/#1-find-the-recipes-requiring-less-than-30-minutes-to-prepare","title":"1. Find the recipes requiring less than 30 minutes to prepare.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT nom, temps_preparation\nFROM Recette\nWHERE temps_preparation &lt; 30\nORDER BY temps_preparation;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#2-list-all-ingredients-whose-unit-of-measurement-is-in-grams-g","title":"2. List all ingredients whose unit of measurement is in grams (g).","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT nom, unite_mesure\nFROM Ingredient\nWHERE unite_mesure = 'g'\nORDER BY nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#3-display-users-whose-last-name-begins-with-d","title":"3. Display users whose last name begins with \u2018D\u2019.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT nom, prenom, email\nFROM Utilisateur\nWHERE nom LIKE 'D%'\nORDER BY nom, prenom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#4-find-recipes-classified-as-difficult","title":"4. Find recipes classified as \u201cDifficult\u201d.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT nom, temps_preparation, temps_cuisson\nFROM Recette\nWHERE difficulte = 'Difficile'\nORDER BY nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#5-list-comments-created-after-january-1-2024","title":"5. List comments created after January 1, 2024.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT id_recette, contenu, date_creation\nFROM Commentaire\nWHERE date_creation &gt; '2024-01-01'\nORDER BY date_creation DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#6-display-recipe-names-with-the-first-and-last-name-of-their-author","title":"6. Display recipe names with the first and last name of their author.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, u.prenom, u.nom\nFROM Recette r\n         JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette\n         JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur\nORDER BY r.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#7-list-all-ingredients-for-the-quiche-lorraine-recipe-with-their-quantities","title":"7. List all ingredients for the \u201cQuiche Lorraine\u201d recipe with their quantities.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, i.nom AS nom_ingredient, ri.quantite, i.unite_mesure\nFROM Recette r\n         JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette\n         JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient\nWHERE r.nom = 'Quiche Lorraine'\nORDER BY i.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#8-display-all-preparation-steps-for-the-ratatouille-recipe-in-order","title":"8. Display all preparation steps for the \u201cRatatouille\u201d recipe in order.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, e.numero_etape, e.description\nFROM Recette r\n         JOIN Etape e ON r.id_recette = e.id_recette\nWHERE r.nom = 'Ratatouille'\nORDER BY e.numero_etape;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#9-find-all-recipes-with-their-average-ratings-if-they-have-any","title":"9. Find all recipes with their average ratings (if they have any).","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, AVG(n.valeur) AS note_moyenne\nFROM Recette r\n         LEFT JOIN Note n ON r.id_recette = n.id_recette\nGROUP BY r.id_recette, r.nom\nORDER BY note_moyenne DESC NULLS LAST;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#10-list-all-users-and-the-number-of-recipes-they-have-created-including-those-who-havent-created-any","title":"10. List all users and the number of recipes they have created (including those who haven\u2019t created any).","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes\nFROM Utilisateur u\n         LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\nGROUP BY u.id_utilisateur, u.prenom, u.nom\nORDER BY nombre_recettes DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#11-display-recipes-with-their-comments-including-those-without-comments","title":"11. Display recipes with their comments, including those without comments.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, c.contenu AS commentaire\nFROM Recette r\n         LEFT JOIN Commentaire c ON r.id_recette = c.id_recette\nORDER BY r.nom, c.date_creation;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#12-find-recipes-that-use-flour-and-their-quantities","title":"12. Find recipes that use \u201cFlour\u201d and their quantities.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, ri.quantite, i.unite_mesure\nFROM Recette r\n         JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette\n         JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient\nWHERE i.nom = 'Farine'\nORDER BY ri.quantite DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#13-list-users-who-have-both-created-recipes-and-left-comments","title":"13. List users who have both created recipes and left comments.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT DISTINCT u.prenom, u.nom\nFROM Utilisateur u\n         JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\n         JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur\nORDER BY u.nom, u.prenom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#14-display-recipes-with-their-difficulty-and-author-name-sorted-by-decreasing-difficulty","title":"14. Display recipes with their Difficulty and author name, sorted by decreasing Difficulty.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, r.difficulte, u.prenom, u.nom\nFROM Recette r\n         JOIN RecetteAuteur ra ON r.id_recette = ra.id_recette\n         JOIN Utilisateur u ON ra.id_utilisateur = u.id_utilisateur\nORDER BY CASE\n             WHEN r.difficulte = 'Difficile' THEN 1\n             WHEN r.difficulte = 'Moyen' THEN 2\n             WHEN r.difficulte = 'Facile' THEN 3\n             END,\n         r.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#15-find-recipes-that-use-all-the-ingredients-of-a-nicoise-salad-assuming-these-are-tuna-olives-eggs","title":"15. Find recipes that use all the ingredients of a Ni\u00e7oise salad (assuming these are: Tuna, Olives, Eggs).","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT r.nom AS nom_recette\nFROM Recette r\nWHERE NOT EXISTS (SELECT i.id_ingredient\n                  FROM Ingredient i\n                  WHERE i.nom IN ('Thon', 'Olive', 'Oeufs')\n                    AND NOT EXISTS (SELECT 1\n                                    FROM RecetteIngredient ri\n                                    WHERE ri.id_recette = r.id_recette\n                                      AND ri.id_ingredient = i.id_ingredient))\nORDER BY r.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#16-calculate-the-number-of-recipes-for-each-difficulty-level","title":"16. Calculate the number of recipes for each Difficulty level.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT difficulte, COUNT(*) AS nombre_recettes\nFROM Recette\nGROUP BY difficulte\nORDER BY nombre_recettes DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#17-find-the-average-preparation-time-of-recipes-for-each-number-of-servings","title":"17. Find the average preparation time of recipes for each number of servings.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT nombre_portions, AVG(temps_preparation) AS temps_moyen_preparation\nFROM Recette\nGROUP BY nombre_portions\nORDER BY nombre_portions;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#18-list-the-units-of-measurement-used-and-the-number-of-ingredients-for-each-unit","title":"18. List the units of measurement used and the number of ingredients for each unit.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT unite_mesure, COUNT(*) AS nombre_ingredients\nFROM Ingredient\nGROUP BY unite_mesure\nORDER BY nombre_ingredients DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#19-find-the-maximum-minimum-and-average-rating-for-each-recipe","title":"19. Find the maximum, minimum, and average rating for each recipe.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT id_recette,\n       MAX(valeur) AS note_max,\n       MIN(valeur) AS note_min,\n       AVG(valeur) AS note_moyenne\nFROM Note\nGROUP BY id_recette\nORDER BY note_moyenne DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#20-count-the-number-of-comments-per-user","title":"20. Count the number of comments per user.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT id_utilisateur, COUNT(*) AS nombre_commentaires\nFROM Commentaire\nGROUP BY id_utilisateur\nORDER BY nombre_commentaires DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#21-display-recipe-names-and-the-number-of-ingredients-they-contain","title":"21. Display recipe names and the number of ingredients they contain.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT r.nom AS nom_recette, COUNT(ri.id_ingredient) AS nombre_ingredients\nFROM Recette r\n         LEFT JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette\nGROUP BY r.id_recette, r.nom\nORDER BY nombre_ingredients DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#22-find-users-who-have-created-the-most-recipes-with-the-number-of-recipes-created","title":"22. Find users who have created the most recipes, with the number of recipes created.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT u.prenom, u.nom, COUNT(ra.id_recette) AS nombre_recettes\nFROM Utilisateur u\n         LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\nGROUP BY u.id_utilisateur, u.prenom, u.nom\nORDER BY nombre_recettes DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#23-calculate-the-average-preparation-time-of-recipes-for-each-author","title":"23. Calculate the average preparation time of recipes for each author.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT u.prenom, u.nom, AVG(r.temps_preparation) AS temps_moyen_preparation\nFROM Utilisateur u\n         JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\n         JOIN Recette r ON ra.id_recette = r.id_recette\nGROUP BY u.id_utilisateur, u.prenom, u.nom\nORDER BY temps_moyen_preparation DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#24-list-the-most-used-ingredients-in-recipes-with-the-number-of-recipes-using-them","title":"24. List the most used ingredients in recipes, with the number of recipes using them.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT i.nom AS nom_ingredient, COUNT(DISTINCT ri.id_recette) AS nombre_recettes\nFROM Ingredient i\n         JOIN RecetteIngredient ri ON i.id_ingredient = ri.id_ingredient\nGROUP BY i.id_ingredient, i.nom\nORDER BY nombre_recettes DESC\nLIMIT 10;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#25-find-the-average-rating-of-recipes-for-each-difficulty-level","title":"25. Find the average rating of recipes for each Difficulty level.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT r.difficulte, AVG(n.valeur) AS note_moyenne\nFROM Recette r\n         LEFT JOIN Note n ON r.id_recette = n.id_recette\nGROUP BY r.difficulte\nORDER BY note_moyenne DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#26-find-recipes-that-have-a-preparation-time-above-average","title":"26. Find recipes that have a preparation time above average.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT nom, temps_preparation\nFROM Recette\nWHERE temps_preparation &gt; (SELECT AVG(temps_preparation)\n                           FROM Recette)\nORDER BY temps_preparation DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#27-list-users-who-have-created-recipes-but-have-never-left-a-comment","title":"27. List users who have created recipes but have never left a comment.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT DISTINCT u.prenom, u.nom\nFROM Utilisateur u\n         JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\nWHERE u.id_utilisateur NOT IN (SELECT DISTINCT id_utilisateur\n                               FROM Commentaire)\nORDER BY u.nom, u.prenom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#28-find-recipes-that-use-all-the-ingredients-present-in-the-quiche-lorraine-recipe","title":"28. Find recipes that use all the ingredients present in the \u201cQuiche Lorraine\u201d recipe.","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT r.nom\nFROM Recette r\nWHERE NOT EXISTS (SELECT ri.id_ingredient\n                  FROM RecetteIngredient ri\n                           JOIN Recette q ON ri.id_recette = q.id_recette\n                  WHERE q.nom = 'Quiche Lorraine'\n                    AND ri.id_ingredient NOT IN (SELECT id_ingredient\n                                                 FROM RecetteIngredient\n                                                 WHERE id_recette = r.id_recette))\n  AND r.nom != 'Quiche Lorraine'\nORDER BY r.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#29-display-recipes-whose-average-rating-is-higher-than-the-overall-average-rating-of-all-recipes","title":"29. Display recipes whose average rating is higher than the overall average rating of all recipes.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT r.nom, AVG(n.valeur) AS note_moyenne\nFROM Recette r\n         JOIN Note n ON r.id_recette = n.id_recette\nGROUP BY r.id_recette, r.nom\nHAVING AVG(n.valeur) &gt; (SELECT AVG(valeur)\n                        FROM Note)\nORDER BY note_moyenne DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#30-find-users-who-have-commented-on-all-the-recipes-they-created","title":"30. Find users who have commented on all the recipes they created.","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT u.prenom, u.nom\nFROM Utilisateur u\nWHERE NOT EXISTS (SELECT ra.id_recette\n                  FROM RecetteAuteur ra\n                  WHERE ra.id_utilisateur = u.id_utilisateur\n                    AND NOT EXISTS (SELECT c.id_commentaire\n                                    FROM Commentaire c\n                                    WHERE c.id_recette = ra.id_recette\n                                      AND c.id_utilisateur = u.id_utilisateur))\n  AND EXISTS (SELECT 1\n              FROM RecetteAuteur ra\n              WHERE ra.id_utilisateur = u.id_utilisateur)\nORDER BY u.nom, u.prenom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#31-list-the-3-most-commented-recipes-with-their-number-of-comments","title":"31. List the 3 most commented recipes with their number of comments.","text":"<p>Difficulty: 3</p> Answer <pre><code>WITH CommentCount AS (SELECT id_recette, COUNT(*) AS nb_commentaires\n                      FROM Commentaire\n                      GROUP BY id_recette)\nSELECT r.nom, cc.nb_commentaires\nFROM Recette r\n         JOIN CommentCount cc ON r.id_recette = cc.id_recette\nORDER BY cc.nb_commentaires DESC\nLIMIT 3;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#32-find-users-who-have-created-recipes-and-left-comments-with-the-number-of-recipes-and-comments","title":"32. Find users who have created recipes and left comments, with the number of recipes and comments.","text":"<p>Difficulty: 3</p> Answer <pre><code>WITH RecetteCount AS (SELECT id_utilisateur, COUNT(*) AS nb_recettes\n                      FROM RecetteAuteur\n                      GROUP BY id_utilisateur),\n     CommentCount AS (SELECT id_utilisateur, COUNT(*) AS nb_commentaires\n                      FROM Commentaire\n                      GROUP BY id_utilisateur)\nSELECT u.prenom,\n       u.nom,\n       COALESCE(rc.nb_recettes, 0)     AS nb_recettes,\n       COALESCE(cc.nb_commentaires, 0) AS nb_commentaires\nFROM Utilisateur u\n         LEFT JOIN RecetteCount rc ON u.id_utilisateur = rc.id_utilisateur\n         LEFT JOIN CommentCount cc ON u.id_utilisateur = cc.id_utilisateur\nWHERE rc.nb_recettes &gt; 0\n   OR cc.nb_commentaires &gt; 0\nORDER BY nb_recettes DESC, nb_commentaires DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#33-calculate-the-total-score-of-each-recipe-based-on-its-ratings-5-points-per-rating-5-4-points-per-rating-4-etc-and-display-the-top-5","title":"33. Calculate the total score of each recipe based on its ratings (5 points per rating 5, 4 points per rating 4, etc.) and display the top 5.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH ScoreCalculation AS (SELECT id_recette,\n                                 SUM(CASE\n                                         WHEN valeur = 5 THEN 5\n                                         WHEN valeur = 4 THEN 4\n                                         WHEN valeur = 3 THEN 3\n                                         WHEN valeur = 2 THEN 2\n                                         WHEN valeur = 1 THEN 1\n                                         ELSE 0\n                                     END) AS score_total\n                          FROM Note\n                          GROUP BY id_recette)\nSELECT r.nom, sc.score_total\nFROM Recette r\n         JOIN ScoreCalculation sc ON r.id_recette = sc.id_recette\nORDER BY sc.score_total DESC\nLIMIT 5;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#34-find-superusers-who-have-created-at-least-2-recipes-and-left-at-least-3-comments","title":"34. Find \u201csuperusers\u201d who have created at least 2 recipes and left at least 3 comments.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH UserActivity AS (SELECT u.id_utilisateur,\n                             COUNT(DISTINCT ra.id_recette)    AS recettes_creees,\n                             COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses\n                      FROM Utilisateur u\n                               LEFT JOIN RecetteAuteur ra ON u.id_utilisateur = ra.id_utilisateur\n                               LEFT JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur\n                      GROUP BY u.id_utilisateur)\nSELECT u.prenom, u.nom, ua.recettes_creees, ua.commentaires_laisses\nFROM Utilisateur u\n         JOIN UserActivity ua ON u.id_utilisateur = ua.id_utilisateur\nWHERE ua.recettes_creees &gt;= 2\n  AND ua.commentaires_laisses &gt;= 3\nORDER BY ua.recettes_creees DESC, ua.commentaires_laisses DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#35-create-a-hierarchy-of-recipe-steps-assuming-each-step-can-have-sub-steps-using-recursive-cte","title":"35. Create a hierarchy of recipe steps, assuming each step can have sub-steps (using recursive CTE).","text":"<p>Difficulty: 5</p> Answer <pre><code>WITH RECURSIVE EtapeHierarchy AS (SELECT id_etape, id_recette, numero_etape, description, etape_parent_id, 0 AS niveau\n                                  FROM Etape\n                                  WHERE etape_parent_id IS NULL\n\n                                  UNION ALL\n\n                                  SELECT e.id_etape,\n                                         e.id_recette,\n                                         e.numero_etape,\n                                         e.description,\n                                         e.etape_parent_id,\n                                         eh.niveau + 1\n                                  FROM Etape e\n                                           JOIN EtapeHierarchy eh ON e.etape_parent_id = eh.id_etape)\nSELECT r.nom                                                             AS nom_recette,\n       REPEAT('  ', niveau) || eh.numero_etape || '. ' || eh.description AS etape_detaillee\nFROM EtapeHierarchy eh\n         JOIN Recette r ON eh.id_recette = r.id_recette\nORDER BY r.nom, eh.id_recette, eh.niveau, eh.numero_etape;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#36-list-all-user-names-and-recipe-names-in-a-single-column-indicating-whether-its-a-user-or-a-recipe","title":"36. List all user names and recipe names in a single column, indicating whether it\u2019s a user or a recipe.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT nom AS nom, 'Utilisateur' AS type\nFROM Utilisateur\nUNION\nSELECT nom, 'Recette' AS type\nFROM Recette\nORDER BY type, nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#37-categorize-recipes-based-on-their-total-preparation-time-preparation-cooking","title":"37. Categorize recipes based on their total preparation time (preparation + cooking).","text":"<p>Difficulty: 3</p> <p>Using <code>CASE WHEN</code></p> <ul> <li><code>'Quick'</code>: &lt; 30 minutes</li> <li><code>'Medium'</code>: &gt;= 30 and &lt; 60 minutes</li> <li><code>'Long'</code>: &gt;= 60 minutes</li> </ul> Answer <pre><code>SELECT nom,\n       temps_preparation + temps_cuisson AS temps_total,\n       CASE\n           WHEN temps_preparation + temps_cuisson &lt; 30 THEN 'Rapide'\n           WHEN temps_preparation + temps_cuisson BETWEEN 30 AND 60 THEN 'Moyen'\n           ELSE 'Long'\n           END                           AS categorie_temps\nFROM Recette\nORDER BY temps_total;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#38-list-each-recipe-with-all-its-ingredients-concatenated-into-a-single-string","title":"38. List each recipe with all its ingredients concatenated into a single string.","text":"<p>Difficulty: 3</p> <p>Utilisation de <code>STRING_AGG</code>.</p> Answer <pre><code>SELECT r.nom,\n       STRING_AGG(i.nom, ', ' ORDER BY i.nom) AS ingredients\nFROM Recette r\n         JOIN RecetteIngredient ri ON r.id_recette = ri.id_recette\n         JOIN Ingredient i ON ri.id_ingredient = i.id_ingredient\nGROUP BY r.id_recette, r.nom\nORDER BY r.nom;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#39-rank-recipes-by-difficulty-and-assign-them-a-rank-based-on-their-preparation-time","title":"39. Rank recipes by Difficulty and assign them a rank based on their preparation time.","text":"<p>Difficulty: 3</p> <p>Using \u201cWINDOW FUNCTIONS\u201d.</p> Answer <pre><code>SELECT nom,\n       difficulte,\n       temps_preparation,\n       RANK() OVER (PARTITION BY difficulte ORDER BY temps_preparation) AS rang_temps_prep\nFROM Recette\nORDER BY difficulte, rang_temps_prep;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#40-for-each-user-find-their-highest-rated-recipe","title":"40. For each user, find their highest-rated recipe.","text":"<p>Difficulty: 5</p> <p>Using<code>LATERAL JOIN</code></p> Answer <pre><code>SELECT u.nom AS nom_utilisateur, best_recipe.nom AS meilleure_recette, avg_note\nFROM Utilisateur u\n         LEFT JOIN LATERAL (\n    SELECT ra.id_utilisateur, r.nom, AVG(n.valeur) AS avg_note\n    FROM RecetteAuteur ra\n             JOIN Recette r ON ra.id_recette = r.id_recette\n             LEFT JOIN Note n ON r.id_recette = n.id_recette\n    WHERE ra.id_utilisateur = u.id_utilisateur\n    GROUP BY ra.id_utilisateur, r.id_recette, r.nom\n    ORDER BY avg_note DESC NULLS LAST\n    LIMIT 1\n    ) AS best_recipe\n                   ON true\nORDER BY avg_note DESC NULLS LAST;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#41-compare-the-number-of-recipes-created-and-the-number-of-comments-left-by-each-user-including-all-users","title":"41. Compare the number of recipes created and the number of comments left by each user, including all users.","text":"<p>Difficulty: 4</p> <p>Using <code>FULL OUTER JOIN</code></p> Answer <pre><code>SELECT COALESCE(u1.nom, u2.nom)         AS nom_utilisateur,\n       COUNT(DISTINCT ra.id_recette)    AS recettes_creees,\n       COUNT(DISTINCT c.id_commentaire) AS commentaires_laisses\nFROM (SELECT id_utilisateur, nom FROM Utilisateur) u1\n         FULL OUTER JOIN RecetteAuteur ra ON u1.id_utilisateur = ra.id_utilisateur\n         FULL OUTER JOIN (SELECT id_utilisateur, nom FROM Utilisateur) u2 ON u1.id_utilisateur = u2.id_utilisateur\n         FULL OUTER JOIN Commentaire c ON u2.id_utilisateur = c.id_utilisateur\nGROUP BY COALESCE(u1.id_utilisateur, u2.id_utilisateur), COALESCE(u1.nom, u2.nom)\nORDER BY recettes_creees DESC, commentaires_laisses DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#42-count-the-number-of-recipes-created-per-month-over-the-past-year","title":"42. Count the number of recipes created per month over the past year.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT DATE_TRUNC('month', date_creation) AS mois,\n       COUNT(*)                           AS nombre_recettes\nFROM Recette\nWHERE date_creation &gt;= CURRENT_DATE - INTERVAL '1 year'\nGROUP BY DATE_TRUNC('month', date_creation)\nORDER BY mois;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#43-calculate-the-average-rating-of-recipes-by-season","title":"43. Calculate the average rating of recipes by season.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT CASE\n           WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver'\n           WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps'\n           WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9'\n           ELSE 'Automne'\n           END       AS saison,\n       AVG(n.valeur) AS note_moyenne\nFROM Note n\nGROUP BY CASE\n             WHEN EXTRACT(MONTH FROM n.date_creation) IN (12, 1, 2) THEN 'Hiver'\n             WHEN EXTRACT(MONTH FROM n.date_creation) IN (3, 4, 5) THEN 'Printemps'\n             WHEN EXTRACT(MONTH FROM n.date_creation) IN (6, 7, 8) THEN '\u00c9t\u00e9'\n             ELSE 'Automne'\n             END\nORDER BY note_moyenne DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#44-find-the-day-of-the-week-when-users-leave-the-most-comments","title":"44. Find the day of the week when users leave the most comments.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT TO_CHAR(date_creation, 'Day') AS jour_semaine,\n       COUNT(*)                      AS nombre_commentaires\nFROM Commentaire\nGROUP BY TO_CHAR(date_creation, 'Day'), EXTRACT(DOW FROM date_creation)\nORDER BY EXTRACT(DOW FROM date_creation);\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#45-calculate-the-average-number-of-recipes-created-per-month-for-each-year","title":"45. Calculate the average number of recipes created per month for each year.","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT EXTRACT(YEAR FROM date_creation) AS annee,\n       AVG(recettes_par_mois)           AS moyenne_recettes_par_mois\nFROM (SELECT DATE_TRUNC('month', date_creation) AS mois,\n             COUNT(*)                           AS recettes_par_mois\n      FROM Recette\n      GROUP BY DATE_TRUNC('month', date_creation)) AS sous_requete\nGROUP BY EXTRACT(YEAR FROM mois)\nORDER BY annee;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#46-identify-users-who-have-been-most-active-in-terms-of-comments-during-the-last-30-days","title":"46. Identify users who have been most active (in terms of comments) during the last 30 days.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT u.nom,\n       u.prenom,\n       COUNT(*) AS nombre_commentaires\nFROM Utilisateur u\n         JOIN Commentaire c ON u.id_utilisateur = c.id_utilisateur\nWHERE c.date_creation &gt;= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY u.id_utilisateur, u.nom, u.prenom\nORDER BY nombre_commentaires DESC\nLIMIT 5;\n</code></pre>"},{"location":"7.%20Exercises/SQL/02-recettes/#47-compare-the-number-of-recipes-created-this-year-versus-the-previous-year-by-quarter","title":"47. Compare the number of recipes created this year versus the previous year, by quarter.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH recettes_par_trimestre AS (SELECT EXTRACT(YEAR FROM date_creation)    AS annee,\n                                       EXTRACT(QUARTER FROM date_creation) AS trimestre,\n                                       COUNT(*)                            AS nombre_recettes\n                                FROM Recette\n                                WHERE (date_creation &gt;= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year')\n                                GROUP BY EXTRACT(YEAR FROM date_creation), EXTRACT(QUARTER FROM date_creation))\nSELECT r1.trimestre,\n       r1.nombre_recettes AS recettes_annee_precedente,\n       r2.nombre_recettes AS recettes_annee_courante\nFROM recettes_par_trimestre r1\n         LEFT JOIN recettes_par_trimestre r2\n                   ON r1.trimestre = r2.trimestre AND r2.annee = EXTRACT(YEAR FROM CURRENT_DATE)\nWHERE r1.annee = EXTRACT(YEAR FROM CURRENT_DATE) - 1\nORDER BY r1.trimestre;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/","title":"3. BD Northwind","text":""},{"location":"7.%20Exercises/SQL/03-northwind/#creation","title":"Creation","text":"<p>northwind_create.sql</p>"},{"location":"7.%20Exercises/SQL/03-northwind/#dea","title":"DEA","text":"PlantUML <pre><code>@startuml\n\n'!theme plain\ntop to bottom direction\nskinparam linetype ortho\nskinparam entityFontSize 18\nskinparam entityFontName Source Code Pro\nhide empty methods\nhide empty fields\n\nentity categories {\n   category_name: varchar(15)\n   description: text\n   picture: bytea\n   category_id: smallint\n}\nentity customer_customer_demo {\n   customer_id: varchar(5)\n   customer_type_id: varchar(5)\n}\nentity customer_demographics {\n   customer_desc: text\n   customer_type_id: varchar(5)\n}\nentity customers {\n   company_name: varchar(40)\n   contact_name: varchar(30)\n   contact_title: varchar(30)\n   address: varchar(60)\n   city: varchar(15)\n   region: varchar(15)\n   postal_code: varchar(10)\n   country: varchar(15)\n   phone: varchar(24)\n   fax: varchar(24)\n   customer_id: varchar(5)\n}\nentity employee_territories {\n   employee_id: smallint\n   territory_id: varchar(20)\n}\nentity employees {\n   last_name: varchar(20)\n   first_name: varchar(10)\n   title: varchar(30)\n   title_of_courtesy: varchar(25)\n   birth_date: date\n   hire_date: date\n   address: varchar(60)\n   city: varchar(15)\n   region: varchar(15)\n   postal_code: varchar(10)\n   country: varchar(15)\n   home_phone: varchar(24)\n   extension: varchar(4)\n   photo: bytea\n   notes: text\n   reports_to: smallint\n   photo_path: varchar(255)\n   employee_id: smallint\n}\nentity order_details {\n   unit_price: real\n   quantity: smallint\n   discount: real\n   order_id: smallint\n   product_id: smallint\n}\nentity orders {\n   customer_id: varchar(5)\n   employee_id: smallint\n   order_date: date\n   required_date: date\n   shipped_date: date\n   ship_via: smallint\n   freight: real\n   ship_name: varchar(40)\n   ship_address: varchar(60)\n   ship_city: varchar(15)\n   ship_region: varchar(15)\n   ship_postal_code: varchar(10)\n   ship_country: varchar(15)\n   order_id: smallint\n}\nentity products {\n   product_name: varchar(40)\n   supplier_id: smallint\n   category_id: smallint\n   quantity_per_unit: varchar(20)\n   unit_price: real\n   units_in_stock: smallint\n   units_on_order: smallint\n   reorder_level: smallint\n   discontinued: integer\n   product_id: smallint\n}\nentity region {\n   region_description: varchar(60)\n   region_id: smallint\n}\nentity shippers {\n   company_name: varchar(40)\n   phone: varchar(24)\n   shipper_id: smallint\n}\nentity suppliers {\n   company_name: varchar(40)\n   contact_name: varchar(30)\n   contact_title: varchar(30)\n   address: varchar(60)\n   city: varchar(15)\n   region: varchar(15)\n   postal_code: varchar(10)\n   country: varchar(15)\n   phone: varchar(24)\n   fax: varchar(24)\n   homepage: text\n   supplier_id: smallint\n}\nentity territories {\n   territory_description: varchar(60)\n   region_id: smallint\n   territory_id: varchar(20)\n}\nentity us_states {\n   state_name: varchar(100)\n   state_abbr: varchar(2)\n   state_region: varchar(50)\n   state_id: smallint\n}\n\ncustomer_customer_demo  -[#595959,plain]-^  customer_demographics  : \"customer_type_id\"\ncustomer_customer_demo  -[#595959,plain]-^  customers              : \"customer_id\"\nemployee_territories    -[#595959,plain]-^  employees              : \"employee_id\"\nemployee_territories    -[#595959,plain]-^  territories            : \"territory_id\"\nemployees               -[#595959,plain]-^  employees              : \"reports_to:employee_id\"\norder_details           -[#595959,plain]-^  orders                 : \"order_id\"\norder_details           -[#595959,plain]-^  products               : \"product_id\"\norders                  -[#595959,plain]-^  customers              : \"customer_id\"\norders                  -[#595959,plain]-^  employees              : \"employee_id\"\norders                  -[#595959,plain]-^  shippers               : \"ship_via:shipper_id\"\ncategories              ^-[#595959,plain]-  products               : \"category_id\"\nproducts                -[#595959,plain]-^  suppliers              : \"supplier_id\"\nterritories             -[#595959,plain]-^  region                 : \"region_id\"\n@enduml\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#queries","title":"Queries","text":""},{"location":"7.%20Exercises/SQL/03-northwind/#1-list-all-products-with-a-unit-price-greater-than-50","title":"1. List all products with a unit price greater than 50.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT product_name, unit_price\nFROM products\nWHERE unit_price &gt; 50\nORDER BY unit_price DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#2-how-many-employees-are-there-in-total-in-the-company","title":"2. How many employees are there in total in the company?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT COUNT(*) AS total_employees\nFROM employees;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#3-what-are-the-5-most-expensive-products","title":"3. What are the 5 most expensive products?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT product_name, unit_price\nFROM products\nORDER BY unit_price DESC\nLIMIT 5;\n</code></pre> <p>Difficulty: 3</p> Answer <pre><code>WITH ranked_products AS (SELECT product_name,\n                                unit_price,\n                                DENSE_RANK() OVER (ORDER BY unit_price DESC) as price_rank\n                         FROM products)\nSELECT product_name, unit_price\nFROM ranked_products\nWHERE price_rank &lt;= 5\nORDER BY unit_price DESC, product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#4-list-all-customers-based-in-france","title":"4. List all customers based in France.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT company_name, contact_name, city\nFROM customers\nWHERE country = 'France';\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#5-what-is-the-average-price-of-products","title":"5. What is the average price of products?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT AVG(unit_price) AS average_price\nFROM products;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#6-list-all-suppliers-not-based-in-the-united-states","title":"6. List all suppliers not based in the United States.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT company_name, country\nFROM suppliers\nWHERE country != 'USA';\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#7-how-many-products-are-currently-out-of-stock","title":"7. How many products are currently out of stock?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT COUNT(*) AS out_of_stock_products\nFROM products\nWHERE units_in_stock = 0;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#8-which-employees-were-hired-after-january-1-1993","title":"8. Which employees were hired after January 1, 1993?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date &gt; '1993-01-01'\nORDER BY hire_date;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#9-what-is-the-cheapest-product-in-stock","title":"9. What is the cheapest product in stock?","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT product_name, unit_price\nFROM products\nWHERE units_in_stock &gt; 0\nORDER BY unit_price ASC\nLIMIT 1;\n</code></pre> <p>Difficulty: 2</p> Answer <pre><code>SELECT product_name, unit_price\nFROM products\nWHERE units_in_stock &gt; 0\n  AND unit_price = (SELECT MIN(unit_price)\n                    FROM products\n                    WHERE units_in_stock &gt; 0)\nORDER BY product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#10-list-all-product-categories-in-alphabetical-order","title":"10. List all product categories in alphabetical order.","text":"<p>Difficulty: 1</p> Answer <pre><code>SELECT category_name\nFROM categories\nORDER BY category_name ASC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#11-list-all-products-with-their-corresponding-category","title":"11. List all products with their corresponding category.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT p.product_name, c.category_name\nFROM products p\n         JOIN categories c ON p.category_id = c.category_id\nORDER BY c.category_name, p.product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#12-display-employee-names-and-the-names-of-their-direct-supervisors","title":"12. Display employee names and the names of their direct supervisors.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT e.first_name || ' ' || e.last_name AS employee_name,\n       m.first_name || ' ' || m.last_name AS manager_name\nFROM employees e\n         LEFT JOIN employees m ON e.reports_to = m.employee_id\nORDER BY manager_name, employee_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#13-list-all-customers-with-their-orders-including-those-who-have-not-yet-placed-an-order","title":"13. List all customers with their orders, including those who have not yet placed an order.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT c.company_name, o.order_id, o.order_date\nFROM customers c\n         LEFT JOIN orders o ON c.customer_id = o.customer_id\nORDER BY c.company_name, o.order_date;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#14-display-the-details-of-products-ordered-in-order-number-10248","title":"14. Display the details of products ordered in order number 10248.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT p.product_name, od.quantity, od.unit_price\nFROM order_details od\n         JOIN products p ON od.product_id = p.product_id\nWHERE od.order_id = 10248\nORDER BY p.product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#15-list-all-employees-with-their-assigned-territories","title":"15. List all employees with their assigned territories.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT e.first_name || ' ' || e.last_name AS employee_name,\n       t.territory_description\nFROM employees e\n         JOIN employee_territories et ON e.employee_id = et.employee_id\n         JOIN territories t ON et.territory_id = t.territory_id\nORDER BY employee_name, t.territory_description;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#16-display-supplier-names-and-product-names-they-supply-for-the-beverages-category","title":"16. Display supplier names and product names they supply for the \u2018Beverages\u2019 category.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT s.company_name AS supplier_name, p.product_name\nFROM suppliers s\n         JOIN products p ON s.supplier_id = p.supplier_id\n         JOIN categories c ON p.category_id = c.category_id\nWHERE c.category_name = 'Beverages'\nORDER BY s.company_name, p.product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#17-list-all-orders-placed-by-the-customer-quick-stop-in-1997","title":"17. List all orders placed by the customer \u2018QUICK-Stop\u2019 in 1997.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT o.order_id, o.order_date, e.first_name || ' ' || e.last_name AS employee_name\nFROM orders o\n         JOIN customers c ON o.customer_id = c.customer_id\n         JOIN employees e ON o.employee_id = e.employee_id\nWHERE c.company_name = 'QUICK-Stop'\n  AND EXTRACT(YEAR FROM o.order_date) = 1997\nORDER BY o.order_date;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#18-display-products-and-their-suppliers-for-all-products-that-are-out-of-stock","title":"18. Display products and their suppliers for all products that are out of stock.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT p.product_name, s.company_name AS supplier_name, p.units_in_stock\nFROM products p\n         JOIN suppliers s ON p.supplier_id = s.supplier_id\nWHERE p.units_in_stock = 0\nORDER BY s.company_name, p.product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#19-list-all-employees-and-the-number-of-territories-assigned-to-them","title":"19. List all employees and the number of territories assigned to them.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT e.first_name || ' ' || e.last_name AS employee_name,\n       COUNT(et.territory_id)             AS territory_count\nFROM employees e\n         LEFT JOIN employee_territories et ON e.employee_id = et.employee_id\nGROUP BY e.employee_id, employee_name\nORDER BY employee_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#20-display-the-details-of-the-most-recent-order-for-each-customer","title":"20. Display the details of the most recent order for each customer.","text":"<p>Difficulty: 3</p> Answer <pre><code>WITH latest_orders AS (SELECT customer_id, MAX(order_date) AS max_order_date\n                       FROM orders\n                       GROUP BY customer_id)\nSELECT c.company_name, o.order_id, o.order_date\nFROM customers c\n         JOIN latest_orders lo ON c.customer_id = lo.customer_id\n         JOIN orders o ON lo.customer_id = o.customer_id AND lo.max_order_date = o.order_date\nORDER BY c.company_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#21-calculate-the-total-number-of-orders-per-customer","title":"21. Calculate the total number of orders per customer.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT c.company_name, COUNT(o.order_id) AS total_orders\nFROM customers c\n         LEFT JOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.company_name\nORDER BY total_orders DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#22-find-the-total-revenue-by-product-category","title":"22. Find the total revenue by product category.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.category_name, TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue\nFROM categories c\n         JOIN products p ON c.category_id = p.category_id\n         JOIN order_details od ON p.product_id = od.product_id\nGROUP BY c.category_id, c.category_name\nORDER BY total_revenue DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#23-list-employees-and-the-number-of-orders-they-handled-in-1997","title":"23. List employees and the number of orders they handled in 1997.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS orders_handled\nFROM employees e\n         LEFT JOIN orders o ON e.employee_id = o.employee_id AND EXTRACT(YEAR FROM o.order_date) = 1997\nGROUP BY e.employee_id, employee_name\nORDER BY orders_handled DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#24-calculate-the-average-price-of-products-by-supplier","title":"24. Calculate the average price of products by supplier.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT s.company_name AS supplier_name, TRUNC(AVG(p.unit_price)::numeric, 2) AS average_price\nFROM suppliers s\n         JOIN products p ON s.supplier_id = p.supplier_id\nGROUP BY s.supplier_id, s.company_name\nORDER BY average_price DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#25-find-the-5-best-selling-products-in-terms-of-quantity","title":"25. Find the 5 best-selling products in terms of quantity.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT p.product_name, SUM(od.quantity) AS total_quantity_sold\nFROM products p\n         JOIN order_details od ON p.product_id = od.product_id\nGROUP BY p.product_id, p.product_name\nORDER BY total_quantity_sold DESC\nLIMIT 5;\n</code></pre> <p>Difficulty: 3</p> Answer <pre><code>WITH product_sales AS (SELECT p.product_id, p.product_name, SUM(od.quantity) AS total_quantity_sold\n                       FROM products p\n                                JOIN order_details od ON p.product_id = od.product_id\n                       GROUP BY p.product_id, p.product_name),\n     ranked_products AS (SELECT product_id,\n                                product_name,\n                                total_quantity_sold,\n                                DENSE_RANK() OVER (ORDER BY total_quantity_sold DESC) AS sales_rank\n                         FROM product_sales)\nSELECT product_id, product_name, total_quantity_sold\nFROM ranked_products\nWHERE sales_rank &lt;= 5\nORDER BY total_quantity_sold DESC, product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#26-calculate-the-average-number-of-days-between-order-date-and-shipping-date-for-each-carrier","title":"26. Calculate the average number of days between order date and shipping date for each carrier.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT s.company_name                               AS shipper_name,\n       ROUND(AVG(o.shipped_date - o.order_date), 2) AS avg_shipping_days\nFROM shippers s\n         JOIN orders o ON s.shipper_id = o.ship_via\nWHERE o.shipped_date IS NOT NULL\nGROUP BY s.shipper_id, s.company_name\nORDER BY avg_shipping_days;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#27-identify-customers-who-have-placed-orders-totaling-more-than-10000-in-value","title":"27. Identify customers who have placed orders totaling more than 10000 in value.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.company_name,\n       TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_order_value\nFROM customers c\n         JOIN orders o ON c.customer_id = o.customer_id\n         JOIN order_details od ON o.order_id = od.order_id\nGROUP BY c.customer_id, c.company_name\nHAVING SUM(od.quantity * od.unit_price * (1 - od.discount)) &gt; 10000\nORDER BY total_order_value DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#28-calculate-the-number-of-different-products-ordered-by-each-customer","title":"28. Calculate the number of different products ordered by each customer.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT c.company_name, COUNT(DISTINCT od.product_id) AS unique_products_ordered\nFROM customers c\n         JOIN orders o ON c.customer_id = o.customer_id\n         JOIN order_details od ON o.order_id = od.order_id\nGROUP BY c.customer_id, c.company_name\nORDER BY unique_products_ordered DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#29-find-the-total-revenue-by-year-and-month","title":"29. Find the total revenue by year and month.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT EXTRACT(YEAR FROM o.order_date)                                         AS year,\n       EXTRACT(MONTH FROM o.order_date)                                        AS month,\n       TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue\nFROM orders o\n         JOIN order_details od ON o.order_id = od.order_id\nGROUP BY EXTRACT(YEAR FROM o.order_date), EXTRACT(MONTH FROM o.order_date)\nORDER BY year, month;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#30-identify-product-categories-that-have-generated-the-most-revenue-by-region","title":"30. Identify product categories that have generated the most revenue by region.","text":"<p>Difficulty: 4</p> Answer <pre><code>SELECT c.category_name,\n       r.region_description,\n       TRUNC(SUM(od.quantity * od.unit_price * (1 - od.discount))::numeric, 2) AS total_revenue\nFROM categories c\n         JOIN products p ON c.category_id = p.category_id\n         JOIN order_details od ON p.product_id = od.product_id\n         JOIN orders o ON od.order_id = o.order_id\n         JOIN customers cu ON o.customer_id = cu.customer_id\n         JOIN employees e ON o.employee_id = e.employee_id\n         JOIN employee_territories et ON e.employee_id = et.employee_id\n         JOIN territories t ON et.territory_id = t.territory_id\n         JOIN region r ON t.region_id = r.region_id\nGROUP BY c.category_id, c.category_name, r.region_id, r.region_description\nORDER BY r.region_description, total_revenue DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#31-find-products-that-have-never-been-ordered","title":"31. Find products that have never been ordered.","text":"<p>Difficulty: 2</p> Answer <pre><code>SELECT p.product_id, p.product_name\nFROM products p\n         LEFT JOIN order_details od ON p.product_id = od.product_id\nWHERE od.order_id IS NULL\nORDER BY p.product_id;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#32-calculate-employee-ranking-based-on-the-number-of-orders-they-have-handled","title":"32. Calculate employee ranking based on the number of orders they have handled.","text":"<p>Difficulty: 3</p> Answer <pre><code>SELECT e.employee_id,\n       e.first_name || ' ' || e.last_name            AS employee_name,\n       COUNT(o.order_id)                             AS order_count,\n       RANK() OVER (ORDER BY COUNT(o.order_id) DESC) AS employee_rank\nFROM employees e\n         LEFT JOIN orders o ON e.employee_id = o.employee_id\nGROUP BY e.employee_id, employee_name\nORDER BY employee_rank, employee_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#33-identify-customers-who-have-ordered-all-products-in-a-specific-category-for-example-beverages","title":"33. Identify customers who have ordered all products in a specific category (for example, \u2018Beverages\u2019).","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH beverage_products AS (SELECT product_id\n                           FROM products\n                                    JOIN categories ON products.category_id = categories.category_id\n                           WHERE category_name = 'Beverages')\nSELECT c.customer_id, c.company_name\nFROM customers c\nWHERE NOT EXISTS (SELECT bp.product_id\n                  FROM beverage_products bp\n                  WHERE NOT EXISTS (SELECT 1\n                                    FROM orders o\n                                             JOIN order_details od ON o.order_id = od.order_id\n                                    WHERE o.customer_id = c.customer_id\n                                      AND od.product_id = bp.product_id))\nORDER BY c.company_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#34-calculate-the-3-month-moving-average-of-total-sales","title":"34. Calculate the 3-month moving average of total sales.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH monthly_sales AS (SELECT DATE_TRUNC('month', o.order_date)                    AS sale_month,\n                              SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_sales\n                       FROM orders o\n                                JOIN\n                            order_details od ON o.order_id = od.order_id\n                       GROUP BY DATE_TRUNC('month', o.order_date))\nSELECT sale_month,\n       total_sales,\n       AVG(total_sales) OVER (\n           ORDER BY sale_month\n           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n           ) AS moving_average\nFROM monthly_sales\nORDER BY sale_month;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#35-find-pairs-of-products-that-are-always-ordered-together","title":"35. Find pairs of products that are always ordered together.","text":"<p>Difficulty: 5</p> Answer <pre><code>WITH product_pairs AS (SELECT od1.product_id               AS product1_id,\n                              od2.product_id               AS product2_id,\n                              COUNT(DISTINCT od1.order_id) AS order_count\n                       FROM order_details od1\n                                JOIN\n                            order_details od2 ON od1.order_id = od2.order_id AND od1.product_id &lt; od2.product_id\n                       GROUP BY od1.product_id, od2.product_id)\nSELECT p1.product_name AS product1_name,\n       p2.product_name AS product2_name,\n       pp.order_count\nFROM product_pairs pp\n         JOIN\n     products p1 ON pp.product1_id = p1.product_id\n         JOIN\n     products p2 ON pp.product2_id = p2.product_id\nWHERE pp.order_count = (SELECT COUNT(DISTINCT order_id) FROM orders)\nORDER BY p1.product_name, p2.product_name;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#36-calculate-the-percentage-contribution-of-each-product-to-total-revenue","title":"36. Calculate the percentage contribution of each product to total revenue.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH product_sales AS (SELECT p.product_id,\n                              p.product_name,\n                              SUM(od.quantity * od.unit_price * (1 - od.discount)) AS product_revenue\n                       FROM products p\n                                JOIN\n                            order_details od ON p.product_id = od.product_id\n                       GROUP BY p.product_id, p.product_name),\n     total_sales AS (SELECT SUM(product_revenue) AS total_revenue\n                     FROM product_sales)\nSELECT ps.product_name,\n       ps.product_revenue,\n       ROUND((ps.product_revenue / ts.total_revenue * 100)::numeric, 2) AS revenue_percentage\nFROM product_sales ps\n         CROSS JOIN\n     total_sales ts\nORDER BY revenue_percentage DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#37-identify-customers-who-have-increased-their-purchases-from-one-year-to-the-next","title":"37. Identify customers who have increased their purchases from one year to the next.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH yearly_customer_purchases AS (SELECT c.customer_id,\n                                          c.company_name,\n                                          EXTRACT(YEAR FROM o.order_date)                      AS order_year,\n                                          SUM(od.quantity * od.unit_price * (1 - od.discount)) AS total_purchase\n                                   FROM customers c\n                                            JOIN\n                                        orders o ON c.customer_id = o.customer_id\n                                            JOIN\n                                        order_details od ON o.order_id = od.order_id\n                                   GROUP BY c.customer_id, c.company_name, EXTRACT(YEAR FROM o.order_date))\nSELECT ycp1.customer_id,\n       ycp1.company_name,\n       ycp1.order_year                                                                              AS year1,\n       ycp1.total_purchase                                                                          AS purchase_year1,\n       ycp2.order_year                                                                              AS year2,\n       ycp2.total_purchase                                                                          AS purchase_year2,\n       TRUNC(((ycp2.total_purchase - ycp1.total_purchase) / ycp1.total_purchase * 100)::numeric, 2) AS growth_percentage\nFROM yearly_customer_purchases ycp1\n         JOIN\n     yearly_customer_purchases ycp2 ON ycp1.customer_id = ycp2.customer_id AND ycp2.order_year = ycp1.order_year + 1\nWHERE ycp2.total_purchase &gt; ycp1.total_purchase\nORDER BY growth_percentage DESC;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#38-find-the-longest-sequence-of-consecutive-days-with-orders","title":"38. Find the longest sequence of consecutive days with orders.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH date_diff AS (SELECT order_date,\n                          order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff\n                   FROM orders),\n     sequences AS (SELECT order_date,\n                          SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq\n                   FROM date_diff)\nSELECT MIN(order_date) AS start_date,\n       MAX(order_date) AS end_date,\n       COUNT(*)        AS consecutive_days\nFROM sequences\nGROUP BY seq\nORDER BY consecutive_days DESC\nLIMIT 1;\n</code></pre> <p>Difficulty: 5</p> Answer <pre><code>WITH date_diff AS (SELECT order_date,\n                          order_date - LAG(order_date) OVER (ORDER BY order_date) AS diff\n                   FROM orders),\n     sequences AS (SELECT order_date,\n                          SUM(CASE WHEN diff = 1 THEN 0 ELSE 1 END) OVER (ORDER BY order_date) AS seq\n                   FROM date_diff),\n     sequence_lengths AS (SELECT seq,\n                                 MIN(order_date) AS start_date,\n                                 MAX(order_date) AS end_date,\n                                 COUNT(*)        AS consecutive_days\n                          FROM sequences\n                          GROUP BY seq),\n     max_length AS (SELECT MAX(consecutive_days) AS max_consecutive_days\n                    FROM sequence_lengths)\nSELECT sl.start_date,\n       sl.end_date,\n       sl.consecutive_days\nFROM sequence_lengths sl\n         JOIN\n     max_length ml ON sl.consecutive_days = ml.max_consecutive_days\nORDER BY sl.start_date;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#39-calculate-the-average-time-between-orders-for-each-customer","title":"39. Calculate the average time between orders for each customer.","text":"<p>Difficulty: 4</p> Answer <pre><code>WITH customer_order_dates AS (SELECT customer_id,\n                                     order_date,\n                                     LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date\n                              FROM orders)\nSELECT c.customer_id,\n       c.company_name,\n       ROUND(AVG(cod.order_date - cod.prev_order_date)::numeric, 2) AS avg_days_between_orders\nFROM customers c\n         JOIN\n     customer_order_dates cod ON c.customer_id = cod.customer_id\nWHERE cod.prev_order_date IS NOT NULL\nGROUP BY c.customer_id, c.company_name\nORDER BY avg_days_between_orders;\n</code></pre>"},{"location":"7.%20Exercises/SQL/03-northwind/#40-identify-products-whose-sales-have-increased-each-month-over-a-period-of-at-least-3-consecutive-months","title":"40. Identify products whose sales have increased each month over a period of at least 3 consecutive months.","text":"<p>Difficulty: 5</p> Answer <pre><code>WITH monthly_product_sales AS (SELECT p.product_id,\n                                      p.product_name,\n                                      DATE_TRUNC('month', o.order_date)                    AS sale_month,\n                                      SUM(od.quantity * od.unit_price * (1 - od.discount)) AS monthly_sales\n                               FROM products p\n                                        JOIN\n                                    order_details od ON p.product_id = od.product_id\n                                        JOIN\n                                    orders o ON od.order_id = o.order_id\n                               GROUP BY p.product_id, p.product_name, DATE_TRUNC('month', o.order_date)),\n     sales_growth AS (SELECT product_id,\n                             product_name,\n                             sale_month,\n                             monthly_sales,\n                             LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) AS prev_month_sales,\n                             CASE\n                                 WHEN monthly_sales &gt;\n                                      LAG(monthly_sales) OVER (PARTITION BY product_id ORDER BY sale_month) THEN 1\n                                 ELSE 0\n                                 END                                                               AS is_increase\n                      FROM monthly_product_sales),\n     consecutive_increases AS (SELECT product_id,\n                                      product_name,\n                                      sale_month,\n                                      monthly_sales,\n                                      SUM(CASE WHEN is_increase = 0 THEN 1 ELSE 0 END)\n                                      OVER (PARTITION BY product_id ORDER BY sale_month) AS grp\n                               FROM sales_growth\n                               WHERE is_increase = 1)\nSELECT DISTINCT product_id,\n                product_name\nFROM (SELECT product_id,\n             product_name,\n             grp,\n             COUNT(*) OVER (PARTITION BY product_id, grp) AS consecutive_count\n      FROM consecutive_increases) subq\nWHERE consecutive_count &gt;= 3\nORDER BY product_id;\n</code></pre>"}]}